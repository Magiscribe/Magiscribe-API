[
  {
    "_id": "669714d6d2a052885450d6ef",
    "name": "Summary Generator",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "Analyzes data received by the Inquiry and provides either a conversation summary or a summary for all possible answers to a particular question.",
    "reasoning": null,
    "capabilities": ["669bee8d6773961cdf4604ae"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-07-17T00:48:22.792Z",
    "updatedAt": "2024-11-25T03:09:16.758Z",
    "__v": 0
  },
  {
    "_id": "669c5e9f67c3fed48dee52ea",
    "name": "Chat Analysis",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "Dynamic back and forth with the user, allowing them to chat with their data",
    "reasoning": {
      "llmModel": "CLAUDE_3_5_HAIKU",
      "prompt": "Give me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt and a capabilityAlias. The prompt and capabilityAlias are strings.\n\ncapabilityAlias can ONLY be one of the following: ChatReplyCapability, BarchartChatReplyCapability, or PiechartChatReplyCapability\nDo NOT include any other capabilities.\nIf a chart is explicitly requested, reply with either BarchartChatReplyCapability or PiechartChatReplyCapability. If the question can be answered directly with just text use ChatReplyCapability. No more than one capability should ever be selected.\n\n<Example1>\n<UserMessage>What new features are most commonly requested? Include a visualization. </UserMessage>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"What new features are most commonly requested? Aggregate the responses into high level concepts\", \"capabilityAlias\": \"BarchartChatReplyCapability\"},\n  ]}\n```\n</Example1>\n<Example2>\n<UserMessage>Describe the sentiment around our artistic style</UserMessage>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Describe the sentiment around our artistic style\", \"capabilityAlias\": \"ChatReplyCapability\"},\n  ]}\n```\n</Example2>\n<Example3>\n<UserMessage>What were the biggest pain points our users described?</UserMessage>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"What were the biggest pain points expressed by users?\", \"capabilityAlias\": \"ChatReplyCapability\"},\n  ]}\n```\n</Example3>\n<Example4>\n<UserMessage>Make a pie chart of the ethnicity demographics of our users</UserMessage>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Make a pie chart of the ethnicity demographics of our users\", \"capabilityAlias\": \"PiechartChatReplyCapability\"},\n  ]}\n```\n</Example4>\n\n<UserMessage>\n{{userMessage}}\n</UserMessage>\n\nConsider carefully whether or not you actually need to use following text. It represents PREVIOUS interactions between you and the user. Think of this as an old historical record to be referred to, not to be re-done. \n<ConversationHistory>\n{{history}}\n</ConversationHistory>\n\n<formatting>\nThere should not be additional comments before or after the ```json ``` block as these would break the downstream parser.\n</formatting>",
      "variablePassThrough": true,
      "_id": "674782d5a4a7aec88e617ab1"
    },
    "capabilities": [
      "669c6a3967c3fed48dee5362",
      "66c8ec09e952d5c0a4dbdb34",
      "66c8fff0e952d5c0a4dbdc91"
    ],
    "memoryEnabled": true,
    "subscriptionFilter": "\"textResponse\"\\s*:\\s*\"((?:\\\\.|[^\"\\\\])*?)\"",
    "outputFilter": "\"textResponse\"\\s*:\\s*\"((?:\\\\.|[^\"\\\\])*?)\"",
    "createdAt": "2024-07-21T01:04:31.420Z",
    "updatedAt": "2024-11-27T20:36:37.396Z",
    "__v": 0
  },
  {
    "_id": "66bf8be9a9430d3fa139142b",
    "name": "Condition Node",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "Chooses which node to go to next given the node visit history and graph",
    "reasoning": null,
    "capabilities": ["66bf8c22a9430d3fa139143a"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-08-16T17:27:05.199Z",
    "updatedAt": "2024-08-18T02:26:52.784Z",
    "__v": 0
  },
  {
    "_id": "66c003fb525628d5c5861ed0",
    "name": "Synthetic Data Generator (Reasoning)",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "For a given graph, creates synthetic node visit data",
    "reasoning": {
      "llmModel": "CLAUDE_3_5_SONNET_V2",
      "prompt": "Give me back a JSON object surrounded by three backticks and the word json\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt and a capabilityAlias. The prompt and capabilityAlias, are both strings. \nThe capabilityAlias must always be set to :SyntheticDataGenerationCapability\"\nYou are able to call this capability multiple times with a variety of prompts.\nWe are attempting to generate synthetic conversation data for a test set. Your role is just to call the SyntheticDataGenerationCapability multiple times in a dynamic way so that there is variety in our synthetic data.  The <userMessage> tag will direct you as to which variety of personas to adapt, but ultimately strive to create a variety of outputs. \n\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"This person loves the company and is their biggest brand supporter\", \"capabilityAlias\": \"SyntheticDataGenerationCapability\"},\n    { \"prompt\": \"This person is apathetic towards the company and does not want to participate\", capabilityAlias\": \"SyntheticDataGenerationCapability\"},\n    { \"prompt\": \"This person hates the company and wants to rant about their problems with it\", capabilityAlias\": \"SyntheticDataGenerationCapability\"},\n  ]}\n```\n\nYour response should only be valid JSON. There should not be additional comments before or after the JSON\n\n<userMessage>\n{{userMessage}}\n</userMessage>",
      "variablePassThrough": true,
      "_id": "672f8523750dff3bd2bcb50b"
    },
    "capabilities": ["66c25d95cbd9c2075c1e5f4e"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-08-17T01:59:23.045Z",
    "updatedAt": "2024-11-09T15:52:03.877Z",
    "__v": 0
  },
  {
    "_id": "66c0e685f815cac5b72f4d0e",
    "name": "Synthetic Data Generator",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "For a given graph, creates synthetic node visit data",
    "reasoning": null,
    "capabilities": ["66c0040e525628d5c5861ed8"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-08-17T18:05:57.006Z",
    "updatedAt": "2024-08-17T18:06:27.905Z",
    "__v": 0
  },
  {
    "_id": "66c8ac40d28a5133dd801ad1",
    "name": "Dynamic Question Generation",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "Generates the question to ask next given the node visit history and graph",
    "reasoning": null,
    "capabilities": ["66c8a9f8d28a5133dd801ab7"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-08-23T15:35:28.963Z",
    "updatedAt": "2024-08-23T15:36:04.244Z",
    "__v": 0
  },
  {
    "_id": "66c955faae782803372bda0f",
    "name": "Dynamic Information Generation",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "Generates the information given the node visit history and graph",
    "reasoning": null,
    "capabilities": ["66c95576ae782803372bd9f8"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-08-24T03:39:38.864Z",
    "updatedAt": "2024-08-24T03:39:57.669Z",
    "__v": 0
  },
  {
    "_id": "66fed263135939f6d3130f89",
    "name": "Graph Edit Agent",
    "logicalCollection": "67200e060a342cc6ff42ddee",
    "description": "This agent takes in an existing graph and a request to modify it and returns a list of nodes to upsert, a list of nodes to delete, a list of edges to add, and a list of edges to delete. Good for making complex modifications to existing graphs.",
    "reasoning": null,
    "capabilities": ["66fed2ad135939f6d3130fa6"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-10-03T17:20:35.205Z",
    "updatedAt": "2024-10-30T02:46:21.156Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b3343",
    "name": "Drawing Agent",
    "logicalCollection": "67200e060a342cc6ff42dd22",
    "description": "An agent capable of drawing shapes and lines on a coordinate plane.",
    "reasoning": {
      "llmModel": "CLAUDE_3_5_SONNET_V2",
      "prompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt, a capabilityAlias, and context. The prompt, capabilityAlias, and context are all strings.\nmessage contains simple commands for a particular capability. These commands will later be executed in order. These commands need to be specific! The downstream capabilities will not have access to <ConversationHistory> so you will need to pass along specific instructions including locations.\ncapabilityAlias can ONLY be one of the following: LineCapability, FunctionCapability, TextCapability, EllipseCapability, ArrowCapability, PolygonCapability, PointCapability, and FreedrawCapability. Do NOT include any other capabilities.\nLineCapability draws lines, FunctionCapability draws functions, TextCapability writes alphanumeric text with known characters, EllipseCapability draws ellipses and circles, PolygonCapability draws triangles, quadrilaterals, pentagons, hexagons, octagons, etc.. To use PolygonCapability describe the points in counterclockwise or clockwsie order, for PolygonCapability you should have as many points as sides of the shape, ArrowCapability draws both unidirectional and bidrectional arrows, PointCapability draws points, FreedrawCapability lets the model itself choose a list of points to have connected in order \nYou need to include every relevant concept in the <UserMessage> tags so that the user gets what they want including color and specific attributes for each object. This is the key source of instruction. Note: The Capability can draw multiple instances of its type, but every capability should handle no more than a few of its type. You can re-use capabilities and/or give multiple instructions to the same capability. No capability should handle more things than the total number capabilities called.\nNote: If a color is specified in reference to a given element \"...draw a green point at...\" include that color in your message to the capabilityAlias to render it. \nWhen providing instructions to the downstream capability be precise and use specific coordinates whenever you provide instructions. Points are framed [x,y]. Quadrant 1 (first quadrant) has both x positive and y positive, Quadrant 2 (second quadrant) has x negative and y positive, Quadrant 3 (third quadrant) has both x negative and y negative, Quadrant 4 (fourth quadrant) is x positive and y negative. If a user asks for a shape in a specific quadrant, ensure that every point in the shape is in that quadrant.\nFor complicated requests, be sure to break it down into simpler component pieces. Note that when drawing Venn Diagrams provide ample overlap of the circles, but in general if overlap is not requested it should be avoided. Place text maybe a little to the left of where you think you need to since we are rendering the top left part of it.\nThese examples show you how to do something, not what to do, do not repeat these, simply utilize them for structural purposes\n<Example1>\n<UserMessage>I want to see a full coordinate axis with the x and y axes labeled and then zoom in\" </UserMessage>\n<ReferenceFrame>xMin=-10, xMax=10, yMin=-100, yMax=100</ReferenceFrame><AppState>width=1246, height=952, scrollX=234, scrollY=-534, zoom=0.5</AppState><ConversationHistory>This is the first message in the thread</ConversationHistory>\n# Note: The x axis is a line from (xMin,0) to (xMax,0), the y axis is a line from (0,yMin) to (0,yMax), \n# Note 2: The text labels are also derived from the context. xMin at (xMin,0), xMax at (xMax,0), yMin at (0,yMin), yMax at (0,yMax)\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a line from (-10,0) to (10,0) and Draw a line from (0,-100) to (0,100)\", \"capabilityAlias\": \"LineCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '10' using known text characters at (10,0), Write the number '-10' using known text characters at (-10,0), Write the number '100' using known text characters at (0, 100), Write the number '-100' using known text characters at (0, -100)\", \"capabilityAlias\": \"TextCapability\", \"context\": \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n  ]}\n```\n</Example1>\n<Example2>\n<UserMessage>Draw a rectangle from (10,10), (10, 40), (40,10), (40,40) and a thick circle centered at (50,50) with a radius of 20 units</UserMessage>\n<ReferenceFrame>xMin=-20, xMax=60, yMin=-5, yMax=75></ReferenceFrame><AppState>width=1746, height=859, scrollX=1904, scrollY=958, zoom=0.95</AppState><ConversationHistory>User: Draw two points \\n Agent: {\"elementProperties\":{\"type\":\"freedraw\"},\"startCoordinates\":[1,1],\"description\":\"A point at (1,1)\"}, {\"elementProperties\":\"type\":\"freedraw\"},\"startCoordinates\":[2,2],\"description\":\"A point at (2,2)\"}</ConversationHistory>\n# Note 1: The EllipseCapability is always used for circles\n# Note 2: None of the ThreadHistory is relevant to handling this request, only the prompt is\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Connect the points from (10,10), (10, 40), (40,10), (40,40) with lines to draw a rectangle\", \"capabilityAlias\": \"PolygonCapability\", \"context\": \"xMin=-20, xMax=60, yMin=-5, yMax=75\"},\n    { \"prompt\": \"Draw a thick circle centered at (50,50) with radius 20\", \"capabilityAlias\": \"EllipseCapability\", \"context\": \"xMin=-20, xMax=60, yMin=-5, yMax=75\"},\n  ]}\n```\n</Example2>\n<Example3>\n<UserMessage>Draw an arrow from the red point to the green point. Draw another arrow between the orange point and the purple point. Draw points at (-13.37, -9.11), (-200,15), and (-100,2.3) </UserMessage>\n<ReferenceFrame>xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7</ReferenceFrame><AppState>width=1920, height=1080, scrollX=-1233, scrollY=5423, zoom=1.5</AppState><ConversationHistory>User: Draw a red point  below and to the left of a green point.\\n Agent: {\"elementProperties\":{\"type\":\"freedraw\", \"strokeColor\":\"#FF0000\"},\"startCoordinates\":[-90,-90],\"description\":\"A red point at (-90,-90)\"}, {\"elementProperties\":\"type\":\"freedraw\", \"strokeColor\":\"#00FF00\"},\"startCoordinates\":[-70,-40],\"description\":\"A green point at (-70,-40)\"}\\n User: Above and to the right of those previous points, draw an orange point below and to the left of a purple point\\n Agent: {\"elementProperties\":{\"type\":\"freedraw\", \"strokeColor\":\"#FFA500\"},\"startCoordinates\":[-33,-27],\"description\":\"An orange point at (-33,-27)\"}, {\"elementProperties\":\"type\":\"freedraw\", \"strokeColor\":\"#800080\"},\"startCoordinates\":[-8,-10],\"description\":\"A purple point at (-8,-10)\"}</ThreadHistory>\n# IMPORTANT: The word 'between' MEANS bidirectional, and the word 'from' MEANS unidirectional. Add one of these keywords (bidirectional or unidirectional) to your prompt for the arrow agent. Please use the coordinates from <ConversationHistory> in this scenario because it is relevant to do so.\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a unidirectional arrow from (-90,-90) to (-70,-40) and Draw a bidirectional arrow between (-33,-27) and (-8,-10)\", \"capabilityAlias\": \"ArrowCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\" },\n    { \"prompt\": \"Mark points at (-13.37,-9.11), (-200,15), and (-100,2.3)\", \"capabilityAlias\": \"PointCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\"},\n  ]}\n```\n</Example3>\n<Example4>\n<ReferenceFrame>xMin=-1, xMax=10, yMin=-10, yMax=30<ReferenceFrame><AppState>width=1920, height=1080, scrollX=-1233, scrollY=5423, zoom=2.5</AppState><ConversationHistory>User: Draw a triangle from (2,10), (6,10) and (4,20). Additionally draw a diamond from (5,12),(6,9),(7,12) and (6,15)\\nAgent: {\\\"elementProperties\\\":{\\\"type\\\":\\\"line\\\",\\\"strokeColor\\\":\\\"#FF00FF\\\",\\\"strokeWidth\\\":2},\\\"startCoordinates\\\":[2,10],\\\"description\\\":\\\"Triangle with vertices [(2, 10), (6, 10), (4, 20)]\\\",\\\"points\\\":[[0,0],[4,0],[2,10],[0,0]]}\\n{\\\"elementProperties\\\":{\\\"type\\\":\\\"line\\\",\\\"strokeColor\\\":\\\"#FF0000\\\",\\\"strokeWidth\\\":1.5},\\\"startCoordinates\\\":[5,12],\\\"description\\\":\\\"Diamond with vertices [(5, 12), (6, 9), (7, 12), (6, 15)]\\\",\\\"points\\\":[[0,0],[1,-3],[2,0],[1,3],[0,0]]}</ConversationHistory>\n<UserMessage>Graph the functions y=x^2*sin(x) in brown and and y=69/(1+e^(-x)) in purple as well as a thick magenta arrow between the top of the triangle and bottom of the diamond</UserMessage>\nNote: \"explanation\" won't be passed along to the next agent. Use this as an internal thought process to reason step by step about how to create the points coherently\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Graph the function y=x^2*sin(x) in brown and graph the function y=69/(1+e^(-x)) in purple\", \"capabilityAlias\": \"FunctionCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" },\n    { \"explanation\": \"Looking at the <ThreadHistory> I see that I have both a triangle and a diamond. Based on the y coordinates, the top of the triangle is at (4,20) and the bottom of the diamond is at (6,9), \"prompt\": \"Draw a thick bidirectional magenta arrow between (4,20) and (6,9)\", \"capabilityAlias\": \"ArrowCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" }\n  ]}\n```\n</Example4>\n<Example 5>\n<ReferenceFrame>xMin=-10, xMax=10, yMin=-10, yMax=10</ReferenceFrame><AppState>width=1250, height=800, scrollX=8390, scrollY=-3451, zoom=1</AppState><ConversationHistory>This is the first message in the thread</ConversationHistory>\"\n<UserMessage>Draw a hexagon in the first quadrant with side length 3. \nThen, draw a square in the third quadrant\nDraw a triangle in the second quadrant\nFinally, Draw a circle in the fourth quadrant.\"</UserMessage>\nNote: \"explanation\" won't be passed along to the next agent. Use this as an internal thought process to reason step by step about how to create the points coherently. Complicated requests like this it makes sense to split up amongst multiple of the same capability.\n{\"processingSteps\": [\n  {\n    \"explanation\": \"For the hexagon, I need to choose a starting point in the first quadrant (0 < x < xMax, 0 < y < yMax). (5, 5) is a good choice given the available context, leaving room for the shape. For my first side I'll go three units across the bottom to (8,5), then I'll go up and to the right to (10, 7), then I'll go up and to the left to (8,9) then I'll go across to (5,9) then down and to the left to (3,7) and finally down and to the right back to (5,5). I don't need to specify the return to the final homepoint, PolygonCapability takes care of that for me\n    \"prompt\": \"Draw a regular hexagon using points [(5, 5), (8, 5), (10, 7), (8, 9), (5, 9), (3, 7)]\",\n    \"capabilityAlias\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Next, a square in the third quadrant (x < 0, y < 0). Center at (-5, -5) works well. Side length is 4, so vertices are 2 units from the center in each direction: (-7, -7), (-3, -7), (-3, -3), (-7, -3) in clockwise order.\",\n    \"prompt\": \"Draw a square using points [(-7, -7), (-3, -7), (-3, -3), (-7, -3)]\",\n    \"capabilityAlias\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"An equilateral triangle in the second quadrant. The bottom side can be (-7, 3) to (-3, 3), length 4. For 60° angles, the height is 4 * sin(60°) ≈ 3.464. So, the top vertex is at (-5, 3 + 3.464) = (-5, 6.464)\",\n    \"prompt\": \"Draw an equilateral triangle above the square, sharing its top side, using points [(-7, -3), (-3, -3), (-5, 0.464)]\",\n    \"capabilityAlias\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Now, a circle in the fourth quadrant, for what we can center a circle at (2, -6) with radius 4. This is a perfect job for the EllipseCapability, as it specializes in drawing circles and ellipses.\",\n    \"prompt\": \"Draw a circle centered at (2, -6) with radius 4\",\n    \"capabilityAlias\": \"EllipseCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  }\n]}\n</Example5>\n<Example6>\n<UserMessage>Draw a line from the top of the triangle to the top of the green circle and draw a curve from the bottom left of the triangle to the bottom of the green circle</UserMessage>\n<ReferenceFrame>xMin=-10, xMax=10, yMin=-10, yMax=10</ReferenceFrame><AppState>width=1250, height=800, scrollX=8390, scrollY=-3451, zoom=1</AppState><ConversationHistory>User:\\n      Draw a coordinate plane\\nAgent:\\n      Line from (-10,0) to (10,0), Line from (0,-10) to (0,10), -10, 10, -10, 10\\nUser:\\n      Draw a triangle in the first quadrant\\nAgent:\\n      Triangle with vertices [(2, 2), (5, 2), (3.5, 5)]\\nUser:\\n      Draw a circle under the triangle\\nAgent:\\n      Circle with center \n(3.5, 1) and radius of 2\\nUser:\\n      Draw a green circle to the right triangle\\nAgent:\\n      Circle with center (8, 2.7) and radius of 2.5\\n</ConversationHistory>\n{\"processingSteps\": [\n  {\n    \"explanation\": \"Since the downstream capabilities wont know about the location of the triangle and the green circle, I will specify exactly where to draw the line to complete the request\n    \"prompt\": \"Draw a line from (3.5,5) to (8,5.2)\",\n    \"capabilityAlias\": \"LineCapability\",\n    \"context\": \"xMin=-10, xMax=10, yMin=-10, yMax=10\"\n  },\n {\n    \"explanation\": \"Since the downstream capabilities wont know about the location of the triangle and the green circle or the other objects, I will specify a proper path to avoid overlap\n    \"prompt\": \"Draw a curve from (2,2) to (8,0.2) that starts flat, steeply decreases, and then flattens out again\",\n    \"capabilityAlias\": \"FreedrawCapability\",\n    \"context\": \"xMin=-10, xMax=10, yMin=-10, yMax=10\"\n  },\n]}\n</Example6>\n</System>\n\nConsider carefully whether or not you actually need to use following text. It represents PREVIOUS interactions between you and the user. Think of this as an old historical record to be referred to, not to be re-done. \n<ConversationHistory>\n{{history}}\n</ConversationHistory>\n\n<ReferenceFrame>\n{{context}}\n</ReferenceFrame>\n\n<UserMessage>\n{{userMessage}}\n</UserMessage>",
      "variablePassThrough": false,
      "_id": "672f852e750dff3bd2bcb51c"
    },
    "capabilities": [
      "6670ab02f446b4f1a67b332e",
      "6670ab02f446b4f1a67b3330",
      "6670ab02f446b4f1a67b3332",
      "6670ab02f446b4f1a67b3334",
      "6670ab02f446b4f1a67b3336",
      "6670ab02f446b4f1a67b3338",
      "6670ab02f446b4f1a67b333a",
      "6688969bb32be1363c756056"
    ],
    "memoryEnabled": true,
    "subscriptionFilter": null,
    "outputFilter": "\"description\"\\s*:\\s*\"((?:\\\\.|[^\"\\\\])*?)\"",
    "createdAt": "2024-06-17T21:30:42.709Z",
    "updatedAt": "2024-11-09T15:52:14.745Z",
    "__v": 0
  },
  {
    "_id": "67212067747e6adbb29b1120",
    "name": "Author",
    "logicalCollection": "67211aca1648c17f768ea367",
    "description": "A testing agent for verifying agents are working.",
    "reasoning": null,
    "capabilities": ["67211fbe1648c17f768ea387"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-10-29T17:50:31.053Z",
    "updatedAt": "2024-10-29T17:50:31.053Z",
    "__v": 0
  },
  {
    "_id": "66ad631ab5b289898ce68de9",
    "name": "Graph of Thought Agent",
    "logicalCollection": "67211aca1658c17f768ea367",
    "description": "Agent that has the ability to expand along and evaluate a graph of thoughts with the initial user input as a root node.",
    "reasoning": {
      "llmModel": "CLAUDE_3_5_HAIKU",
      "prompt": "Give me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt and a capabilityAlias. The prompt and capabilityAlias are strings.\ncapabilityAlias can ONLY be one of the following: ExpandGraphCapability, EvaluateOptionsCapability, CheckCompletionCapability, GenericPythonExecutionCapability, NextStepCapability, BingWebSearchCapability\nDo NOT include any other capabilities.\n\nAnalyze the input and choose the appropriate capability based on these rules:\n1. If the instruction mentions branching or coming up with additional options, use ExpandGraphCapability.\n2. If the instruction mentions evaluating or deciding between options, use EvaluateOptionsCapability.\n3. If the instruction wants to know if the problem has been solved or if the reasoning is complete, use CheckCompletionCapability.\n4. If the instruction mentions to write python to perform an algorithmic search then use GenericPythonExecutionCapability\n5. If the instruction mentions to figure out the next logical step to take based on the <currentGraph> and <currentChainOfThought> use NextStepCapability\n6. If the instruction mentions to search the web for data then use BingWebSearchCapability\n\n<Example1>\n<instruction>Branch off of node 1</instruction>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Branch off of node 1\", \"capabilityAlias\": \"ExpandGraphCapability\"},\n  ]}\n```\n<Example/1>\n\n<Example2>\n<instruction>Evaluate nodes 2, 3, 4, 5, 6</instruction>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Evaluate nodes 2, 3, 4, 5, 6\", \"capabilityAlias\": \"EvaluateOptionsCapability\"},\n  ]}\n```\n</Example2>\n\n<Example3>\n{\n<instruction>Check to see if the current chain of thought completes the task</instruction>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Check to see if the current chain of thought completes the task\", \"capabilityAlias\": \"CheckCompletionCapability\"},\n  ]}\n```\n</Example3>\n\n<Example4>\n<instruction>Execute the current chain of thought using python</instruction>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Execute the current chain of thought using python\", \"capabilityAlias\": \"GenericPythonExecutionCapability\"},\n  ]}\n```\n</Example4>\n\n<Example5>\n<instruction>Figure out the next logical step to take based on the <currentGraph> and <currentChainOfThought></instruction>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"figure out the next logical step to take based on the <currentGraph> and <currentChainOfThought>\", \"capabilityAlias\": \"NextStepCapability\"},\n  ]}\n```\n</Example5>\n<Example6>\n<instruction>Use the Bing Web Search capability to execute the task in accordance with the <currentChainOfThought> with sourceNode ${lastChainOfThoughtNodeId}</instruction>\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Use python to execute the task in accordance with the <currentChainOfThought> with sourceNode ${lastChainOfThoughtNodeId}\", \"capabilityAlias\": \"BingWebSearchCapability\"},\n  ]}\n```\n</Example6>\n\n<instruction>{{userMessage}}</instruction>",
      "variablePassThrough": true,
      "_id": "672f85df750dff3bd2bcb5dd"
    },
    "capabilities": [
      "66ad68b1b5b289898ce68dfe",
      "66ad7093b5b289898ce68e39",
      "66ad733cb5b289898ce68e5b",
      "66ad9cff395f8759f8bd44ab",
      "66b1605669a8280877a01f47",
      "66c6acd775e86c38e8cd5107"
    ],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2024-08-02T22:52:10.706Z",
    "updatedAt": "2024-11-09T15:55:11.862Z",
    "__v": 0
  },
  {
    "_id": "6781f3bb2bb441a29a7438c2",
    "name": "Synthetic User Purchase Data",
    "logicalCollection": "6781f2542bb441a29a74387c",
    "description": "Takes in a minimum and maximum id. Will enumerate users and their personas from the min to max. These users will be passed down to SyntheticProductDataGenerator capability to make synthetic purchase history.",
    "reasoning": {
      "llmModel": "CLAUDE_3_5_SONNET_V2",
      "prompt": "Give me back a JSON object surrounded by three backticks and the word json\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt and a capabilityAlias. The prompt and capabilityAlias, are both strings. \nThe capabilityAlias must always be set to \"SyntheticProductDataGenerator\"\nYou are able to call this capability multiple times with a variety of prompts.\nYou will enumerate from <minId> to <maxId> the correct number of personas\nWe are attempting to generate synthetic conversation data for a test set. Your role is just to call the SyntheticDataGenerationCapability multiple times in a dynamic way so that there is variety in our synthetic data.  The <userMessage> tag will direct you as to which variety of personas to adapt, but ultimately strive to create a variety of outputs. \n\n```json\n{\n \"processingSteps\": [\n   {\n     \"prompt\": \"Tingle Mcgringleberry is a fun guy who loves rock and roll, but recently married, he had a baby with his lovely life and that is his focus now. He still wants to rock but now has adult responsibilities. His customerId is 420\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Sarah Chen is a tech-savvy software developer who works remotely. She's passionate about fitness and wellness, trying to balance her desk job with an active lifestyle. She's also getting into home automation and smart devices. Her customerId is 421\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Robert Washington is a retired military veteran who's taken up gardening and woodworking. He's meticulous about his tools and enjoys teaching his grandchildren about nature. He's also learning to use technology to stay connected with family. His customerId is 422\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Maya Patel is a college student studying environmental science. She's eco-conscious, loves outdoor activities, and tries to maintain a sustainable lifestyle on a budget. She regularly participates in campus activities and outdoor clubs. Her customerId is 423\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Marcus Rodriguez is a professional chef who recently opened his own food truck. He's constantly looking for new kitchen gadgets and ingredients, while also maintaining his food truck equipment. He's active on social media promoting his business. His customerId is 424\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Emma Foster is a single mother of two teenagers who works as a high school teacher. She's budget-conscious but ensures her kids have what they need for school and activities. She enjoys reading and home decoration in her spare time. Her customerId is 425\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Dr. James Wilson is a veterinarian who owns multiple pets. He's passionate about animal care and regularly purchases supplies for both his clinic and his own pets. He enjoys photography and documenting wildlife in his free time. His customerId is 426\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Aisha Mohammed is a fitness instructor who recently started her own online coaching business. She's invested in home gym equipment and digital products for her virtual classes. She follows a strict nutrition plan and loves trying new healthy recipes. Her customerId is 427\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"David Kim is a freelance graphic designer who's also a gaming enthusiast. He splits his purchases between professional equipment for his work and gaming gear. He's recently started collecting vinyl records and vintage gaming consoles. His customerId is 428\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   },\n   {\n     \"prompt\": \"Linda Martinez is a retired elementary school principal who's become a serious amateur photographer. She travels frequently in her RV, documenting national parks. She's learning to edit photos digitally and prints photobooks for her family. Her customerId is 429\",\n     \"capabilityAlias\": \"SyntheticProductDataGenerator\"\n   }\n ]\n}\n```\n\nYour response should only be valid JSON. There should not be additional comments before or after the JSON\n\n<userMessage>\n{{userMessage}}\n</userMessage>\n\n<minId>{{minId}}</minId><maxId>{{maxId}}</maxId>",
      "variablePassThrough": true,
      "_id": "6781f3bb2bb441a29a7438c3"
    },
    "capabilities": ["6781f34b2bb441a29a7438b3"],
    "memoryEnabled": false,
    "subscriptionFilter": null,
    "outputFilter": null,
    "createdAt": "2025-01-11T04:29:47.444Z",
    "updatedAt": "2025-01-11T04:29:47.444Z",
    "__v": 0
  }
]
