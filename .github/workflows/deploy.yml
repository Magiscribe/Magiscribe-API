name: Deploy

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  packages: write

# Allow one concurrent deployment
concurrency:
  group: infrastructure-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev'}}
  cancel-in-progress: true

jobs:
  build-lambdas:
    name: Build Python Executor Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './app/lambdas/python-executor'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::211125562192:role/GitHubAssumeRole' || 'arn:aws:iam::891377366124:role/GithubAssumeRole' }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        shell: bash
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: python-executor
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG 
          docker push $REGISTRY/$REPOSITORY:latest

  build-api:
    name: Push API Image
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './app'
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::211125562192:role/GitHubAssumeRole' || 'arn:aws:iam::891377366124:role/GithubAssumeRole' }}
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Build, tag, and push image to Amazon ECR
        shell: bash
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: graphql-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest

  terraform:
    name: "Terraform CDK Deploy"
    runs-on: ubuntu-latest
    needs: [build-lambdas, build-api]
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'          
          cache-dependency-path: ./infrastructure/pnpm-lock.yaml

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ github.ref == 'refs/heads/main' && 'arn:aws:iam::211125562192:role/GitHubAssumeRole' || 'arn:aws:iam::891377366124:role/GithubAssumeRole' }}
          aws-region: us-east-1

      - name: Install dependencies
        run: pnpm install

      - name: Generate module and provider bindings
        run: pnpm run get

      - name: Run Terraform CDK
        uses: hashicorp/terraform-cdk-action@v4
        with:
          mode: auto-approve-apply
          stackName: network data app client-app client-landing
          workingDirectory: ./infrastructure
          githubToken: ${{ secrets.GITHUB_TOKEN }}
        env:
          NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev'}}