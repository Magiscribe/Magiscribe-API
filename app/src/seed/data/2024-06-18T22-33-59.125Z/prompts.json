[
  {
    "_id": "6671ddd059c80137acf15ca4",
    "name": "appState",
    "text": "The code shall define a function called generate_appStateDict() that creates a variable called appStateDict sets it equal to a JSON and returns it.\nThe code should also call the function with the provided parameters and set the returned value equal to appStateDict. \nThis will be the only variable because the written function can only be called once. \nDo NOT print(appStateDict), do NOT JSON.dumps(appStateDict), the very last line of code should always be: \n  appStateDict = generate_appStateDict() #Possibly with parameters\nThe appStateDict JSON that gets returned should only contain the necessary properties to satisfy the user request\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15ca7",
    "name": "drawing",
    "text": "The code shall define a function called generate_coordinateDict() that creates a variable called coordinateDict sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to coordinateDict. This will be the only variable because the written function can only be called once. Do NOT print(coordinateDict), do NOT JSON.dumps(coordinateDict), the very last line of code should always be: coordinateDict = generate_coordinateDict() #Possibly with parameters\nThis JSON also contains a textResponse which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [startX, startY] when required \n\nExample coordinateDict Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"relativeCoordinates\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"textResponse\": \"Brief text description\" #required\n  }\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15ca8",
    "name": "functionTemplate",
    "text": "This JSON also contains a list of relativeCoordinates structured like this [[x0,y0],[x1,y1],[xn,yn]] that can be arbitrarily long.\nTo draw a function the program should return a JSON with start coordinate [startX, startY] and calculated relative coordinates. They will be calculated by going form xMin to xMax and breaking it into graphScaleX sub points evenly spaced between them and then multiplying the resulting value by -1 to account for the graphics software processing it upside down.\n\n# Example python code function that draws y=sin(x)*x^2 with xMin=-10,xMax=10,yMin=-10,yMax=10, graphScaleX=1000, and graphScaleY=1000\nimport numpy as np\ndef generate_coordinateDict(startX, startY, xMin, xMax, yMin, yMax, graphScaleX, graphScaleY):\n    x_values = np.linspace(xMin, xMax, graphScaleX)\n    y_values = np.sin(x_values) * x_values ** 2\n    \n    x_multiplier = graphScaleX / (xMax - xMin)\n    y_multiplier = graphScaleY / (yMax - yMin)\n    \n    scaled_x_values = [(x * x_multiplier) for x in x_values]\n    scaled_y_values = [(-1 * y * y_multiplier) for y in y_values]\n    \n    relative_coordinates = [[x, y] for x, y in zip(scaled_x_values, scaled_y_values)]\n    \n    coordinateDict = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [startX, startY],\n        \"relativeCoordinates\": relative_coordinates,\n        \"textResponse\": \"y=sin(x)*x^2\"\n    }\n    \n    return coordinateDict\n\ncoordinateDict = generate_coordinateDict(0, 0, -10, 10, -10, 10, 1000, 1000)\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15ca9",
    "name": "line",
    "text": "This JSON also contains a list of relativeCoordinates that contains exactly two points.\n\ndef generate_coordinateDict(startX, startY, xMin, xMax, yMin, yMax, graphScaleX, graphScaleY, x1, y1, x2, y2):\n  x_multiplier = graphScaleX / (xMax - xMin)\n  y_multiplier = graphScaleY / (yMax - yMin)\n  scaled_x1 = startX + (x1 * x_multiplier)\n  scaled_y1 = startY + (-1 * y1 * y_multiplier)\n  scaled_x2 = startX + (x2 * x_multiplier)\n  scaled_y2 = startY + (-1 * y2 * y_multiplier)\n  \n  coordinateDict = {\n    \"elementProperties\": {\"type\": \"line\"},\n    \"startCoordinates\": [scaled_x1, scaled_y1], \n    \"relativeCoordinates\": [[0, 0], [scaled_x2-scaled_x1, scaled_y2-scaled_y1]], #This must always be of length two where the first point is [0,0] and the second point is the difference\n    \"textResponse\": \"Line between (x1,y1) and (x2,y2)\" #Where x1,y1,x2,y2 are directly pulled from the function parameters\n  }\n  return coordinateDict\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15caa",
    "name": "point",
    "text": " .\n# Example python code function that draws a point at (2,3) with xMin=-10,xMax=10,yMin=-10,yMax=10, graphScaleX=1000, and graphScaleY=1000\n# Example python code that draws a point\n# Note: relativeCoordinates should return a list of list of lists that will always be [[0,0],[2,0],[0,-2],[-2,0],[0,2],[2,0],[-2,0],[0,0]]. \n  def generate_coordinateDict(startX, startY, xMin, xMax, yMin, yMax, graphScaleX, graphScaleY, pointX, pointY):\n    x_multiplier = graphScaleX / (xMax - xMin)\n    y_multiplier = graphScaleY / (yMax - yMin)\n    scaled_pointX = startX + (pointX * x_multiplier)\n    scaled_pointY = startY + (-1*pointY*y_multiplier)\n  \n    coordinateDict = {\n      \"elementProperties\": {\"type\": \"freedraw\"},\n      \"startCoordinates\": [scaled_pointX, scaled_pointY],\n      \"relativeCoordinates\": [[0,0],[2,0],[0,-2],[-2,0],[0,2],[2,0],[-2,0],[0,0]],\n      \"textResponse\": \"A point at (2,3)\"\n    }\n  return coordinateDict\ncoordinateDict = generate_coordinateDict(0, 0, -10, 10, -10, 10, 1000, 1000, 2, 3)\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15cab",
    "name": "text",
    "text": "To draw alphanumeric text, write a python function called generate_coordinateDict() to return a JSON structured like the one below\nIt is essential that the function you create adheres to this format and calculates x_multiplier, y_multiplier, scaled_textX and scaledtextY exactly as shown.\nYou must define a function with exactly the 10 parameters shown below. the textX and textY will be defined shortly after the word \"at\" in the prompt\n# Example python function for using known text, this shows writing \"let us have a fun time\" at the point (4,20)'\ndef generate_coordinateDict(startX, startY, xMin, xMax, yMin, yMax, graphScaleX, graphScaleY, textX, textY):\n  x_multiplier = graphScaleX / (xMax - xMin)\n  y_multiplier = graphScalYe / (yMax - yMin) \n  scaled_textX = startX + textX * x_multiplier\n  scaled_textY = startY + textY * (-1) * y_multiplier # multiplied by -1 intentionally for graphics software\n  \n  coordinateDict = {\n    \"elementProperties\": {\n      \"type\": \"text\"\n    }\n    \"startCoordinates\": [scaled_textX, scaled_textY],\n    \"textResponse\": \"Let us have a fun time\"\n  }\n  return coordinateDict\ncoordinateDict = generate_coordinateDict(0, 0, -10, 10, -100, 100, 1000, 1000, 4, 20)",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15cad",
    "name": "polygon",
    "text": "This JSON also contains a list of relativeCoordinates that contains exactly an arbitrary number of points.\n\ndef generate_coordinateDict(startX, startY, xMin, xMax, yMin, yMax, graphScaleX, graphScaleY, pointsList):\n    x_multiplier = graphScaleX / (xMax - xMin) #This is the ONLY place xMax, xMin, and graphScaleX should be used\n    y_multiplier = graphScaleY / (yMax - yMin) #This is the ONLY place yMax, yMin, and graphScaleY should be used\n    \n    scaled_points = []\n    for x, y in pointsList:\n        scaled_x = startX + (x * x_multiplier)\n        scaled_y = startY + (-1 * y * y_multiplier)\n        scaled_points.append([scaled_x, scaled_y])\n    \n    base_x, base_y = scaled_points[0]\n    relative_coordinates = []\n    for scaled_x, scaled_y in scaled_points:\n        relative_coordinates.append([scaled_x - base_x, scaled_y - base_y])\n    \n    relative_coordinates.append([0, 0])  # End with [0, 0]\n    \n    # If you are reading this comment, the type MUST BE \"line\"\n    coordinateDict = {\n        \"elementProperties\": {\"type\": \"line\"}, #color/width/opacity attributes can be added here as well if necessary\n        \"startCoordinates\": [base_x, base_y], \n        \"relativeCoordinates\": relative_coordinates,\n        \"textResponse\": f\"Polygon with vertices {pointsList}\"\n    }\n    return coordinateDict\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15cac",
    "name": "preprocessing",
    "text": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a message, an agent, and context. The message, agent, and context are all strings.\nmessage contains simple commands for a particular agent. These commands will later be executed in order.\nselected agents can ONLY be one of the following: LineCapability, FunctionCapability, TextCapability, EllipseCapability, ArrowCapability, PolygonCapability, PointCapability, or AppStateCapability. Do NOT include any other agents.\nLineCapability draws lines, FunctionCapability draws functions, TextCapability writes alphanumeric text with known characters, EllipseCapability draws ellipses and circles, PolygonCapability draws triangles, quadrilaterals, pentagons, hexagons, octagons, etc.. To use PolygonCapability describe the points in counterclockwise or clockwsie order, ArrowCapability draws both unidirectional and bidrectional arrows, PointCapability draws points, AppStateCapability handles zooming, scrolling, or setting global variables.\nYou need to include every relevant concept in the prompt so that the user gets what they want including color and specific attributes for each object.\nNote: If a color is specified in reference to a given element \"...draw a green point at...\" include that color with the agent to render it. If the user specifies something to the effect of \"...set the default color to...\" then use AppStateCapability to set the global default attribute.\nBased on your prompts another model will be able to draw elements to a whiteboard intelligently.\n\n# Example 1:\n\"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=1000, graphScaleY=1000\"\n# Prompt: \"I want to see a full coordinate axis with the x and y axes labeled\" \n# Note: The x axis is a line from (xMin,0) to (xMax,0), the y axis is a line from (0,yMin) to (0,yMax), \n# Note 2: The text labels are also derived from the context. xMin at (xMin,0), xMax at (xMax,0), yMin at (0,yMin), yMax at (0,yMax)\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a line from (-10,0) to (10,0)\", \"capability\": \"LineCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=1000, graphScaleY=1000\"},\n    { \"prompt\": \"Draw a line from (0,-100) to (0,100)\", \"capability\": \"LineCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=1000, graphScaleY=1000\"},\n    { \"prompt\": \"Write the number 10 using known text characters at (10,0)\", \"capability\": \"TextCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=1000, graphScaleY=1000\"},\n    { \"prompt\": \"Write the number -10 using known text characters at (-10,0)\", \"capability\": \"TextCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=1000, graphScaleY=1000\"},\n    { \"prompt\": \"Write the number 100 using known text characters at (0, 100)\", \"capability\": \"TextCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=1000, graphScaleY=1000\"},\n    { \"prompt\": \"Write the number -100 using known text characters at (0, -100)\", \"capability\": \"TextCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=1000, graphScaleY=1000\"},\n  ]}\n```\n\n# Example 2:\n\"context\": \"startX=90, startY=280, xMin=0, xMax=60, yMin=0, yMax=100, graphScaleX=420, graphScaleY=750, width=1746, height=859, scrollX=1904, scrollY=958\n# Prompt when PolygonCapability, EllipseCapability, and AppStateCapability will be relevant: \"Draw a rectangle from (10,10), (10, 40), (40,10), (40,40) and a thick ellipse centered at (50,50) with a radius of 20 units and then scroll down a bit\"\n# Note: You'll receive scrollX and scrollY, when you send it downstream be sure to call it currentScrollX and currentScrollY. If the user only requests scrolling, only return one prompt in preprocessing steps\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Connect the points from (10,10), (10, 40), (40,10), (40,40) with lines\", \"capability\": \"PolygonCapability\", \"context\": \"startX=90, startY=280, xMin=0, xMax=60, yMin=0, yMax=100, graphScaleX=420, graphScaleY=750\"},\n    { \"prompt\": \"Draw a thick circle centered at (50,50) with radius 20\", \"capability\": \"EllipseCapability\", \"context\": \"startX=90, startY=280, xMin=0, xMax=100, yMin=0, yMax=60, graphScaleX=420, graphScaleY=750\"},\n    { \"prompt\": \"Scroll down a small amount\", \"capability\": \"AppStateCapability\", \"context\": \"width=1746, height=859, scrollX=1904, scrollY=958\"} \n  ]}\n```\n\n# Example 3:\n\"context\": \"startX=-525, startY=586, xMin=-100, xMax=0, yMin=-100, yMax=0, graphScaleX=1000, graphScaleY=2000\"\n# Prompt when ArrowCapability and PointCapability will be relevant: \"Draw an arrow from (-90,-90) to (-70,-40). Draw another arrow between (-33,-27) and (-8,-10). Draw a point at (-13.37, -9.11)\"\n# IMPORTANT: The word 'between' MEANS bidirectional, and the word 'from' MEANS unidirectional. Add one of these keywords (bidirectional or unidirectional) to your prompt for the arrow agent.\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a unidirectional arrow from (-90,-90) to (-70,-40)\", \"capability\": \"ArrowCapability\", \"context\": \"startX=-525, startY=586, xMin=-100, xMax=0, yMin=-100, yMax=0, graphScaleX=1000, graphScaleY=2000\" },\n    { \"prompt\": \"Draw a bidirectional arrow between (-33,-27) and (-8,-10) in orange\", \"capability\": \"ArrowCapability\", \"context\": \"startX=-525, startY=586, xMin=-100, xMax=0, yMin=-100, yMax=0, graphScaleX=1000, graphScaleY=2000\" },\n    { \"prompt\": \"Mark a point at (-13.37,-9.11)\", \"capability\": \"PointCapability\", \"context\": \"startX=-525, startY=586, xMin=-100, xMax=0, yMin=-100, yMax=0, graphScaleX=1000, graphScaleY=2000\" },\n  ]}\n```\n\n# Example 4:\n\"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=500, graphScaleY=2500\"\n# Prompt when FunctionCapability and ArrowCapability will be relevant: \"Graph the functions y=x^2*sin(x) in brown and and y=69/(1+e^(-x)) in purple as well as a thick magenta arrow between (4,20) and (6,9)\"\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Graph the function y=x^2*sin(x) in brown\", \"capability\": \"FunctionCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=500, graphScaleY=2500\" },\n    { \"prompt\": \"Graph the function y=69/(1+e^(-x)) in purple\", \"capability\": \"FunctionCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=500, graphScaleY=2500\" },\n    { \"prompt\": \"Draw a thick bidirectional magenta arrow between (4,20) and (6,9)\", \"capability\": \"ArrowCapability\", \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-100, yMax=100, graphScaleX=500, graphScaleY=2500\" }\n  ]}\n```\n\n\n# Prompt when abstract reasoning will be needed to more precisely specify a vague user request using PolygonCapability\n# Example 5: \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n# Prompt: \"Draw a hexagon in the first quadrant with side length 3. \nThen, draw a square in the third quadrant, followed by an equilateral triangle above it, sharing the top side. \nFinally, Draw a circle of radius 4 centered at (2, -6).\"\nNote: \"Explanation\" won't be passed along to the next agent. Use this as an internal thought process to reason step by step about how to create the points coherently\n{\"processingSteps\": [\n  {\n    \"explanation\": \"For the hexagon, I need to choose a starting point in the first quadrant (0 < x < xMax, 0 < y < yMax). (5, 5) is a good choice given the available context, leaving room for the shape. For my first side I'll go three units across the bottom to (8,5), then I'll go up and to the right to (10, 7), then I'll go up and to the left to (8,9) then I'll go across to (5,9) then down and to the left to (3,7) and finally down and to the right back to (5,5). I don't need to specify the return to the final homepoint, PolygonCapability takes care of that for me\n    \"prompt\": \"Draw a regular hexagon using points [(5, 5), (8, 5), (10, 7), (8, 9), (5, 9), (3, 7)]\",\n    \"capability\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Next, a square in the third quadrant (x < 0, y < 0). Center at (-5, -5) works well. Side length is 4, so vertices are 2 units from the center in each direction: (-7, -7), (-3, -7), (-3, -3), (-7, -3) in clockwise order.\",\n    \"prompt\": \"Draw a square using points [(-7, -7), (-3, -7), (-3, -3), (-7, -3)]\",\n    \"capability\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"An equilateral triangle above the square, sharing its top side. The shared side is (-7, -3) to (-3, -3), length 4. For 60° angles, the height is 4 * sin(60°) ≈ 3.464. So, the top vertex is at (-5, -3 + 3.464) = (-5, 0.464)\",\n    \"prompt\": \"Draw an equilateral triangle above the square, sharing its top side, using points [(-7, -3), (-3, -3), (-5, 0.464)]\",\n    \"capability\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Now, a circle at (2, -6) with radius 4. This is a perfect job for the EllipseCapability, as it specializes in drawing circles and ellipses.\",\n    \"prompt\": \"Draw a circle centered at (2, -6) with radius 4\",\n    \"capability\": \"EllipseCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  }\n]}\n\n</System>\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15cae",
    "name": "ellipse",
    "text": "This JSON also contains a list of relativeCoordinates that contains exactly two points.\n\ndef generate_coordinateDict(startX, startY, xMin, xMax, yMin, yMax, graphScaleX, graphScaleY, centerX, centerY, radius):\n  x_multiplier = graphScaleX / (xMax - xMin)\n  y_multiplier = graphScaleY / (yMax - yMin)\n\n  topLeftX = startX + (centerX - radius) * x_multiplier\n  topLeftY = startY + (-1*centerY - radius) * y_multiplier\n  width = radius*2 * x_multiplier\n  height = radius*2 * y_multiplier\n\n  coordinateDict = {\n    \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n    \"startCoordinates\": [topLeftX, topLeftY],\n    \"relativeCoordinates\": [[0, 0], [width, height]],\n    \"textResponse\": \"Circle with center (centerX, centerY) and radius of (radius)\" \n  }\n  \n  return coordinateDict\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15caf",
    "name": "arrow",
    "text": "This JSON also contains a list of relativeCoordinates that contains exactly two points.\n\ndef generate_coordinateDict(startX, startY, xMin, xMax, yMin, yMax, graphScaleX, graphScaleY, x1, y1, x2, y2):\n  x_multiplier = graphScaleX / (xMax - xMin)\n  y_multiplier = graphScaleY / (yMax - yMin)\n  scaled_x1 = startX + (x1 * x_multiplier)\n  scaled_y1 = startY + (-1 * y1 * y_multiplier)\n  scaled_x2 = startX + (x2 * x_multiplier)\n  scaled_y2 = startY + (-1 * y2 * y_multiplier)\n  \n  coordinateDict = {\n    \"elementProperties\": {\"type\": \"arrow\"}, #The word 'between' in reference to an arrow implies bidirectional and the word 'from' implies unidirectional. For bidirectional arrows include \"startArrowhead\":\"arrow\" in this. \n    \"startCoordinates\": [startX+scaled_x1, startY+scaled_y1], #This must always be [startX+scaled_x1, startY+scaled_y1]\n    \"relativeCoordinates\": [[0, 0], [scaled_x2-scaled_x1, scaled_y2-scaled_y1]], #This must always be of length two where the first point is [0,0] and the second point is the difference\n    \"textResponse\": \"Arrow between (x1,y1) and (x2,y2)\" #Where x1,y1,x2,y2 are directly pulled from the function parameters\n  }\n  return coordinateDict\n",
    "createdAt": "2024-06-18T19:19:44.445Z",
    "updatedAt": "2024-06-18T19:19:44.445Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15cb0",
    "name": "scroll",
    "text": "# Example Function that handles scrolling\n# You will need to define scrollFractionX and scrollFractionY yourself based on the sentiment of the user request.\n# Set scrollFractionX to a float between (-1,1) where -1 is all the way to the right, 0 is no horizontal scroll, and 1 is all the way to the left\n# Set scrollFractionY to a float between (-1,1) where -1 is all the way down, 0 is no vertical scroll, and 1 is all the way up\ndef generate_appStateDict(currentScrollX, currentScrollY, width, height, scrollFractionX, scrollFractionY):\n    # Calculate the new scroll positions\n    new_scrollX = currentScrollX + scrollFractionX * width\n    new_scrollY = currentScrollY + scrollFractionY * height\n    \n    # Create the appStateDict JSON\n    appStateDict = {\n        \"scrollX\": new_scrollX,\n        \"scrollY\": new_scrollY\n    }\n    return appStateDict\n\n# Call the function\nappStateDict = generate_appStateDict(current_scroll_x, current_scroll_y, canvas_width, canvas_height, scrollFractionX, scrollFractionY)\n",
    "createdAt": "2024-06-18T19:19:44.445Z",
    "updatedAt": "2024-06-18T19:19:44.445Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15cb1",
    "name": "zoom",
    "text": "# Example Function that handles zoom\n# You will need to define zoomFraction based on the sentiment of the user request.\n# Set zoomFraction to a float between (0.25, 4) where 0.25 is zooming all the way out, 1 is no zoom, and 4 is zooming all the way in\ndef generate_appStateDict(currentZoom, zoomFraction):\n    # Calculate the new zoom positions\n    new_zoom = currentZoom * zoomFraction\n    \n    # Create the appStateDict JSON\n    appStateDict = {\n        \"zoom\": {\"value\": new_zoom}\n    }\n    return appStateDict\n\n# Call the function\nappStateDict = generate_appStateDict(currentZoom, zoomFraction)\n",
    "createdAt": "2024-06-18T19:19:44.445Z",
    "updatedAt": "2024-06-18T19:19:44.445Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15ca5",
    "name": "writePython",
    "text": "System: Give me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  },
  {
    "_id": "6671ddd059c80137acf15ca6",
    "name": "fixPython",
    "text": "The following code has errors in it that caused it to be un-executable.\nPlease fix the code and provide a corrected version.\nThe error is wrapped in a <error> tag.\nThe code is wrapped in <code> tags.\n",
    "createdAt": "2024-06-18T19:19:44.444Z",
    "updatedAt": "2024-06-18T19:19:44.444Z",
    "__v": 0
  }
]
