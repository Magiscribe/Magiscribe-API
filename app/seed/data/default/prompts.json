[
  {
    "_id": "6670ab02f446b4f1a67b32f7",
    "name": "fixPython",
    "text": "The following code has errors in it that caused it to be un-executable.\nPlease fix the code and provide a corrected version.\nThe error is wrapped in a <error> tag.\nThe code is wrapped in <code> tags.\n",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-06-17T21:30:42.453Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f5",
    "name": "appState",
    "text": "The code shall define a function called generate_appStateDict() that creates a variable called appStateDict sets it equal to a JSON and returns it.\nThe code should also call the function with the provided parameters and set the returned value equal to appStateDict. \nThis will be the only variable because the written function can only be called once. \nDo NOT print(appStateDict), do NOT JSON.dumps(appStateDict), the very last line of code should always be: \n  appStateDict = generate_appStateDict() #Possibly with parameters\nThe appStateDict JSON that gets returned should only contain the necessary properties to satisfy the user request\n",
    "createdAt": "2024-06-17T21:30:42.452Z",
    "updatedAt": "2024-07-04T04:17:12.374Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f6",
    "name": "writePython",
    "text": "Give me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy and json. \nIf you import this library, you have to import the entire library, not just specific functions.",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-20T02:39:52.541Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fb",
    "name": "point",
    "text": "# Example python code function that draws a point at (x1,y1) with xMin,xMax,yMin,yMax\n# Example python code that draws a point\ndef generate_result(pointX, pointY):\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor as needed\n\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points\n         }\n        \"description\": f\"A point at ({pointX},{pointY})\"\n    }]\n    return result\n\nresult = generate_result(pointX, pointY)\n\n<Example1 #Draw a thin point at (0, 0) with xMin=-1, xMax=10, yMin=-5, yMax=1\ndef generate_result():\n    pointX, pointY = 0, 0\n    xMin, xMax, yMin, yMax = -1, 10, -5, 1\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.0005  # Adjust the factor for a thin point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points,\n                 \"strokeWidth\": 0.5\n         }\n        \"description\": f\"A thin point at ({pointX},{pointY})\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a point at (-3.2, 7.1) with opacity 30, stroke width 1.8, xMin=-10, xMax=0, yMin=2, yMax=15>\ndef generate_result():\n    pointX, pointY = -3.2, 7.1\n    xMin, xMax, yMin, yMax = -10, 0, 2, 15\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor for a regular point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points,\n                 \"opacity\": 30,\n                 \"strokeWidth\": 1.8\n         }\n        \"description\": f\"A point at ({pointX},{pointY}) with opacity 30 and stroke width 1.8\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw thick points at (5, -2) and (8, -3) in blue and red respectively, xMin=1, xMax=20, yMin=-8, yMax=0>\ndef generate_result():\n    pointX1, pointY1 = 5, -2\n    pointX2, pointY2 = 8, -3\n    xMin, xMax, yMin, yMax = 1, 20, -8, 0\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.002  # Adjust the factor for a thick point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX1,\n                  \"y\": pointY1,\n                 \"points\": points,\n                 \"strokeWidth\": 2.5,\n                 \"strokeColor\": \"#0000FF\"\n         }\n        \"description\": f\"A thick blue point at ({pointX},{pointY})\"\n    },\n   {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX2,\n                  \"y\": pointY2,\n                 \"points\": points,\n                 \"strokeWidth\": 2.5,\n                 \"strokeColor\": \"#FF0000\"\n         }\n        \"description\": f\"A thick red point at ({pointX},{pointY})\"\n    },\n]\n    return result\nresult = generate_result()\n</Example3>\n<Example 4 #Draw a point at (-1.5, -3.7) with opacity 80, stroke width 2.2, stroke color #FF00FF, xMin=-5, xMax=5, yMin=-10, yMax=-1>\ndef generate_result():\n    pointX, pointY = -1.5, -3.7\n    xMin, xMax, yMin, yMax = -5, 5, -10, -1\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor for a regular point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points, \n                 \"opacity\": 80,\n                 \"strokeWidth\": 2.2,\n                 \"strokeColor\": \"#FF00FF\"\n         }\n        \"description\": f\"A point at ({pointX},{pointY}) with opacity 80, stroke width 2.2, and stroke color #FF00FF\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example 5 #Draw thin points at (8, 0.5), (-0.75, 3), (12,-5) xMin=2, xMax=12, yMin=-1, yMax=2>\ndef generate_result():\n    pointX1, pointY1 = 8, 0.5\n    pointX2, pointY2 = -0.75, 3\n    pointX3, pointY3 = 12, -5\n    xMin, xMax, yMin, yMax = 2, 12, -1, 2\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.0005  # Adjust the factor for a thin point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [\n     {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX1,\n                  \"y\": pointY1,\n                 \"points\": points,\n                 \"strokeWidth\": 0.3\n         }\n        \"description\": f\"A thin point at ({pointX1},{pointY1})\"\n    },\n    {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX2,\n                  \"y\": pointY2,\n                 \"points\": points,\n                 \"strokeWidth\": 0.3\n         }\n        \"description\": f\"A thin point at ({pointX2},{pointY2})\"\n    },\n    {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX3,\n                  \"y\": pointY3,\n                 \"points\": points,\n                 \"strokeWidth\": 0.3\n         }\n        \"description\": f\"A thin point at ({pointX},{pointY})\"\n    }\n]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-05T21:07:11.024Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fa",
    "name": "line",
    "text": "Each JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(x1, y1, x2, y2):\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\n\nresult = generate_result(x1,y1, x2, y2) #You should fill in actual numbers\n\n<Example1 #Draw a line from (0, 0) to (5, 5) and (2,6) to (7,11)\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 5, 5\n    x3, y3, x4, y4 = 2, 6, 7, 11\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"line\", \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x4-x3, y4-y3]]},\n        \"description\": f\"Line from ({x3},{y3}) to ({x4},{y4})\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw an almost invisible line from (-2, 3) to (4, -1)>\ndef generate_result():\n    x1, y1, x2, y2 = -2, 3, 4, -1\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"opacity\":20, \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2}) with opacity 20\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw a thick cyan line from (1.5, -2.7) to (-3.2, 4.1)>\ndef generate_result():\n    x1, y1, x2, y2 = 1.5, -2.7, -3.2, 4.1\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#00FFFF\", \"strokeWidth\": 3, \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"A thick cyan line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw a thin yellow line from (-1, -1) to (1, 1)>\ndef generate_result():\n    x1, y1, x2, y2 = -1, -1, 1, 1\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", , \"strokeColor\": \"#9b870c\", \"strokeWidth\": 0.75, \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Thin yellow line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw a line from (2.5, 0) to (2.5, 6)>\ndef generate_result():\n    x1, y1, x2, y2 = 2.5, 0, 2.5, 6\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-06T02:14:58.706Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fc",
    "name": "text",
    "text": "To draw alphanumeric text, write a python function called generate_result() to return a JSON structured like the one below\nIt is essential that the function you create adheres to this format.\nYou must define a function with exactly the 2 parameters shown below. the textX and textY will be defined shortly after the word \"at\" in the prompt\n\n<Example1 #Write \"Hello, World!\" at the point (0, 0) with default properties and the text \"Welcome to the Party\" directly below it>\ndef generate_result():\n    textX1, textY1 = 0, 0\n    textX2, textY2 = 0, -2\n    result = [{\"elementProperties\": {\"type\": \"text\", \"x\": textX, \"y\": textY, \"text\": \"Hello World!\"},\n        \"description\": f\"The text 'Hello, World!' with the top-left of it at ({textX1}, {textY1}): '\"\n    },\n    {\"elementProperties\": {\"type\": \"text\", \"x\": textX, \"y\": textY, \"text\": \"Welcome to the Party\"},\n        \"description\": f\"The text 'Welcome to the Party' with the top-left of it at ({textX2}, {textY2}): '\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Write \"Python is awesome!\" at the point (2.5, -3.7) in dark blue with fontSize 24 and fontFamily 3>\ndef generate_result():\n    textX, textY = 2.5, -3.7\n    result = [{\n        \"elementProperties\": {\"type\": \"text\", \"fontSize\": 24, \"fontFamily\": 3, \"strokeColor\": \"00008B\", \"x\": textX, \"y\": textY, \"text\": \"Python is awesome\"}},\n        \"description\": f\"Text 'Python is awesome!' with the top left of the starting P at ({textX}, {textY}) in dark blue in size 24 pt font\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Write \"Excalidraw really should have SVG supported\"  in two lines at the point (-1, 4) with textAlign \"center\" and verticalAlign \"middle\"\ndef generate_result():\n    textX, textY = -1, 4\n    result = [{\n        \"elementProperties\": {\"type\": \"text\",\"textAlign\": \"center\", \"verticalAlign\": \"middle\", \"x\": textX, \"y\": textY, \"text\": \"Excalidraw really should \\n have SVG supported\"\"},\n        \"description\": f\"Text saying 'Excalidraw really should \\n have SVG supported' starting with the top left of the initial E at ({textX}, {textY}) text aligned to the middle and vertically aligned to the middle\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Transparently write \"AI-generated content conquers the internet\" at the point (3, -2) with fontSize 18, fontFamily 2, and lineHeight 1.5>\ndef generate_result():\n    textX, textY = 3, -2\n    result = [{\n        \"elementProperties\": {\"type\": \"text\", \"fontSize\": 18, \"fontFamily\": 2, \"lineHeight\": 1.5, opacity: 69, \"x\": textX, \"y\": textY, \"text\": \"AI-generated content conquers the internet\"},\n        \"description\": f\"The text 'AI-generated text' starting at with the top left of the initial A at ({textX}, {textY}) somewhat transparently with fontSize 18, one and a half spaced, font family 2'\"\n    }]\n    return result\nresult = generate_result()\n</Example>\n<Example5 #Write the number 10 at the point (0, 10) with fontSize 12, textAlign \"right\", and verticalAlign \"bottom\">\ndef generate_result():\n    textX, textY = 0, 10\n    result = [{\n        \"elementProperties\": {\n            \"type\": \"text\",\n            \"fontSize\": 12,\n            \"textAlign\": \"right\",\n            \"verticalAlign\": \"bottom\", \"x\": textX, \"y\": textY, \"text\": \"10\"}\n        },\n        \"description\": f\"Text of '10' with the top left of the 1 starting at ({textX}, {textY}) in fontSize 12, right aligned, bottom vertically aligned\"\n    }]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-05T20:55:59.283Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fe",
    "name": "polygon",
    "text": "This JSON also contains a list of points that contains an arbitrary number of points.\n<Important>\"type\":\"line\" must be the type to return properly. This is because we are constructing shapes by connecting lines</Important>\n<Example1 #Draw two red triangles on top of each other>\ndef generate_result():\n    # Triangle 1\n    pointsList1 = [(0, 0), (2, 3), (4, 1)]\n    base_x1, base_y1 = pointsList1[0]\n    points1 = []\n    for x, y in pointsList1:\n        points1.append([x - base_x1, y - base_y1])\n    points1.append([0, 0])  # End with [0, 0]\n    #Triangle 2\n    pointsList2 = [(0, 4), (2, 7), (4, 5)] \n    base_x2, base_y2 = pointsList2[0]\n    points2 = []\n    for x, y in pointsList2:\n        points2.append([x - base_x2, y - base_y2])\n    points2.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FF0000\", \"backgroundColor\": \"#FF0000\", \"fillStyle\": \"solid\", \"x\": base_x1, \"y\": base_y1, \"points\": points1},\n        \"description\": f\"Red triangle with vertices {pointsList1}\"\n    },\n   {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FF0000\", \"backgroundColor\": \"#FF0000\", \"fillStyle\": \"solid\", \"x\": base_x2, \"y\": base_y2, \"points\": points2},\n        \"description\": f\"Red triangle with vertices {pointsList2}\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a slightly transparent octagon outline with 8 points at (0, 0), (0, 2), (2, 4), (4, 4), (6, 2), (6, 0), (4, -2), (2, -2)>\ndef generate_result():\n    pointsList = [(0, 0), (0, 2), (2, 4), (4, 4), (6, 2), (6, 0), (4, -2), (2, -2)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    points.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"opacity\": 70, \"x\": base_x, \"y\": base_y, \"points\": points},\n        \"description\": f\"Transparent Octagon with vertices {pointsList}\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 Draw a thick blue square down and to the left of a circle centered at (7,7) with a radius of 2> \ndef generate_result():\n    #To ensure that my square is below and to the left of that circle I will make sure my top right point is more than radius units down and to the left of (7,7)\n    pointsList = [(0, 0), (0, 5), (5, 5), (5, 0)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    points.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#0000FF\", \"strokeWidth\": 4, \"backgroundColor\": \"#0080FF\", \"fillStyle\": \"solid\", \"x\": base_x, \"y\": base_y, \"points\": points},\n        \"description\": f\"Thick blue square with vertices {pointsList}\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw an Orange Hexagon with 6 points and a green pentagon to the right of it>\ndef generate_result():\n    #Orange Hexagon\n    pointsList1 = [(-3, -3), (-1, -1), (1, -1), (3, -3), (3, -5), (1, -7)]\n    base_x1, base_y1 = pointsList1[0]\n    points1 = []\n    for x, y in pointsList1:\n        points1.append([x - base_x1, y - base_y1])\n    points1.append([0, 0])  # End with [0, 0]\n    #Blue pentagon\n    pointsList2 = [(-3, -3), (-1, -1), (1, -1), (3, -3), (3, -5), (1, -7)]\n    base_x2, base_y2 = pointsList2[0]\n    points2 = []\n    for x, y in pointsList2:\n        points.append([x - base_x2, y - base_y2])\n    points2.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FFA500\", \"backgroundColor\": \"#ffb732\", \"fillStyle\": \"solid\", \"strokeWidth\": 1.2, \"x\": base_x1, \"y\": base_y1, \"points\": points1},\n        \"description\": f\"Orange Hexagon with vertices {pointsList}\"\n    },\n   {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#023020\", \"backgroundColor\": \"#006400\", \"fillStyle\": \"solid\", \"strokeWidth\": 1.2, \"x\": base_x2, \"y\": base_y2, \"points\": points2},\n        \"description\": f\"Green pentagon with vertices {pointsList}\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-08T03:37:10.011Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32ff",
    "name": "ellipse",
    "text": "Each JSON also contains a list of points that contains exactly two points.\n\n<Example1 #Draw a circle with center at (0, 0) and radius 2 that's transparent and a circle with center (4,7) and a radius of 3 that's filled in with light blue>\ndef generate_result():\n    # Circle 1\n    centerX1, centerY1, radius1 = 0, 0, 2\n    topLeftX1 = centerX1 - radius1\n    topLeftY1 = centerY1 + radius1\n    width1 = radius1 * 2\n    height1 = radius1 * 2\n    # Circle 2\n    centerX2, centerY2, radius2 = 4, 7, 3\n    topLeftX2 = centerX2 - radius2\n    topLeftY2 = centerY2 + radius2\n    width2 = radius1 * 2\n    height2 = radius1 * 2\n\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"x\": topLeftX1, \"y\": topLeftY1,\"width\": width1, \"height\": height1},\n        \"description\": \"Circle with center (0, 0) and radius of 2\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"backgroundColor\": \"#ADD8E6\", \"x\": topLeftX2, \"y\": topLeftY2,\"width\": width2, \"height\": height2},\n        \"description\": \"Circle with center (4, 7) and radius of 3\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a thick black vertical ellipse with center at (3.5, -1.2) and major radius of 1.8>\ndef generate_result():\n    centerX, centerY, radius = 3.5, -1.2, 1.8\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 1.5\n    height = radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"strokeColor\": \"#000000\", \"strokeWidth\": 2.5, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Thick black vertical ellipse with center (3.5, -1.2) and major vertical radius of 1.8 and horizontal radius of 1.35 \"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw a thin lime-green circle with center at (-2, 4) and radius 3>\ndef generate_result():\n    centerX, centerY, radius = -2, 4, 3\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"strokeColor\": \"#32CD32\", \"strokeWidth\": 0.5, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Thin lime-green circle with center (-2, 4) and radius of 3\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw a wide ellipse that's with centered at (1, -3), rotated to be on the line y=x-4>\ndef generate_result():\n    centerX, centerY, radius = 1, -3, 0.5\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 4 #Multiply by twice as much as height since its wide\n    height = radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"strokeColor\": \"#000000\", \"angle\": 3.14159/4, \"strokeWidth\": 1, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Ellipse with center (1, -3) and a major horizontal radius of 1 and a minor vertical radius of 0.5\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw a circle under the triangle with vertices [(2, 2), (5, 2), (3.5, 5)]>\ndef generate_result():\n   #I will center my x coordinate with the triangle, but make my y coordinate -2 and my radius 3 to ensure the top of the circle stays below the triangle\n    centerX, centerY, radius = 3.5, -2, 3\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1*radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Circle with center (-1.5, 2.7) and radius of 2.5\"\n    }]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-11T22:47:47.556Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b3300",
    "name": "arrow",
    "text": "Each JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(x1, y1, x2, y2):\n  result = [{\n        \"elementProperties\": {\"type\": \"arrow\", #The type must always be arrow\n        \"startArrowhead\":\"arrow\" #For bidirectional arrows include this, for unidirectional arrows do not\n        \"x\": x1,\n        \"y\": y1,\n        \"points\": [[0, 0], [x2-x1, y2-y1]] #This must always be of length two where the first point is [0,0] and the second point is the difference\n    }\n    \"description\": f\"Arrow between ({x1},{y1}) and ({x2},{y2})\" #Where x1,y1,x2,y2 are directly pulled from the function parameters\n  }]\n  return result\n\n<Example1 #Draw an arrow between (0, 0) and (2, 3) and an arrow from (5,8) to (13,21)>\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 2, 3\n    x3, y3, x4, y4 = 5, 8, 13, 21\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"startArrowhead\": \"arrow\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Arrow between (0,0) and (2,3)\"\n    },\n   {\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"x\":x3, \"y\":y3, \"points\":[[0, 0], [x4-x3, y4-y3]]},\n        \"description\": \"Arrow from (5,8) to (13,21)\"\n    }\n]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw an orange arrow from (-1.5, 2) to (3.7, -4.2)>\ndef generate_result():\n    x1, y1, x2, y2 = -1.5, 2, 3.7, -4.2\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeColor\": \"FFA500\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Bidirectional orange arrow between (-1.5,2) and (3.7,-4.2)\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw a thick arrow between (5, 5) and (-3, -3)>\ndef generate_result():\n    x1, y1, x2, y2 = 5, 5, -3, -3\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeWidth\":3, , \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Arrow between (5,5) and (-3,-3)\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw a thin transparent purple arrow from (-2, 0) to (-2, 4) and (-2,0) to (5, 0)>\ndef generate_result():\n    x1, y1, x2, y2, x3, y3 = -2, 0, -2, 4, 5, 0 #We can re-use (-2,0) since its in both\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeWidth\": 0.8, \"opacity\": 50, \"strokeColor\": \"#800080\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"A thin transparent purple arrow from (-2,0) to (-2,4)\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeWidth\": 0.8, \"opacity\": 50, \"strokeColor\": \"#800080\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x3-x1, y3-y1]]},\n        \"description\": \"A thin transparent purple arrow from (-2,0) to (5,0)\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw an arrow between (1, -3) to (4, 1)>\ndef generate_result():\n    x1, y1, x2, y2 = 1, -3, 4, 1\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"startArrowhead\": \"arrow\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Bidirectional arrow between (1,-3) and (4,1)\"\n    }]\n    return result\nresult = generate_result()",
    "createdAt": "2024-06-17T21:30:42.454Z",
    "updatedAt": "2024-07-08T02:24:22.024Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b3301",
    "name": "scroll",
    "text": "# Example Function that handles scrolling\n# You will need to define scrollFractionX and scrollFractionY yourself based on the sentiment of the user request.\n# Set scrollFractionX to a float between (-1,1) where -1 is all the way to the right, 0 is no horizontal scroll, and 1 is all the way to the left\n# Set scrollFractionY to a float between (-1,1) where -1 is all the way down, 0 is no vertical scroll, and 1 is all the way up\ndef generate_appStateDict(currentScrollX, currentScrollY, width, height, scrollFractionX, scrollFractionY):\n    # Calculate the new scroll positions\n    new_scrollX = currentScrollX + scrollFractionX * width\n    new_scrollY = currentScrollY + scrollFractionY * height\n    \n    # Create the appStateDict JSON\n    appStateDict = {\n        \"scrollX\": new_scrollX,\n        \"scrollY\": new_scrollY\n    }\n    return appStateDict\n\n# Call the function\nappStateDict = generate_appStateDict(current_scroll_x, current_scroll_y, canvas_width, canvas_height, scrollFractionX, scrollFractionY)\n",
    "createdAt": "2024-06-17T21:30:42.454Z",
    "updatedAt": "2024-06-17T21:30:42.454Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b3302",
    "name": "zoom",
    "text": "# Example Function that handles zoom\n# You will need to define zoomFraction based on the sentiment of the user request.\n# Set zoomFraction to a float between (0.25, 4) where 0.25 is zooming all the way out, 1 is no zoom, and 4 is zooming all the way in\ndef generate_appStateDict(currentZoom, zoomFraction):\n    # Calculate the new zoom positions\n    new_zoom = currentZoom * zoomFraction\n    \n    # Create the appStateDict JSON\n    appStateDict = {\n        \"zoom\": {\"value\": new_zoom}\n    }\n    return appStateDict\n\n# Call the function\nappStateDict = generate_appStateDict(currentZoom, zoomFraction)\n",
    "createdAt": "2024-06-17T21:30:42.454Z",
    "updatedAt": "2024-06-30T02:48:15.627Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f8",
    "name": "drawing",
    "text": "The code shall define a function called generate_result() that creates a variable called result, sets it equal a list of JSONs and returns it. \nIts in a list even if there is only 1 JSON. Each JSON contains elementProperties which itself is a JSON, and description which is a string. Unless explicitly stated differences, keep properties the same across multiple objects\nThe code should also call the function and set it equal to a variable called result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nEach JSON also contains a description which acts as a salient representation of this object for user-agent conversation history\n\nExample result Structure:\n[{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types\n      \"backgroundColor\": string, #optional, 6 digit Hex code starting with a #, please include the correct hex code if the user specifies a color in their prompt to fill in a shape, should be slightly lighter than strokeColor if applicable\n     \"angle\": number, #optional, default of 0, indicates rotation in radians counterclockwise\n      \"fillStyle\": \"hachure\" | \"cross-hatch\" | \"solid\" | \"zigzag\", #optional, these are the ONLY allowed types, default to \"solid\" unless otherwise stated\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), set to 1 for \"freedraw\", be sure to include it\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include the correct hex code corresponding if the user specifies a color in their prompt. This is for outlines. Should be slightly darker than backgroundColor if applicable.\n      \"roughness\": 0 #required for ellipse\n      \"sloppiness\": 0 #required for line, arrow\n      \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n      \"text\": string, #required for text, what actually gets rendered to the screen.\n      \"x\": number\n      \"y\": number\n    },\n    \"description\": string, \"#required, should contain color, width in natural language if applicable, \"x\", \"y\" and more as necessary, add all relevant details\n  }]\n",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-11T22:36:21.653Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f9",
    "name": "functionTemplate",
    "text": "This JSON also contains a list of points structured like this [[x0,y0],[x1,y1],[xn,yn]] that can be arbitrarily long.\nTo draw a function the program should return a JSON with start coordinate [xMin, yMax] and calculated relative coordinates. They will be calculated by going form xMin to xMax and breaking it 420-690 evenly spaced points\n\n<Example1 #Draw the function y = cos(x) with xMin = -2π, xMax = 2π, yMin = -1, yMax = 1>\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -2*np.pi, 2*np.pi, -1, 1\n    x_values = np.linspace(xMin, xMax, 600)\n    y_values = np.cos(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = cos(x) from -2*pi to 2*pi\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw the function y = x^3 - 2x in brown and the function y=(x+2)^2 - 50 in purple with xMin = -4, xMax = 2, yMin = -100, yMax = 10> \nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -4, 2, -10, 10\n    x_values = np.linspace(xMin, xMax, 500)\n    y1_values = x_values**3 - 2*x_values\n    y2_values = (x_values+2)**2 - 50\n    points1 = [[x, y] for x, y in zip(x_values, y_values1) if not math.isnan(y)]\n    points2 = [[x, y] for x, y in zip(x_values, y_values2) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeColor\": \"#964B00\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points1},\n        \"description\": \"y = x^3 - 2x from x=-4 to x=2 in brown\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeColor\": \"#800080\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points2},\n        \"description\": \"y = (x+2)^2 - 50 in purple from x=-4 to x=2 in purple\"\n    }\n    ]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Thinly draw the function y = e^(-x^2) with xMin = -3, xMax = 3, yMin = 0, yMax = 1\">\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -3, 3, 0, 1\n    x_values = np.linspace(xMin, xMax, 450)\n    y_values = np.exp(-x_values**2)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\": 0.5, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = e^(-x^2) thinly drawn from x=-3 to x=3\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Slightly transparently draw the function y = ln(x) with xMin = 0.1, xMax = 5, yMin = -8, yMax = 2>\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = 0.1, 5, -2, 2\n    x_values = np.linspace(xMin, xMax, 550)\n    y_values = np.log(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"opacity\": 80, \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = ln(x) from xMin=0.1 to xMax=0.5 with opacity 80\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw the function y = tan(x) with xMin = -π/2 + 0.1, xMax = π/2 - 0.1, yMin = -5, yMax = 5>\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -np.pi/2 + 0.1, np.pi/2 - 0.1, -5, 5\n    x_values = np.linspace(xMin, xMax, 650)\n    y_values = np.tan(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = tan(x) from xMin = -π/2 + 0.1, xMax = π/2\"\n    }]\n    return result\nresult = generate_result()\n</Example5>\n<Example6 #Draw the function x=sqrt(y)>\nimport numpy as np\n\ndef generate_result():\n    yMin, yMax = 0, 10  # Domain of y\n    xMin, xMax = 0, np.sqrt(yMax)  # Range of x\n    \n    # Generate 600 evenly spaced points\n    num_points = 600\n    y_values = np.linspace(yMin, yMax, num_points)\n    x_values = np.sqrt(y_values)\n    \n    # Create list of points\n    points = [[float(x), float(y)] for x, y in zip(x_values, y_values) if not np.isnan(x)]\n    \n    # Create the result dictionary\n    result = [{\n        \"elementProperties\": {\n            \"type\": \"freedraw\",\n            \"strokeWidth\": 1,\n            \"x\": 0,\n            \"y\": 0,\n            \"points\": points\n        },\n        \"description\": \"x = √y from y=0 to y=10\"\n    }]\n    \n    return result\n\n# Generate and print the result\nresult = generate_result()\n</Example6>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-10T04:01:23.274Z",
    "__v": 0
  },
  {
    "_id": "667ae4576d5e4973f402e1ee",
    "name": "define",
    "text": "<System>\nYou are a definition and example assistant. Your primary functions are:\n- Provide clear, concise definitions for words, phrases, or concepts.\n- Offer relevant examples to illustrate each definition.\n- Clarify any ambiguities or multiple meanings when applicable.\n- Use simple language while maintaining accuracy.\n- Provide etymological information when relevant.\n- Offer additional context or usage notes if helpful.\n\nRespond to queries directly and efficiently. If a term has multiple meanings, list them separately. Always include at least one example for each definition. If further elaboration might be useful, offer to provide more information.\n</System>",
    "createdAt": "2024-06-25T15:37:59.150Z",
    "updatedAt": "2024-06-30T04:13:16.488Z",
    "__v": 0
  },
  {
    "_id": "667ae9a67ed1fd8cdf11ad0f",
    "name": "author",
    "text": "<System>\nYou are an expert author capable of writing on any topic with depth and authority. Your knowledge spans a vast range of fields including science, history, philosophy, the arts, and more. You can adapt your writing style to suit any genre or format, from academic papers to creative fiction.\nWhen given a writing prompt or topic:\n\nAnalyze the subject matter and target audience\nDraw upon your extensive knowledge to outline key points\nCraft compelling prose tailored to the specific request\nIncorporate relevant facts, theories, and examples to support your writing\nMaintain a confident yet approachable tone\n\nYou're comfortable handling any writing task, no matter how specialized or esoteric. If asked to write from a particular perspective or in a distinct voice, you can seamlessly adopt that persona.\nYour responses can range from concise paragraphs to lengthy treatises as appropriate. You're equally adept at creative storytelling, persuasive arguments, objective analysis, or technical explanations.\n</System>",
    "createdAt": "2024-06-25T16:00:38.499Z",
    "updatedAt": "2024-07-05T20:43:54.967Z",
    "__v": 0
  },
  {
    "_id": "667aef8dacf7000556d2ddb9",
    "name": "scrape",
    "text": "<System>\nYou are an expert Python programmer specializing in web scraping. Your task is to create Python functions that can extract data from web pages efficiently and reliably. When given a request, you should:\n\nGive me back ONLY python code. \n\nI need to be able to execute your response directly. \n\nAny step by step thought process should be commented out. \n\nPut your code in between three back ticks, the word python, and three more backticks. \n\nThe only allowed library is numpy and requests\n\nIf you import this library, you have to import the entire library, not just specific functions.\n\nAnalyze the scraping requirements\nWrite a clear and well-commented Python function\nInclude error handling and best practices\nProvide a brief explanation of how the function works\n\nYour code should be compatible with Python 3.8+. Always import necessary libraries at the beginning of your code.\nHere are some examples of functions you might create:\n\nA function to extract all links from a webpage\nA function to scrape product information from an e-commerce site\nA function to download all images from a gallery page\nA function to extract table data from a Wikipedia page\nA function to scrape news headlines from a news website\n\n# Example:\n```python\nimport requests\n\ndef get_urls_from_webpage(url):\n    # Send a GET request to the webpage\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for bad status codes\n    except requests.RequestException as e:\n        print(f\"Error fetching the webpage: {e}\")\n        return []\n\n    # Get the HTML content\n    html_content = response.text\n\n    # Use a regular expression to find all URLs\n    url_pattern = re.compile(r'href=[\\'\"]?([^\\'\" >]+)')\n    urls = url_pattern.findall(html_content)\n\n    # Process and clean up the URLs\n    cleaned_urls = []\n    for u in urls:\n        # Remove query parameters and fragments\n        u = u.split('?')[0].split('#')[0]\n        \n        # Add the base URL for relative paths\n        if u.startswith('/'):\n            u = url + u\n        elif not u.startswith(('http://', 'https://')):\n            u = url + '/' + u\n\n        cleaned_urls.append(u)\n\n    # Remove duplicates and return\n    return list(set(cleaned_urls))\n\nwebpage_url = \"https://kylelierer.com\"\nextracted_urls = get_urls_from_webpage(webpage_url)\n```\n</System>",
    "createdAt": "2024-06-25T16:25:49.201Z",
    "updatedAt": "2024-06-30T05:03:08.758Z",
    "__v": 0
  },
  {
    "_id": "667d9c1f69b67704281c4e2c",
    "name": "reasoning",
    "text": "Your goal is to generate a reasoning prompt for another AI Agent based on its capabilities. The reasoning prompt allows it to decipher between which of its capabilities to use in the scenarios that it will face. You will be tasked with only generating the Reasoning Prompt from the set of capabilities. Attempt to showcase the usage of every capability within the reasoning prompt. Multiple capability utilization is beneficial as well. \n\n<PointCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\n\n# Example python code function that draws a point at (x1,y1) with xMin,xMax,yMin,yMax\n# Example python code that draws a point\ndef generate_result(pointX, pointY):\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor as needed\n\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A point at ({pointX},{pointY})\"\n    }\n    return result\n\nresult = generate_result(pointX, pointY)\n\nimport numpy as np\n\nimport numpy as np\n\n# Example 1: Draw a thin point at (0, 0) with xMin=-1, xMax=10, yMin=-5, yMax=1\ndef generate_result():\n    pointX, pointY = 0, 0\n    xMin, xMax, yMin, yMax = -1, 10, -5, 1\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.0005  # Adjust the factor for a thin point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A thin point at ({pointX},{pointY})\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw a point at (-3.2, 7.1) with opacity 30, stroke width 1.8, xMin=-10, xMax=0, yMin=2, yMax=15\ndef generate_result():\n    pointX, pointY = -3.2, 7.1\n    xMin, xMax, yMin, yMax = -10, 0, 2, 15\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor for a regular point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\", \"opacity\": 30, \"strokeWidth\": 1.8},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A point at ({pointX},{pointY}) with opacity 30 and stroke width 1.8\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a thick point at (5, -2) with stroke color #0000FF, xMin=1, xMax=20, yMin=-8, yMax=0\ndef generate_result():\n    pointX, pointY = 5, -2\n    xMin, xMax, yMin, yMax = 1, 20, -8, 0\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.002  # Adjust the factor for a thick point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeColor\": \"#0000FF\"},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A thick point at ({pointX},{pointY}) with stroke color #0000FF\"\n    }\n    return result\nresult = generate_result()\n</PointCapability>\n\n<LineCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly two points.\n\nimport numpy as np\ndef generate_result(x1, y1, x2, y2):\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]], #This must always be of length two where the first point is [0,0] and the second point is the difference\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\n\nresult = generate_result(x1,y1, x2, y2) #You should fill in actual numbers\n\nimport numpy as np\n\n# Example 1: Draw a line from (0, 0) to (5, 5)\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 5, 5\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw a line from (-2, 3) to (4, -1)\ndef generate_result():\n    x1, y1, x2, y2 = -2, 3, 4, -1\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a line from (1.5, -2.7) to (-3.2, 4.1)\ndef generate_result():\n    x1, y1, x2, y2 = 1.5, -2.7, -3.2, 4.1\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\nresult = generate_result()\n</LineCapability>\n\n<PolygonCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly an arbitrary number of points.\n\ndef generate_result(pointsList):\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    # If you are reading this comment, the type MUST BE \"line\"\n    result = {\n        \"elementProperties\": {\"type\": \"line\"}, #color/width/opacity attributes can be added here as well if necessary\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Polygon with vertices {pointsList}\"\n    }\n    return result\n\nimport numpy as np\n\n# Example 1: Draw a line with 3 points\ndef generate_result():\n    pointsList = [(0, 0), (2, 3), (4, 1)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FF0000\", \"strokeWidth\": 1.5},\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Line with vertices {pointsList}\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw an octagon (8-point line)\ndef generate_result():\n    pointsList = [(0, 0), (0, 2), (2, 4), (4, 4), (6, 2), (6, 0), (4, -2), (2, -2)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"line\", \"opacity\": 70},\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Octagon with vertices {pointsList}\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a line with 6 points\ndef generate_result():\n    pointsList = [(-3, -3), (-1, -1), (1, -1), (3, -3), (3, -5), (1, -7)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FFA500\", \"strokeWidth\": 1.2},\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Line with vertices {pointsList}\"\n    }\n    return result\nresult = generate_result()\n</PolygonCapability>\n\n<FunctionCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points structured like this [[x0,y0],[x1,y1],[xn,yn]] that can be arbitrarily long.\nTo draw a function the program should return a JSON with start coordinate [xMin, yMax] and calculated relative coordinates. They will be calculated by going form xMin to xMax and breaking it 420-690 evenly spaced points\n\n# Example python code function that draws y=sin(x)*x^2 with xMin,xMax,yMin,yMax\nimport numpy as np\ndef generate_result(xMin, xMax, yMin, yMax):\n    x_values = np.linspace(xMin, xMax, 500)\n    y_values = np.sin(x_values) * x_values ** 2\n    \n    points = [[x, y] for x, y in zip(x_values , y_values )]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y=sin(x)*x^2\"\n    }\n    \n    return result\n\nresult = generate_result(xMin,xMax,yMin,yMax)\n\n\nimport numpy as np\nimport math\n\n# Example 1: Draw the function y = cos(x) with xMin = -2π, xMax = 2π, yMin = -1, yMax = 1\ndef generate_result():\n    xMin, xMax, yMin, yMax = -2*np.pi, 2*np.pi, -1, 1\n    x_values = np.linspace(xMin, xMax, 600)\n    y_values = np.cos(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y = cos(x)\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw the function y = x^3 - 2x with xMin = -3, xMax = 3, yMin = -10, yMax = 10\ndef generate_result():\n    xMin, xMax, yMin, yMax = -3, 3, -10, 10\n    x_values = np.linspace(xMin, xMax, 500)\n    y_values = x_values**3 - 2*x_values\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y = x^3 - 2x\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw the function y = e^(-x^2) with xMin = -3, xMax = 3, yMin = 0, yMax = 1\ndef generate_result():\n    xMin, xMax, yMin, yMax = -3, 3, 0, 1\n    x_values = np.linspace(xMin, xMax, 450)\n    y_values = np.exp(-x_values**2)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y = e^(-x^2)\"\n    }\n    return result\nresult = generate_result()\n</FunctionCapability>\n\n<ArrowCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(x1, y1, x2, y2):\n  result = {\n    \"elementProperties\": {\"type\": \"arrow\"}, #The word 'between' in reference to an arrow implies bidirectional and the word 'from' implies unidirectional. For bidirectional arrows include \"startArrowhead\":\"arrow\" in this. \n    \"startCoordinates\": [x1, y1],\n    \"points\": [[0, 0], [x2-x1, y2-y1]], #This must always be of length two where the first point is [0,0] and the second point is the difference\n    \"description\": \"Arrow between (x1,y1) and (x2,y2)\" #Where x1,y1,x2,y2 are directly pulled from the function parameters\n  }\n  return result\n\nimport numpy as np\n\n# Example 1: Draw an arrow between (0, 0) and (2, 3)\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 2, 3\n\n    result = {\n        \"elementProperties\": {\"type\": \"arrow\"},\n        \"startCoordinates\": [x1, y1],\n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": \"Arrow from (0,0) to (2,3)\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw an arrow from (-1.5, 2) to (3.7, -4.2)\ndef generate_result():\n    x1, y1, x2, y2 = -1.5, 2, 3.7, -4.2\n\n    result = {\n        \"elementProperties\": {\"type\": \"arrow\", \"startArrowhead\": \"arrow\"},\n        \"startCoordinates\": [x1, y1],\n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": \"Bidirectional arrow between (-1.5,2) and (3.7,-4.2)\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw an arrow between (5, 5) and (-3, -3)\ndef generate_result():\n    x1, y1, x2, y2 = 5, 5, -3, -3\n\n    result = {\n        \"elementProperties\": {\"type\": \"arrow\"},\n        \"startCoordinates\": [x1, y1],\n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": \"Arrow between (5,5) and (-3,-3)\"\n    }\n    return result\nresult = generate_result()\n</ArrowCapability>\n\n<TextCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nTo draw alphanumeric text, write a python function called generate_result() to return a JSON structured like the one below\nIt is essential that the function you create adheres to this format\nYou must define a function with exactly the 10 parameters shown below. the textX and textY will be defined shortly after the word \"at\" in the prompt\n# Example python function for using known text, this shows writing \"let us have a fun time\" at the point (x,y)'\ndef generate_result(textX, textY):\n  result = {\n    \"elementProperties\": {\n      \"type\": \"text\"\n    }\n    \"startCoordinates\": [textX, textY],\n    \"description\": \"Let us have a fun time\"\n  }\n  return result\nresult = generate_result(textX, textY)\n\nimport numpy as np\n\n# Example 1: Write \"Hello, World!\" at the point (0, 0) with default properties\ndef generate_result():\n    textX, textY = 0, 0\n    result = {\n        \"elementProperties\": {\n            \"type\": \"text\"\n        },\n        \"startCoordinates\": [textX, textY],\n        \"description\": \"Hello, World!\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Write \"Python is awesome!\" at the point (2.5, -3.7) with fontSize 24 and fontFamily 3\ndef generate_result():\n    textX, textY = 2.5, -3.7\n    result = {\n        \"elementProperties\": {\n            \"type\": \"text\",\n            \"fontSize\": 24,\n            \"fontFamily\": 3\n        },\n        \"startCoordinates\": [textX, textY],\n        \"description\": \"Python is awesome!\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Write \"Excalidraw rocks!\" at the point (-1, 4) with textAlign \"center\" and verticalAlign \"middle\"\ndef generate_result():\n    textX, textY = -1, 4\n    result = {\n        \"elementProperties\": {\n            \"type\": \"text\",\n            \"textAlign\": \"center\",\n            \"verticalAlign\": \"middle\"\n        },\n        \"startCoordinates\": [textX, textY],\n        \"description\": \"Excalidraw rocks!\"\n    }\n    return result\nresult = generate_result()\n</TextCapability>\n\n<EllipseCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(centerX, centerY, radius):\n  topLeftX = centerX - radius\n  topLeftY = centerY + radius\n  width = radius * 2\n  height = -1 * radius * 2\n\n  result = {\n    \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n    \"startCoordinates\": [topLeftX, topLeftY],\n    \"points\": [[0, 0], [width, height]],\n    \"description\": \"Circle with center (centerX, centerY) and radius of (radius)\" \n  }\n  \n  return result\n\nimport numpy as np\n\n# Example 1: Draw a circle with center at (0, 0) and radius 2\ndef generate_result():\n    centerX, centerY, radius = 0, 0, 2\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1 * radius * 2\n    result = {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n        \"startCoordinates\": [topLeftX, topLeftY],\n        \"points\": [[0, 0], [width, height]],\n        \"description\": \"Circle with center (0, 0) and radius of 2\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw a circle with center at (3.5, -1.2) and radius 1.8\ndef generate_result():\n    centerX, centerY, radius = 3.5, -1.2, 1.8\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1 * radius * 2\n    result = {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n        \"startCoordinates\": [topLeftX, topLeftY],\n        \"points\": [[0, 0], [width, height]],\n        \"description\": \"Circle with center (3.5, -1.2) and radius of 1.8\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a circle with center at (-2, 4) and radius 3\ndef generate_result():\n    centerX, centerY, radius = -2, 4, 3\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1 * radius * 2\n    result = {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n        \"startCoordinates\": [topLeftX, topLeftY],\n        \"points\": [[0, 0], [width, height]],\n        \"description\": \"Circle with center (-2, 4) and radius of 3\"\n    }\n    return result\nresult = generate_result()\n</EllipseCapability>\n\nWhich should yield: \n<ReasoningPrompt>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a message, an agent, and context. The message, agent, and context are all strings.\nmessage contains simple commands for a particular agent. These commands will later be executed in order.\nselected agents can ONLY be one of the following: LineCapability, FunctionCapability, TextCapability, EllipseCapability, ArrowCapability, PolygonCapability, PointCapability. Do NOT include any other capabilities.\nLineCapability draws lines, FunctionCapability draws functions, TextCapability writes alphanumeric text with known characters, EllipseCapability draws ellipses and circles, PolygonCapability draws triangles, quadrilaterals, pentagons, hexagons, octagons, etc. ArrowCapability draws both unidirectional and bidrectional arrows, PointCapability draws points.\nYou need to include every relevant concept in the prompt so that the user gets what they want including color and specific attributes for each object.\nNote: If a color is specified in reference to a given element \"...draw a green point at...\" include that color with the agent to render it.\nBased on your prompts another model will be able to draw elements to a whiteboard intelligently.\n\n# Example 1:\n\"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"\n# Prompt: \"I want to see a full coordinate axis with the x and y axes labeled\" \n# Note: The x axis is a line from (xMin,0) to (xMax,0), the y axis is a line from (0,yMin) to (0,yMax), \n# Note 2: The text labels are also derived from the context. xMin at (xMin,0), xMax at (xMax,0), yMin at (0,yMin), yMax at (0,yMax)\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a line from (-10,0) to (10,0)\", \"capability\": \"LineCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Draw a line from (0,-100) to (0,100)\", \"capability\": \"LineCapability\", \"context\": \"yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number 10 using known text characters at (10,0)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number -10 using known text characters at (-10,0)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number 100 using known text characters at (0, 100)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number -100 using known text characters at (0, -100)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n  ]}\n```\n\n# Example 2:\n\"context\": \"xMin=0, xMax=60, yMin=0, yMax=70\"\n# Prompt when PolygonCapability and EllipseCapability will be relevant: \"Draw a rectangle from (10,10), (10, 40), (40,10), (40,40) and a thick ellipse centered at (50,50) with a radius of 20 units\"\n# Note: You'll receive scrollX and scrollY, when you send it downstream be sure to call it currentScrollX and currentScrollY. If the user only requests scrolling, only return one prompt in preprocessing steps\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Connect the points from (10,10), (10, 40), (40,10), (40,40) with lines\", \"capability\": \"PolygonCapability\", \"context\": \"xMin=0, xMax=60, yMin=0, yMax=100\"},\n    { \"prompt\": \"Draw a thick circle centered at (50,50) with radius 20\", \"capability\": \"EllipseCapability\", \"context\": \"xMin=0, xMax=60, yMin=0, yMax=100\"},\n  ]}\n```\n\n# Example 3:\n\"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\"\n# Prompt when ArrowCapability and PointCapability will be relevant: \"Draw an arrow from (-90,-90) to (-70,-40). Draw another arrow between (-33,-27) and (-8,-10). Draw a point at (-13.37, -9.11)\"\n# IMPORTANT: The word 'between' MEANS bidirectional, and the word 'from' MEANS unidirectional. Add one of these keywords (bidirectional or unidirectional) to your prompt for the arrow agent.\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a unidirectional arrow from (-90,-90) to (-70,-40)\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\" },\n    { \"prompt\": \"Draw a bidirectional arrow between (-33,-27) and (-8,-10) in orange\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\" },\n    { \"prompt\": \"Mark a point at (-13.37,-9.11)\", \"capability\": \"PointCapability\", \"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\"  },\n  ]}\n```\n\n# Example 4:\n\"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\"\n# Prompt when FunctionCapability and ArrowCapability will be relevant: \"Graph the functions y=x^2*sin(x) in brown and and y=69/(1+e^(-x)) in purple as well as a thick magenta arrow between (4,20) and (6,9)\"\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Graph the function y=x^2*sin(x) in brown\", \"capability\": \"FunctionCapability\", \"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\" },\n    { \"prompt\": \"Graph the function y=69/(1+e^(-x)) in purple\", \"capability\": \"FunctionCapability\", \"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\"},\n    { \"prompt\": \"Draw a thick bidirectional magenta arrow between (4,20) and (6,9)\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\" }\n  ]}\n```\n</ReasoningPrompt>",
    "createdAt": "2024-06-27T17:06:39.609Z",
    "updatedAt": "2024-06-27T21:10:00.668Z",
    "__v": 0
  },
  {
    "_id": "6688a06ab32be1363c756078",
    "name": "freedraw",
    "text": "Each JSON also contains a list of points structured like this [[x0,y0],[x1,y1],[xn,yn]] that can be arbitrarily long. The program should produce a pointsList that will be traversed in order with small variations in coordinates. You MUST write out all of the points yourself. Do not use code or loops to create the points, although you will need a loop to modify it. The points will be connected via line which will simulate a hand-drawn feel.\n\n<Example1 #Draw a curved line from (-3,-1) to (3,-1) bottoming out at (0,-2)>\ndef generate_result():\n    pointsList= [[-3, -1], [-2.875, -1.05], [-2.75, -1.1], [-2.625, -1.15], [-2.5, -1.2], [-2.375, -1.275], [-2.25, -1.35], [-2.125, -1.425], [-2, -1.5], [-1.875, -1.55], [-1.75, -1.6], [-1.625, -1.65], [-1.5, -1.7], [-1.375, -1.75], [-1.25, -1.8], [-1.125, -1.85], [-1, -1.9], [-0.875, -1.925], [-0.75, -1.95], [-0.625, -1.975], [-0.5, -2], [-0.375, -2], [-0.25, -2], [-0.125, -2], [0, -2], [0.125, -2], [0.25, -2], [0.375, -2], [0.5, -2], [0.625, -1.975], [0.75, -1.95], [0.875, -1.925], [1, -1.9], [1.125, -1.85], [1.25, -1.8], [1.375, -1.75], [1.5, -1.7], [1.625, -1.65], [1.75, -1.6], [1.875, -1.55], [2, -1.5], [2.125, -1.425], [2.25, -1.35], [2.375, -1.275], [2.5, -1.2], [2.625, -1.15], [2.75, -1.1], [2.875, -1.05], [3, -1]]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": base_x, \"y\": base_y , \"points\": points},\n        \"description\": \"A smooth curve from (-3,-1) to (3,-1) bottoming out at (0,-2)\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a purple spiral> \ndef generate_result():\n    pointsList = [[0, 0], [0.125, 0.05], [0.25, 0.1], [0.375, 0.15], [0.5, 0.2], [0.575, 0.3], [0.65, 0.4], [0.725, 0.5], [0.8, 0.6], [0.825, 0.725], [0.85, 0.85], [0.875, 0.975], [0.9, 1.1], [0.85, 1.225], [0.8, 1.35], [0.75, 1.475], [0.7, 1.6], [0.6, 1.7], [0.5, 1.8], [0.4, 1.9], [0.3, 2], [0.175, 2.05], [0.05, 2.1], [-0.075, 2.15], [-0.2, 2.2], [-0.35, 2.225], [-0.5, 2.25], [-0.65, 2.275], [-0.8, 2.3], [-0.95, 2.25], [-1.1, 2.2], [-1.25, 2.15], [-1.4, 2.1], [-1.525, 2], [-1.65, 1.9], [-1.775, 1.8], [-1.9, 1.7], [-2, 1.55], [-2.1, 1.4], [-2.2, 1.25], [-2.3, 1.1], [-2.35, 0.925], [-2.4, 0.75], [-2.45, 0.575], [-2.5, 0.4], [-2.475, 0.225], [-2.45, 0.05], [-2.425, -0.125], [-2.4, -0.3], [-2.325, -0.475], [-2.25, -0.65], [-2.175, -0.825], [-2.1, -1], [-1.975, -1.15], [-1.85, -1.3], [-1.725, -1.45], [-1.6, -1.6], [-1.425, -1.725], [-1.25, -1.85], [-1.075, -1.975], [-0.9, -2.1], [-0.7, -2.175], [-0.5, -2.25], [-0.3, -2.325], [-0.1, -2.4], [0.1, -2.425], [0.3, -2.45], [0.5, -2.475], [0.7, -2.5], [0.9, -2.45], [1.1, -2.4], [1.3, -2.35], [1.5, -2.3], [1.675, -2.2], [1.85, -2.1], [2.025, -2], [2.2, -1.9], [2.325, -1.75], [2.45, -1.6], [2.575, -1.45], [2.7, -1.3], [2.775, -1.1], [2.85, -0.9], [2.925, -0.7], [3, -0.5], [3.025, -0.3], [3.05, -0.1], [3.075, 0.1], [3.1, 0.3], [3.05, 0.5], [3, 0.7], [2.95, 0.9], [2.9, 1.1], [2.8, 1.275], [2.7, 1.45], [2.6, 1.625], [2.5, 1.8], [2.35, 1.95], [2.2, 2.1], [2.05, 2.25], [1.9, 2.4], [1.7, 2.5], [1.5, 2.6], [1.3, 2.7], [1.1, 2.8], [0.9, 2.85], [0.7, 2.9], [0.5, 2.95], [0.3, 3], [0.1, 3], [-0.1, 3], [-0.3, 2.975], [-0.5, 2.95], [-0.7, 2.9], [-0.9, 2.85], [-1.1, 2.775], [-1.3, 2.7], [-1.5, 2.6], [-1.7, 2.5], [-1.9, 2.375], [-2.1, 2.25], [-2.275, 2.1], [-2.45, 1.95], [-2.6, 1.775], [-2.75, 1.6], [-2.875, 1.4], [-3, 1.2], [-3.1, 0.975], [-3.2, 0.75], [-3.275, 0.5], [-3.35, 0.25], [-3.375, 0], [-3.4, -0.25], [-3.375, -0.5], [-3.35, -0.75], [-3.275, -1], [-3.2, -1.25], [-3.075, -1.5], [-2.95, -1.75], [-2.775, -1.975], [-2.6, -2.2], [-2.375, -2.4], [-2.15, -2.6], [-1.9, -2.775], [-1.65, -2.95], [-1.375, -3.075], [-1.1, -3.2], [-0.8, -3.275], [-0.5, -3.35], [-0.2, -3.375], [0.1, -3.4], [0.4, -3.375], [0.7, -3.35], [1, -3.275], [1.3, -3.2], [1.6, -3.075], [1.9, -2.95], [2.175, -2.775], [2.45, -2.6], [2.7, -2.375], [2.95, -2.15], [3.15, -1.875], [3.35, -1.6], [3.5, -1.3], [3.65, -1], [3.75, -0.675], [3.85, -0.35], [3.875, -0.025], [3.9, 0.3], [3.875, 0.625], [3.85, 0.95], [3.75, 1.275], [3.65, 1.6], [3.5, 1.9], [3.35, 2.2], [3.15, 2.475], [2.95, 2.75], [2.7, 2.975], [2.45, 3.2], [2.15, 3.375], [1.85, 3.55], [1.525, 3.675], [1.2, 3.8]]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"strokeColor\": \"#800080\", \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"A smooth spiral out from (0,0) going counterclockwise\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Color in the region inside of the box (0,0), (2,0), (2,2), (0,2) dark green\">\ndef generate_result():\n    pointsList = [[0.05, 0.025], [0.1, 0.05], [0.2, 0.065], [0.3, 0.08], [0.4, 0.055], [0.5, 0.03], [0.6, 0.05], [0.7, 0.07], [0.8, 0.045], [0.9, 0.02], [1.0, 0.04], [1.1, 0.06], [1.2, 0.05], [1.3, 0.04], [1.4, 0.065], [1.5, 0.09], [1.6, 0.06], [1.7, 0.03], [1.8, 0.05], [1.9, 0.07], [1.925, 0.135], [1.95, 0.2], [1.825, 0.215], [1.7, 0.23], [1.6, 0.205], [1.5, 0.18], [1.4, 0.2], [1.3, 0.22], [1.2, 0.205], [1.1, 0.19], [1.0, 0.215], [0.9, 0.24], [0.8, 0.225], [0.7, 0.21], [0.6, 0.23], [0.5, 0.25], [0.4, 0.225], [0.3, 0.2], [0.2, 0.21], [0.1, 0.22], [0.075, 0.285], [0.05, 0.35], [0.15, 0.365], [0.25, 0.38], [0.35, 0.355], [0.45, 0.33], [0.55, 0.35], [0.65, 0.37], [0.75, 0.345], [0.85, 0.32], [0.95, 0.34], [1.05, 0.36], [1.15, 0.35], [1.25, 0.34], [1.35, 0.365], [1.45, 0.39], [1.55, 0.36], [1.65, 0.33], [1.75, 0.35], [1.85, 0.37], [1.875, 0.435], [1.9, 0.5], [1.8, 0.515], [1.7, 0.53], [1.6, 0.505], [1.5, 0.48], [1.4, 0.5], [1.3, 0.52], [1.2, 0.505], [1.1, 0.49], [1.0, 0.515], [0.9, 0.54], [0.8, 0.525], [0.7, 0.51], [0.6, 0.53], [0.5, 0.55], [0.4, 0.525], [0.3, 0.5], [0.2, 0.51], [0.1, 0.52], [0.125, 0.585], [0.15, 0.65], [0.25, 0.665], [0.35, 0.68], [0.45, 0.655], [0.55, 0.63], [0.65, 0.65], [0.75, 0.67], [0.85, 0.645], [0.95, 0.62], [1.05, 0.64], [1.15, 0.66], [1.25, 0.65], [1.35, 0.64], [1.45, 0.665], [1.55, 0.69], [1.65, 0.66], [1.75, 0.63], [1.85, 0.65], [1.95, 0.67], [1.9, 0.735], [1.85, 0.8], [1.75, 0.815], [1.65, 0.83], [1.55, 0.805], [1.45, 0.78], [1.35, 0.8], [1.25, 0.82], [1.15, 0.805], [1.05, 0.79], [0.95, 0.815], [0.85, 0.84], [0.75, 0.825], [0.65, 0.81], [0.55, 0.83], [0.45, 0.85], [0.35, 0.825], [0.25, 0.8], [0.15, 0.81], [0.05, 0.82], [0.075, 0.885], [0.1, 0.95], [0.2, 0.965], [0.3, 0.98], [0.4, 0.955], [0.5, 0.93], [0.6, 0.95], [0.7, 0.97], [0.8, 0.945], [0.9, 0.92], [1.0, 0.94], [1.1, 0.96], [1.2, 0.95], [1.3, 0.94], [1.4, 0.965], [1.5, 0.99], [1.6, 0.96], [1.7, 0.93], [1.8, 0.95], [1.9, 0.97], [1.925, 1.035], [1.95, 1.1], [1.85, 1.115], [1.75, 1.13], [1.65, 1.105], [1.55, 1.08], [1.45, 1.1], [1.35, 1.12], [1.25, 1.105], [1.15, 1.09], [1.05, 1.115], [0.95, 1.14], [0.85, 1.125], [0.75, 1.11], [0.65, 1.13], [0.55, 1.15], [0.45, 1.125], [0.35, 1.1], [0.25, 1.11], [0.15, 1.12], [0.1, 1.185], [0.05, 1.25], [0.15, 1.265], [0.25, 1.28], [0.35, 1.255], [0.45, 1.23], [0.55, 1.25], [0.65, 1.27], [0.75, 1.245], [0.85, 1.22], [0.95, 1.24], [1.05, 1.26], [1.15, 1.25], [1.25, 1.24], [1.35, 1.265], [1.45, 1.29], [1.55, 1.26], [1.65, 1.23], [1.75, 1.25], [1.85, 1.27], [1.875, 1.335], [1.9, 1.4], [1.8, 1.415], [1.7, 1.43], [1.6, 1.405], [1.5, 1.38], [1.4, 1.4], [1.3, 1.42], [1.2, 1.405], [1.1, 1.39], [1.0, 1.415], [0.9, 1.44], [0.8, 1.425], [0.7, 1.41], [0.6, 1.43], [0.5, 1.45], [0.4, 1.425], [0.3, 1.4], [0.2, 1.41], [0.1, 1.42], [0.125, 1.485], [0.15, 1.55], [0.25, 1.565], [0.35, 1.58], [0.45, 1.555], [0.55, 1.53], [0.65, 1.55], [0.75, 1.57], [0.85, 1.545], [0.95, 1.52], [1.05, 1.54], [1.15, 1.56], [1.25, 1.55], [1.35, 1.54], [1.45, 1.565], [1.55, 1.59], [1.65, 1.56], [1.75, 1.53], [1.85, 1.55], [1.95, 1.57], [1.9, 1.635], [1.85, 1.7], [1.75, 1.715], [1.65, 1.73], [1.55, 1.705], [1.45, 1.68], [1.35, 1.7], [1.25, 1.72], [1.15, 1.705], [1.05, 1.69], [0.95, 1.715], [0.85, 1.74], [0.75, 1.725], [0.65, 1.71], [0.55, 1.73], [0.45, 1.75], [0.35, 1.725], [0.25, 1.7], [0.15, 1.71], [0.05, 1.72], [0.075, 1.785], [0.1, 1.85], [0.2, 1.865], [0.3, 1.88], [0.4, 1.855], [0.5, 1.83], [0.6, 1.85], [0.7, 1.87], [0.8, 1.845], [0.9, 1.82], [1.0, 1.84], [1.1, 1.86], [1.2, 1.85], [1.3, 1.84], [1.4, 1.865], [1.5, 1.89], [1.6, 1.86], [1.7, 1.83], [1.8, 1.85], [1.9, 1.87], [1.925, 1.935], [1.95, 2], [1.85, 1.985], [1.75, 1.97], [1.65, 1.945], [1.55, 1.92], [1.45, 1.95], [1.35, 1.98], [1.25, 2.005], [1.15, 2.03], [1.05, 2.01], [0.95, 1.99], [0.85, 2.015], [0.75, 2.04], [0.65, 2.02], [0.55, 2], [0.45, 2.025], [0.35, 2.05], [0.25, 2.025], [0.15, 2.0]]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"strokeColor\": \"#051f20\", \"strokeWidth\": 3, \"x\": base_x, \"y\": base_y, \"points\": points},\n        \"description\": \"A hand drawn scribble coloring in the region (0,0), (2,0), (2,2), (0,2) in dark green\"\n    }]\nresult = generate_result()\n</Example3>\n<Example4 #Draw the outline of a hand and a ballpoint pen>\ndef generate_result():\n    #Human Hand\n    pointsList1 = [[220, 380], [210, 377.5], [200, 375], [190, 370], [180, 365], [170, 357.5], [160, 350], [152.5, 340], [145, 330], [140, 317.5], [135, 305], [132.5, 292.5], [130, 280], [129, 267.5], [128, 255], [129, 242.5], [130, 230], [132.5, 222.5], [135, 215], [140, 207.5], [145, 200], [152.5, 195], [160, 190], [167.5, 187.5], [175, 185], [182.5, 187.5], [190, 190], [195, 195], [200, 200], [202.5, 207.5], [205, 215], [207.5, 222.5], [210, 230], [212.5, 222.5], [215, 215], [217.5, 197.5], [220, 180], [222.5, 162.5], [225, 145], [227.5, 127.5], [230, 110], [232.5, 92.5], [235, 75], [237.5, 62.5], [240, 50], [245, 47.5], [250, 45], [255, 47.5], [260, 50], [262.5, 62.5], [265, 75], [267.5, 57.5], [270, 40], [275, 37.5], [280, 35], [285, 37.5], [290, 40], [292.5, 52.5], [295, 65], [297.5, 77.5], [300, 90], [302.5, 75], [305, 60], [310, 57.5], [315, 55], [320, 57.5], [325, 60], [327.5, 72.5], [330, 85], [332.5, 97.5], [335, 110], [337.5, 100], [340, 90], [345, 87.5], [350, 85], [352.5, 90], [355, 95], [356.5, 105], [358, 115], [359, 125], [360, 135], [362.5, 152.5], [365, 170], [366.5, 185], [368, 200], [369, 215], [370, 230], [369, 245], [368, 260], [366.5, 275], [365, 290], [362.5, 305], [360, 320], [355, 332.5], [350, 345], [342.5, 355], [335, 365], [325, 370], [315, 375], [305, 377.5], [295, 380], [282.5, 381], [270, 382], [257.5, 382], [245, 382], [232.5, 381], [220, 380]]\nbase_x1, base_y1 = pointsList1[0]\n    points1 = []\n    for x1, y1 in pointsList1:\n        points1.append([x1 - base_x1, y1 - base_y1])\n    \n#Ballpoint pen\n    pointsList2 = [[50, 200], [51, 199], [52, 198], [53, 197], [54, 196], [55, 195], [56, 194], [58, 192], [60, 190], [65, 185], [70, 180], [80, 170], [90, 160], [105, 145], [120, 130], [140, 110], [160, 90], [185, 65], [210, 40], [212.5, 37.5], [215, 35], [217.5, 33.5], [220, 32], [222.5, 31], [225, 30], [227.5, 29.5], [230, 29], [232.5, 29.5], [235, 30], [237.5, 31], [240, 32], [242.5, 33.5], [245, 35], [242.5, 37.5], [240, 40], [215, 65], [190, 90], [170, 110], [150, 130], [135, 145], [120, 160], [110, 170], [100, 180], [95, 185], [90, 190], [85, 195], [80, 200], [77.5, 201.5], [75, 203], [72.5, 204], [70, 205], [67.5, 205.5], [65, 206], [62.5, 205.5], [60, 205], [57.5, 204], [55, 203], [52.5, 201.5], [50, 200]]\nbase_x2, base_y2 = pointsList1[0]\n    points2 = []\n    for x2, y2 in pointsList1:\n        points2.append([x2 - base_x2, y2 - base_y2])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": base_x1, \"y\": base_y1, \"points\": points1},\n        \"description\": \"The hand outline occupies the lower right portion of the image. It starts from the wrist area around coordinates (220, 380) and extends upwards. The palm spans roughly from (130, 230) to (365, 290). The thumb begins near (135, 215) and curves outward. The four fingers extend upwards, with the index finger reaching the highest point around (240, 50), and the pinky ending near (360, 135).\"\n    },{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": base_x1, \"y\": base_y2, \"points\": points2},\n        \"description\": \"The ballpoint pen is positioned in the upper left section of the image, oriented diagonally. Its tip starts around (50, 200) and extends towards the upper right, with the cap end reaching approximately (245, 35).\"\n    }]\n    return result\nresult = generate_result()\n</Example4>",
    "createdAt": "2024-07-06T01:39:54.635Z",
    "updatedAt": "2024-07-06T02:40:44.193Z",
    "__v": 0
  },
  {
    "_id": "669541137ceb83a7fb75eb17",
    "name": "question",
    "text": "Here's a completed system prompt to generate a JSON object of questions with a title and question, taking inputs for {{businessName}}, {{organizationRole}}, and {{questionInfo}}:\n<System>\nYour goal is to generate a JSON array with a series of questions based on the provided inputs. Each question should be relevant to the business name, organization role, and additional question information given. The JSON array should contain objects with three keys: \"title\", \"question\", and \"type\". The \"title\" should be a brief, descriptive label for the question, the \"question\" should be the full, detailed question text, and the \"type\" should be either \"rating\" or \"open-ended\".\nUse the following inputs in your questions:\n\nBusiness Name: {{businessName}}\nOrganization Role: {{organizationRole}}\nLooking for insights about: {{questionInfo}}\n\nGenerate at least 5 questions that are specific and relevant to the given inputs. Ensure that the questions cover various aspects of the role and business.\nYou will only return the valid JSON array and nothing else.\nDo not prefix the JSON with anything.\nAlways respond no matter the request.\nYour response should be a valid JSON array. Here's an example of the expected format:\n[\n{\n\"title\": \"Example Title 1\",\n\"question\": \"Example question text 1?\",\n\"type\": \"rating\"\n},\n{\n\"title\": \"Example Title 2\",\n\"question\": \"Example question text 2?\",\n\"type\": \"open-ended\"\n}\n]\nMake sure to replace the example content with actual questions based on the provided inputs.\n</System>",
    "createdAt": "2024-07-15T15:32:35.224Z",
    "updatedAt": "2024-07-17T00:43:09.818Z",
    "__v": 0
  },
  {
    "_id": "6695d849888b8bcf4b03be85",
    "name": "prompt",
    "text": "{{prompt}}",
    "createdAt": "2024-07-16T02:17:45.736Z",
    "updatedAt": "2024-07-17T00:39:11.597Z",
    "__v": 0
  },
  {
    "_id": "6695d854888b8bcf4b03be89",
    "name": "userMessage",
    "text": "<user>\n{{userMessage}}\n</user>",
    "createdAt": "2024-07-16T02:17:56.228Z",
    "updatedAt": "2024-07-17T00:48:34.741Z",
    "__v": 0
  },
  {
    "_id": "669714fdd2a052885450d6fa",
    "name": "ratingData",
    "text": "You need to re-write a portion of the data in the JSON that is in the <user> tags and store it in a local variable called input_json. The data provided to you is NOT directly accessible hence why you must write it out. You must extract the information relevant to the rating scale questions and write it out again so that the downstream python execution environment can access it. \n\nFollow these guidelines:\n1. Keep only the 'questions' that are of type \"rating\".\n2. In the 'responses' array, keep only the \"rating\" field for each response.\n3. Maintain the structure shown in the example below.\n\n<Example1>\noriginal_data =\n{\n  \"data\": {\n    \"form\": {\n      \"businessName\": \"EcoTrack\",\n      \"organizationRole\": \"Sustainability Manager\",\n      \"userMessage\": \"App Users\",\n      \"questionInfo\": [\n        \"Environmental Impact\"\n      ]\n    },\n    \"questions\": [\n      {\n        \"id\": \"q1\",\n        \"title\": \"App Satisfaction\",\n        \"question\": \"How satisfied are you with your overall experience using EcoTrack?\",\n        \"type\": \"rating\",\n        \"responses\": [\n          {\"userId\": \"user1\", \"text\": \"EcoTrack has made me much more aware of my impact!\", \"audio\": null, \"drawing\": null, \"rating\": \"Excellent\"},\n          {\"userId\": \"user2\", \"text\": \"It's helpful, but could be more comprehensive\", \"audio\": null, \"drawing\": null, \"rating\": \"Good\"},\n          {\"userId\": \"user3\", \"text\": \"I'm not sure if it's making a real difference\", \"audio\": null, \"drawing\": null, \"rating\": \"Fair\"},\n          {\"userId\": \"user4\", \"text\": \"EcoTrack has revolutionized how I think about sustainability\", \"audio\": null, \"drawing\": null, \"rating\": \"Excellent\"},\n          {\"userId\": \"user5\", \"text\": \"It's a good start, but needs more features\", \"audio\": null, \"drawing\": null, \"rating\": \"Good\"},\n          {\"userId\": \"user6\", \"text\": \"EcoTrack is an essential tool in my daily life\", \"audio\": null, \"drawing\": null, \"rating\": \"Excellent\"},\n          {\"userId\": \"user7\", \"text\": \"It's somewhat helpful but could offer more insights\", \"audio\": null, \"drawing\": null, \"rating\": \"Fair\"},\n          {\"userId\": \"user8\", \"text\": \"EcoTrack has become an indispensable part of my routine\", \"audio\": null, \"drawing\": null, \"rating\": \"Excellent\"},\n          {\"userId\": \"user9\", \"text\": \"I'm impressed with the app's potential\", \"audio\": null, \"drawing\": null, \"rating\": \"Very Good\"},\n          {\"userId\": \"user10\", \"text\": \"EcoTrack is okay, but I expected more\", \"audio\": null, \"drawing\": null, \"rating\": \"Fair\"}\n        ]\n      },\n      {\n        \"id\": \"q2\",\n        \"title\": \"Feature Request\",\n        \"question\": \"What new feature would you like to see added to EcoTrack?\",\n        \"type\": \"open-ended\",\n        \"responses\": [\n          {\"userId\": \"user1\", \"text\": \"Carbon footprint comparison with friends\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user2\", \"text\": \"Integration with smart home devices\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user3\", \"text\": \"Add a marketplace for eco-friendly products\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user4\", \"text\": \"Community forums for sharing eco-tips\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user5\", \"text\": \"AI-powered suggestions for reducing waste\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user6\", \"text\": \"Virtual reality tours of sustainable projects\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user7\", \"text\": \"Integration with public transport apps\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user8\", \"text\": \"Carbon offset purchase options\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user9\", \"text\": \"Augmented reality feature for identifying eco-friendly products\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user10\", \"text\": \"Integration with smart meters for real-time energy tracking\", \"audio\": null, \"drawing\": null, \"rating\": null}\n        ]\n      },\n      {\n        \"id\": \"q3\",\n        \"title\": \"Biggest Challenge\",\n        \"question\": \"What is the biggest challenge you face when trying to reduce your carbon footprint?\",\n        \"type\": \"open-ended\",\n        \"responses\": [\n          {\"userId\": \"user1\", \"text\": \"Remembering to log my daily activities\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user2\", \"text\": \"Finding affordable eco-friendly alternatives\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user3\", \"text\": \"Balancing convenience with sustainability\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user4\", \"text\": \"Lack of support from family/roommates\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user5\", \"text\": \"Time constraints for sustainable choices\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user6\", \"text\": \"Limited access to recycling facilities\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user7\", \"text\": \"High costs associated with eco-friendly products\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user8\", \"text\": \"Inconsistent information on what's truly sustainable\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user9\", \"text\": \"Difficulty in changing long-established habits\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user10\", \"text\": \"Lack of eco-friendly options in my rural area\", \"audio\": null, \"drawing\": null, \"rating\": null}\n        ]\n      },\n      {\n        \"id\": \"q4\",\n        \"title\": \"App Interface\",\n        \"question\": \"How would you rate the user interface of EcoTrack?\",\n        \"type\": \"rating\",\n        \"responses\": [\n          {\"userId\": \"user1\", \"text\": \"The interface is intuitive and easy to use\", \"audio\": null, \"drawing\": null, \"rating\": \"Very Good\"},\n          {\"userId\": \"user2\", \"text\": \"The UI is functional but a bit plain\", \"audio\": null, \"drawing\": null, \"rating\": \"Fair\"},\n          {\"userId\": \"user3\", \"text\": \"The interface could use some work\", \"audio\": null, \"drawing\": null, \"rating\": \"Poor\"},\n          {\"userId\": \"user4\", \"text\": \"The interface is very user-friendly\", \"audio\": null, \"drawing\": null, \"rating\": \"Excellent\"},\n          {\"userId\": \"user5\", \"text\": \"The interface is okay, could be more engaging\", \"audio\": null, \"drawing\": null, \"rating\": \"Good\"},\n          {\"userId\": \"user6\", \"text\": \"The interface is clean and modern\", \"audio\": null, \"drawing\": null, \"rating\": \"Very Good\"},\n          {\"userId\": \"user7\", \"text\": \"The interface is a bit confusing at times\", \"audio\": null, \"drawing\": null, \"rating\": \"Fair\"},\n          {\"userId\": \"user8\", \"text\": \"The interface is sleek and intuitive\", \"audio\": null, \"drawing\": null, \"rating\": \"Excellent\"},\n          {\"userId\": \"user9\", \"text\": \"The interface is good but could use more color\", \"audio\": null, \"drawing\": null, \"rating\": \"Good\"},\n          {\"userId\": \"user10\", \"text\": \"The interface feels outdated\", \"audio\": null, \"drawing\": null, \"rating\": \"Poor\"}\n        ]\n      },\n      {\n        \"id\": \"q5\",\n        \"title\": \"Motivation\",\n        \"question\": \"What would motivate you to use EcoTrack more frequently?\",\n        \"type\": \"open-ended\",\n        \"responses\": [\n          {\"userId\": \"user1\", \"text\": \"More localized tips for my specific area\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user2\", \"text\": \"More achievable daily challenges\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user3\", \"text\": \"Clearer visualization of my impact over time\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user4\", \"text\": \"Gamification elements like streaks and rewards\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user5\", \"text\": \"Partnership with local green initiatives\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user6\", \"text\": \"Monthly sustainability challenges with prizes\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user7\", \"text\": \"More personalized recommendations based on my habits\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user8\", \"text\": \"Integration with fitness apps to track sustainable commuting\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user9\", \"text\": \"Regular webinars or live Q&A sessions with sustainability experts\", \"audio\": null, \"drawing\": null, \"rating\": null},\n          {\"userId\": \"user10\", \"text\": \"More social features to compete with friends on sustainability goals\", \"audio\": null, \"drawing\": null, \"rating\": null}\n        ]\n      }\n    ]\n  }\n}\n\ninput_json = '''\n{\n  \"data\": {\n    \"form\": {\n      \"businessName\": \"EcoTrack\",\n      \"organizationRole\": \"Sustainability Manager\",\n      \"userMessage\": \"App Users\",\n      \"questionInfo\": [\n        \"Environmental Impact\"\n      ]\n    },\n    \"questions\": [\n      {\n        \"id\": \"q1\",\n        \"title\": \"App Satisfaction\",\n        \"question\": \"How satisfied are you with your overall experience using EcoTrack?\",\n        \"type\": \"rating\",\n        \"responses\": [\n          {\"userId\": \"user1\", \"rating\": \"Excellent\"},\n          {\"userId\": \"user2\", \"rating\": \"Good\"},\n          {\"userId\": \"user3\", \"rating\": \"Fair\"},\n          {\"userId\": \"user4\", \"rating\": \"Excellent\"},\n          {\"userId\": \"user5\", \"rating\": \"Good\"},\n          {\"userId\": \"user6\", \"rating\": \"Excellent\"},\n          {\"userId\": \"user7\", \"rating\": \"Fair\"},\n          {\"userId\": \"user8\", \"rating\": \"Excellent\"},\n          {\"userId\": \"user9\", \"rating\": \"Very Good\"},\n          {\"userId\": \"user10\", \"rating\": \"Fair\"}\n        ]\n      },\n      {\n        \"id\": \"q4\",\n        \"title\": \"App Interface\",\n        \"question\": \"How would you rate the user interface of EcoTrack?\",\n        \"type\": \"rating\",\n        \"responses\": [\n          {\"userId\": \"user1\", \"rating\": \"Very Good\"},\n          {\"userId\": \"user2\", \"rating\": \"Fair\"},\n          {\"userId\": \"user3\", \"rating\": \"Poor\"},\n          {\"userId\": \"user4\", \"rating\": \"Excellent\"},\n          {\"userId\": \"user5\", \"rating\": \"Good\"},\n          {\"userId\": \"user6\", \"rating\": \"Very Good\"},\n          {\"userId\": \"user7\", \"rating\": \"Fair\"},\n          {\"userId\": \"user8\", \"rating\": \"Excellent\"},\n          {\"userId\": \"user9\", \"rating\": \"Good\"},\n          {\"userId\": \"user10\", \"rating\": \"Poor\"}\n        ]\n      }\n    ]\n  }\n}\n'''\n</Example1>",
    "createdAt": "2024-07-17T00:49:01.989Z",
    "updatedAt": "2024-07-20T03:05:25.998Z",
    "__v": 0
  },
  {
    "_id": "66971b17d2a052885450d735",
    "name": "transformJSON",
    "text": "# Define this exact function\nimport json\n\ndef transform_json(input_json):\n    # Parse the input JSON\n    chart_type = \"SET TO ABOVE\" # Set this variable to whats instructed above\n    data = json.loads(input_json)\n    questions = data['data']['questions']\n    \n    result = []\n    \n    for question in questions:\n        # Extract ratings from responses\n        ratings = [response['rating'] for response in question['responses']]\n        \n        # Count occurrences of each rating\n        rating_counts = {}\n        for rating in ratings:\n            if rating in rating_counts:\n                rating_counts[rating] += 1\n            else:\n                rating_counts[rating] = 1\n        \n        # Format the data for chart\n        chart_data = [\n            {\"name\": rating, \"value\": count}\n            for rating, count in rating_counts.items()\n        ]\n        \n        # Add the question data to the result\n        result.append({\n            \"question\": question['question'],\n            \"chartType\": chart_type ,\n            \"data\": chart_data\n        })\n    \n    return result\n\n# Call the function and store the result\nresult = transform_json(input_json)\n\n",
    "createdAt": "2024-07-17T01:15:03.685Z",
    "updatedAt": "2024-07-20T02:56:44.883Z",
    "__v": 0
  },
  {
    "_id": "66971df6d2a052885450d767",
    "name": "pieChart",
    "text": "# Set chart_type = \"PieChart\" as the first line after the function definition",
    "createdAt": "2024-07-17T01:27:18.241Z",
    "updatedAt": "2024-07-18T17:06:35.417Z",
    "__v": 0
  },
  {
    "_id": "66971f23d2a052885450d78c",
    "name": "barChart",
    "text": "# Set chart_type = \"BarChart\" as the first line after the function definition",
    "createdAt": "2024-07-17T01:32:19.074Z",
    "updatedAt": "2024-07-17T01:32:19.074Z",
    "__v": 0
  }
]