[
  {
    "_id": "6670ab02f446b4f1a67b32f7",
    "name": "fixPython",
    "text": "The following code has errors in it that caused it to be un-executable.\nPlease fix the code and provide a corrected version.\nThe error is wrapped in a <error> tag.\nThe code is wrapped in <code> tags.\n",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-06-17T21:30:42.453Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f5",
    "name": "appState",
    "text": "The code shall define a function called generate_appStateDict() that creates a variable called appStateDict sets it equal to a JSON and returns it.\nThe code should also call the function with the provided parameters and set the returned value equal to appStateDict. \nThis will be the only variable because the written function can only be called once. \nDo NOT print(appStateDict), do NOT JSON.dumps(appStateDict), the very last line of code should always be: \n  appStateDict = generate_appStateDict() #Possibly with parameters\nThe appStateDict JSON that gets returned should only contain the necessary properties to satisfy the user request\n",
    "createdAt": "2024-06-17T21:30:42.452Z",
    "updatedAt": "2024-07-04T04:17:12.374Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f6",
    "name": "writePython",
    "text": "Give me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed libraries are numpy, json, itertools, requests, and beautifulsoup. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function that creates a variable called result and returns it as the variable result. ",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-08-21T17:58:54.563Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fb",
    "name": "point",
    "text": "# Example python code function that draws a point at (x1,y1) with xMin,xMax,yMin,yMax\n# Example python code that draws a point\ndef generate_result(pointX, pointY):\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor as needed\n\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points\n         }\n        \"description\": f\"A point at ({pointX},{pointY})\"\n    }]\n    return result\n\nresult = generate_result(pointX, pointY)\n\n<Example1 #Draw a thin point at (0, 0) with xMin=-1, xMax=10, yMin=-5, yMax=1\ndef generate_result():\n    pointX, pointY = 0, 0\n    xMin, xMax, yMin, yMax = -1, 10, -5, 1\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.0005  # Adjust the factor for a thin point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points,\n                 \"strokeWidth\": 0.5\n         }\n        \"description\": f\"A thin point at ({pointX},{pointY})\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a point at (-3.2, 7.1) with opacity 30, stroke width 1.8, xMin=-10, xMax=0, yMin=2, yMax=15>\ndef generate_result():\n    pointX, pointY = -3.2, 7.1\n    xMin, xMax, yMin, yMax = -10, 0, 2, 15\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor for a regular point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points,\n                 \"opacity\": 30,\n                 \"strokeWidth\": 1.8\n         }\n        \"description\": f\"A point at ({pointX},{pointY}) with opacity 30 and stroke width 1.8\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw thick points at (5, -2) and (8, -3) in blue and red respectively, xMin=1, xMax=20, yMin=-8, yMax=0>\ndef generate_result():\n    pointX1, pointY1 = 5, -2\n    pointX2, pointY2 = 8, -3\n    xMin, xMax, yMin, yMax = 1, 20, -8, 0\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.002  # Adjust the factor for a thick point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX1,\n                  \"y\": pointY1,\n                 \"points\": points,\n                 \"strokeWidth\": 2.5,\n                 \"strokeColor\": \"#0000FF\"\n         }\n        \"description\": f\"A thick blue point at ({pointX},{pointY})\"\n    },\n   {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX2,\n                  \"y\": pointY2,\n                 \"points\": points,\n                 \"strokeWidth\": 2.5,\n                 \"strokeColor\": \"#FF0000\"\n         }\n        \"description\": f\"A thick red point at ({pointX},{pointY})\"\n    },\n]\n    return result\nresult = generate_result()\n</Example3>\n<Example 4 #Draw a point at (-1.5, -3.7) with opacity 80, stroke width 2.2, stroke color #FF00FF, xMin=-5, xMax=5, yMin=-10, yMax=-1>\ndef generate_result():\n    pointX, pointY = -1.5, -3.7\n    xMin, xMax, yMin, yMax = -5, 5, -10, -1\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor for a regular point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [{\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX,\n                  \"y\": pointY,\n                 \"points\": points, \n                 \"opacity\": 80,\n                 \"strokeWidth\": 2.2,\n                 \"strokeColor\": \"#FF00FF\"\n         }\n        \"description\": f\"A point at ({pointX},{pointY}) with opacity 80, stroke width 2.2, and stroke color #FF00FF\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example 5 #Draw thin points at (8, 0.5), (-0.75, 3), (12,-5) xMin=2, xMax=12, yMin=-1, yMax=2>\ndef generate_result():\n    pointX1, pointY1 = 8, 0.5\n    pointX2, pointY2 = -0.75, 3\n    pointX3, pointY3 = 12, -5\n    xMin, xMax, yMin, yMax = 2, 12, -1, 2\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.0005  # Adjust the factor for a thin point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = [\n     {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX1,\n                  \"y\": pointY1,\n                 \"points\": points,\n                 \"strokeWidth\": 0.3\n         }\n        \"description\": f\"A thin point at ({pointX1},{pointY1})\"\n    },\n    {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX2,\n                  \"y\": pointY2,\n                 \"points\": points,\n                 \"strokeWidth\": 0.3\n         }\n        \"description\": f\"A thin point at ({pointX2},{pointY2})\"\n    },\n    {\n        \"elementProperties\": {\n                  \"type\": \"freedraw\",\n                  \"x\": pointX3,\n                  \"y\": pointY3,\n                 \"points\": points,\n                 \"strokeWidth\": 0.3\n         }\n        \"description\": f\"A thin point at ({pointX},{pointY})\"\n    }\n]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-05T21:07:11.024Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fa",
    "name": "line",
    "text": "Each JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(x1, y1, x2, y2):\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\n\nresult = generate_result(x1,y1, x2, y2) #You should fill in actual numbers\n\n<Example1 #Draw a line from (0, 0) to (5, 5) and (2,6) to (7,11)\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 5, 5\n    x3, y3, x4, y4 = 2, 6, 7, 11\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"line\", \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x4-x3, y4-y3]]},\n        \"description\": f\"Line from ({x3},{y3}) to ({x4},{y4})\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw an almost invisible line from (-2, 3) to (4, -1)>\ndef generate_result():\n    x1, y1, x2, y2 = -2, 3, 4, -1\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"opacity\":20, \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2}) with opacity 20\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw a thick cyan line from (1.5, -2.7) to (-3.2, 4.1)>\ndef generate_result():\n    x1, y1, x2, y2 = 1.5, -2.7, -3.2, 4.1\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#00FFFF\", \"strokeWidth\": 3, \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"A thick cyan line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw a thin yellow line from (-1, -1) to (1, 1)>\ndef generate_result():\n    x1, y1, x2, y2 = -1, -1, 1, 1\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", , \"strokeColor\": \"#9b870c\", \"strokeWidth\": 0.75, \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Thin yellow line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw a line from (2.5, 0) to (2.5, 6)>\ndef generate_result():\n    x1, y1, x2, y2 = 2.5, 0, 2.5, 6\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"sloppiness\": 0, \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-06T02:14:58.706Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fc",
    "name": "text",
    "text": "To draw alphanumeric text, write a python function called generate_result() to return a JSON structured like the one below\nIt is essential that the function you create adheres to this format.\nYou must define a function with exactly the 2 parameters shown below. the textX and textY will be defined shortly after the word \"at\" in the prompt\n\n<Example1 #Write \"Hello, World!\" at the point (0, 0) with default properties and the text \"Welcome to the Party\" directly below it>\ndef generate_result():\n    textX1, textY1 = 0, 0\n    textX2, textY2 = 0, -2\n    result = [{\"elementProperties\": {\"type\": \"text\", \"x\": textX, \"y\": textY, \"text\": \"Hello World!\"},\n        \"description\": f\"The text 'Hello, World!' with the top-left of it at ({textX1}, {textY1}): '\"\n    },\n    {\"elementProperties\": {\"type\": \"text\", \"x\": textX, \"y\": textY, \"text\": \"Welcome to the Party\"},\n        \"description\": f\"The text 'Welcome to the Party' with the top-left of it at ({textX2}, {textY2}): '\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Write \"Python is awesome!\" at the point (2.5, -3.7) in dark blue with fontSize 24 and fontFamily 3>\ndef generate_result():\n    textX, textY = 2.5, -3.7\n    result = [{\n        \"elementProperties\": {\"type\": \"text\", \"fontSize\": 24, \"fontFamily\": 3, \"strokeColor\": \"00008B\", \"x\": textX, \"y\": textY, \"text\": \"Python is awesome\"}},\n        \"description\": f\"Text 'Python is awesome!' with the top left of the starting P at ({textX}, {textY}) in dark blue in size 24 pt font\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Write \"Excalidraw really should have SVG supported\"  in two lines at the point (-1, 4) with textAlign \"center\" and verticalAlign \"middle\"\ndef generate_result():\n    textX, textY = -1, 4\n    result = [{\n        \"elementProperties\": {\"type\": \"text\",\"textAlign\": \"center\", \"verticalAlign\": \"middle\", \"x\": textX, \"y\": textY, \"text\": \"Excalidraw really should \\n have SVG supported\"\"},\n        \"description\": f\"Text saying 'Excalidraw really should \\n have SVG supported' starting with the top left of the initial E at ({textX}, {textY}) text aligned to the middle and vertically aligned to the middle\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Transparently write \"AI-generated content conquers the internet\" at the point (3, -2) with fontSize 18, fontFamily 2, and lineHeight 1.5>\ndef generate_result():\n    textX, textY = 3, -2\n    result = [{\n        \"elementProperties\": {\"type\": \"text\", \"fontSize\": 18, \"fontFamily\": 2, \"lineHeight\": 1.5, opacity: 69, \"x\": textX, \"y\": textY, \"text\": \"AI-generated content conquers the internet\"},\n        \"description\": f\"The text 'AI-generated text' starting at with the top left of the initial A at ({textX}, {textY}) somewhat transparently with fontSize 18, one and a half spaced, font family 2'\"\n    }]\n    return result\nresult = generate_result()\n</Example>\n<Example5 #Write the number 10 at the point (0, 10) with fontSize 12, textAlign \"right\", and verticalAlign \"bottom\">\ndef generate_result():\n    textX, textY = 0, 10\n    result = [{\n        \"elementProperties\": {\n            \"type\": \"text\",\n            \"fontSize\": 12,\n            \"textAlign\": \"right\",\n            \"verticalAlign\": \"bottom\", \"x\": textX, \"y\": textY, \"text\": \"10\"}\n        },\n        \"description\": f\"Text of '10' with the top left of the 1 starting at ({textX}, {textY}) in fontSize 12, right aligned, bottom vertically aligned\"\n    }]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-05T20:55:59.283Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32fe",
    "name": "polygon",
    "text": "This JSON also contains a list of points that contains an arbitrary number of points.\n<Important>\"type\":\"line\" must be the type to return properly. This is because we are constructing shapes by connecting lines</Important>\n<Example1 #Draw two red triangles on top of each other>\ndef generate_result():\n    # Triangle 1\n    pointsList1 = [(0, 0), (2, 3), (4, 1)]\n    base_x1, base_y1 = pointsList1[0]\n    points1 = []\n    for x, y in pointsList1:\n        points1.append([x - base_x1, y - base_y1])\n    points1.append([0, 0])  # End with [0, 0]\n    #Triangle 2\n    pointsList2 = [(0, 4), (2, 7), (4, 5)] \n    base_x2, base_y2 = pointsList2[0]\n    points2 = []\n    for x, y in pointsList2:\n        points2.append([x - base_x2, y - base_y2])\n    points2.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FF0000\", \"backgroundColor\": \"#FF0000\", \"fillStyle\": \"solid\", \"x\": base_x1, \"y\": base_y1, \"points\": points1},\n        \"description\": f\"Red triangle with vertices {pointsList1}\"\n    },\n   {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FF0000\", \"backgroundColor\": \"#FF0000\", \"fillStyle\": \"solid\", \"x\": base_x2, \"y\": base_y2, \"points\": points2},\n        \"description\": f\"Red triangle with vertices {pointsList2}\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a slightly transparent octagon outline with 8 points at (0, 0), (0, 2), (2, 4), (4, 4), (6, 2), (6, 0), (4, -2), (2, -2)>\ndef generate_result():\n    pointsList = [(0, 0), (0, 2), (2, 4), (4, 4), (6, 2), (6, 0), (4, -2), (2, -2)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    points.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"opacity\": 70, \"x\": base_x, \"y\": base_y, \"points\": points},\n        \"description\": f\"Transparent Octagon with vertices {pointsList}\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 Draw a thick blue square down and to the left of a circle centered at (7,7) with a radius of 2> \ndef generate_result():\n    #To ensure that my square is below and to the left of that circle I will make sure my top right point is more than radius units down and to the left of (7,7)\n    pointsList = [(0, 0), (0, 5), (5, 5), (5, 0)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    points.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#0000FF\", \"strokeWidth\": 4, \"backgroundColor\": \"#0080FF\", \"fillStyle\": \"solid\", \"x\": base_x, \"y\": base_y, \"points\": points},\n        \"description\": f\"Thick blue square with vertices {pointsList}\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw an Orange Hexagon with 6 points and a green pentagon to the right of it>\ndef generate_result():\n    #Orange Hexagon\n    pointsList1 = [(-3, -3), (-1, -1), (1, -1), (3, -3), (3, -5), (1, -7)]\n    base_x1, base_y1 = pointsList1[0]\n    points1 = []\n    for x, y in pointsList1:\n        points1.append([x - base_x1, y - base_y1])\n    points1.append([0, 0])  # End with [0, 0]\n    #Blue pentagon\n    pointsList2 = [(-3, -3), (-1, -1), (1, -1), (3, -3), (3, -5), (1, -7)]\n    base_x2, base_y2 = pointsList2[0]\n    points2 = []\n    for x, y in pointsList2:\n        points.append([x - base_x2, y - base_y2])\n    points2.append([0, 0])  # End with [0, 0]\n    result = [{\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FFA500\", \"backgroundColor\": \"#ffb732\", \"fillStyle\": \"solid\", \"strokeWidth\": 1.2, \"x\": base_x1, \"y\": base_y1, \"points\": points1},\n        \"description\": f\"Orange Hexagon with vertices {pointsList}\"\n    },\n   {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#023020\", \"backgroundColor\": \"#006400\", \"fillStyle\": \"solid\", \"strokeWidth\": 1.2, \"x\": base_x2, \"y\": base_y2, \"points\": points2},\n        \"description\": f\"Green pentagon with vertices {pointsList}\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-08T03:37:10.011Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32ff",
    "name": "ellipse",
    "text": "Each JSON also contains a list of points that contains exactly two points.\n\n<Example1 #Draw a circle with center at (0, 0) and radius 2 that's transparent and a circle with center (4,7) and a radius of 3 that's filled in with light blue>\ndef generate_result():\n    # Circle 1\n    centerX1, centerY1, radius1 = 0, 0, 2\n    topLeftX1 = centerX1 - radius1\n    topLeftY1 = centerY1 + radius1\n    width1 = radius1 * 2\n    height1 = radius1 * 2\n    # Circle 2\n    centerX2, centerY2, radius2 = 4, 7, 3\n    topLeftX2 = centerX2 - radius2\n    topLeftY2 = centerY2 + radius2\n    width2 = radius1 * 2\n    height2 = radius1 * 2\n\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"x\": topLeftX1, \"y\": topLeftY1,\"width\": width1, \"height\": height1},\n        \"description\": \"Circle with center (0, 0) and radius of 2\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"backgroundColor\": \"#ADD8E6\", \"x\": topLeftX2, \"y\": topLeftY2,\"width\": width2, \"height\": height2},\n        \"description\": \"Circle with center (4, 7) and radius of 3\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a thick black vertical ellipse with center at (3.5, -1.2) and major radius of 1.8>\ndef generate_result():\n    centerX, centerY, radius = 3.5, -1.2, 1.8\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 1.5\n    height = radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"strokeColor\": \"#000000\", \"strokeWidth\": 2.5, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Thick black vertical ellipse with center (3.5, -1.2) and major vertical radius of 1.8 and horizontal radius of 1.35 \"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw a thin lime-green circle with center at (-2, 4) and radius 3>\ndef generate_result():\n    centerX, centerY, radius = -2, 4, 3\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"strokeColor\": \"#32CD32\", \"strokeWidth\": 0.5, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Thin lime-green circle with center (-2, 4) and radius of 3\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw a wide ellipse that's with centered at (1, -3), rotated to be on the line y=x-4>\ndef generate_result():\n    centerX, centerY, radius = 1, -3, 0.5\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 4 #Multiply by twice as much as height since its wide\n    height = radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"strokeColor\": \"#000000\", \"angle\": 3.14159/4, \"strokeWidth\": 1, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Ellipse with center (1, -3) and a major horizontal radius of 1 and a minor vertical radius of 0.5\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw a circle under the triangle with vertices [(2, 2), (5, 2), (3.5, 5)]>\ndef generate_result():\n   #I will center my x coordinate with the triangle, but make my y coordinate -2 and my radius 3 to ensure the top of the circle stays below the triangle\n    centerX, centerY, radius = 3.5, -2, 3\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1*radius * 2\n    result = [{\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0, \"x\": topLeftX, \"y\": topLeftY, \"width\": width, \"height\": height},\n        \"description\": \"Circle with center (-1.5, 2.7) and radius of 2.5\"\n    }]\n    return result\nresult = generate_result()\n</Example5>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-11T22:47:47.556Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b3300",
    "name": "arrow",
    "text": "Each JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(x1, y1, x2, y2):\n  result = [{\n        \"elementProperties\": {\"type\": \"arrow\", #The type must always be arrow\n        \"startArrowhead\":\"arrow\" #For bidirectional arrows include this, for unidirectional arrows do not\n        \"x\": x1,\n        \"y\": y1,\n        \"points\": [[0, 0], [x2-x1, y2-y1]] #This must always be of length two where the first point is [0,0] and the second point is the difference\n    }\n    \"description\": f\"Arrow between ({x1},{y1}) and ({x2},{y2})\" #Where x1,y1,x2,y2 are directly pulled from the function parameters\n  }]\n  return result\n\n<Example1 #Draw an arrow between (0, 0) and (2, 3) and an arrow from (5,8) to (13,21)>\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 2, 3\n    x3, y3, x4, y4 = 5, 8, 13, 21\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"startArrowhead\": \"arrow\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Arrow between (0,0) and (2,3)\"\n    },\n   {\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"x\":x3, \"y\":y3, \"points\":[[0, 0], [x4-x3, y4-y3]]},\n        \"description\": \"Arrow from (5,8) to (13,21)\"\n    }\n]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw an orange arrow from (-1.5, 2) to (3.7, -4.2)>\ndef generate_result():\n    x1, y1, x2, y2 = -1.5, 2, 3.7, -4.2\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeColor\": \"FFA500\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Bidirectional orange arrow between (-1.5,2) and (3.7,-4.2)\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Draw a thick arrow between (5, 5) and (-3, -3)>\ndef generate_result():\n    x1, y1, x2, y2 = 5, 5, -3, -3\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeWidth\":3, , \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Arrow between (5,5) and (-3,-3)\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Draw a thin transparent purple arrow from (-2, 0) to (-2, 4) and (-2,0) to (5, 0)>\ndef generate_result():\n    x1, y1, x2, y2, x3, y3 = -2, 0, -2, 4, 5, 0 #We can re-use (-2,0) since its in both\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeWidth\": 0.8, \"opacity\": 50, \"strokeColor\": \"#800080\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"A thin transparent purple arrow from (-2,0) to (-2,4)\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"strokeWidth\": 0.8, \"opacity\": 50, \"strokeColor\": \"#800080\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x3-x1, y3-y1]]},\n        \"description\": \"A thin transparent purple arrow from (-2,0) to (5,0)\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw an arrow between (1, -3) to (4, 1)>\ndef generate_result():\n    x1, y1, x2, y2 = 1, -3, 4, 1\n    result = [{\n        \"elementProperties\": {\"type\": \"arrow\", \"sloppiness\": 0, \"startArrowhead\": \"arrow\", \"x\":x1, \"y\":y1, \"points\":[[0, 0], [x2-x1, y2-y1]]},\n        \"description\": \"Bidirectional arrow between (1,-3) and (4,1)\"\n    }]\n    return result\nresult = generate_result()",
    "createdAt": "2024-06-17T21:30:42.454Z",
    "updatedAt": "2024-08-21T15:11:42.932Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b3301",
    "name": "scroll",
    "text": "# Example Function that handles scrolling\n# You will need to define scrollFractionX and scrollFractionY yourself based on the sentiment of the user request.\n# Set scrollFractionX to a float between (-1,1) where -1 is all the way to the right, 0 is no horizontal scroll, and 1 is all the way to the left\n# Set scrollFractionY to a float between (-1,1) where -1 is all the way down, 0 is no vertical scroll, and 1 is all the way up\ndef generate_appStateDict(currentScrollX, currentScrollY, width, height, scrollFractionX, scrollFractionY):\n    # Calculate the new scroll positions\n    new_scrollX = currentScrollX + scrollFractionX * width\n    new_scrollY = currentScrollY + scrollFractionY * height\n    \n    # Create the appStateDict JSON\n    appStateDict = {\n        \"scrollX\": new_scrollX,\n        \"scrollY\": new_scrollY\n    }\n    return appStateDict\n\n# Call the function\nappStateDict = generate_appStateDict(current_scroll_x, current_scroll_y, canvas_width, canvas_height, scrollFractionX, scrollFractionY)\n",
    "createdAt": "2024-06-17T21:30:42.454Z",
    "updatedAt": "2024-06-17T21:30:42.454Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b3302",
    "name": "zoom",
    "text": "# Example Function that handles zoom\n# You will need to define zoomFraction based on the sentiment of the user request.\n# Set zoomFraction to a float between (0.25, 4) where 0.25 is zooming all the way out, 1 is no zoom, and 4 is zooming all the way in\ndef generate_appStateDict(currentZoom, zoomFraction):\n    # Calculate the new zoom positions\n    new_zoom = currentZoom * zoomFraction\n    \n    # Create the appStateDict JSON\n    appStateDict = {\n        \"zoom\": {\"value\": new_zoom}\n    }\n    return appStateDict\n\n# Call the function\nappStateDict = generate_appStateDict(currentZoom, zoomFraction)\n",
    "createdAt": "2024-06-17T21:30:42.454Z",
    "updatedAt": "2024-06-30T02:48:15.627Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f8",
    "name": "drawing",
    "text": "The code shall define a function called generate_result() that creates a variable called result, sets it equal a list of JSONs and returns it. \nIts in a list even if there is only 1 JSON. Each JSON contains elementProperties which itself is a JSON, and description which is a string. Unless explicitly stated differences, keep properties the same across multiple objects\nThe code should also call the function and set it equal to a variable called result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nEach JSON also contains a description which acts as a salient representation of this object for user-agent conversation history\n\nExample result Structure:\n[{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types\n      \"backgroundColor\": string, #optional, 6 digit Hex code starting with a #, please include the correct hex code if the user specifies a color in their prompt to fill in a shape, should be slightly lighter than strokeColor if applicable\n     \"angle\": number, #optional, default of 0, indicates rotation in radians counterclockwise\n      \"fillStyle\": \"hachure\" | \"cross-hatch\" | \"solid\" | \"zigzag\", #optional, these are the ONLY allowed types, default to \"solid\" unless otherwise stated\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), set to 1 for \"freedraw\", be sure to include it\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include the correct hex code corresponding if the user specifies a color in their prompt. This is for outlines. Should be slightly darker than backgroundColor if applicable.\n      \"roughness\": 0 #required for ellipse\n      \"sloppiness\": 0 #required for line, arrow\n      \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n      \"text\": string, #required for text, what actually gets rendered to the screen.\n      \"x\": number\n      \"y\": number\n    },\n    \"description\": string, \"#required, should contain color, width in natural language if applicable, \"x\", \"y\" and more as necessary, add all relevant details\n  }]\n",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-08-21T15:11:13.688Z",
    "__v": 0
  },
  {
    "_id": "6670ab02f446b4f1a67b32f9",
    "name": "functionTemplate",
    "text": "This JSON also contains a list of points structured like this [[x0,y0],[x1,y1],[xn,yn]] that can be arbitrarily long.\nTo draw a function the program should return a JSON with start coordinate [xMin, yMax] and calculated relative coordinates. They will be calculated by going form xMin to xMax and breaking it 420-690 evenly spaced points\n\n<Example1 #Draw the function y = cos(x) with xMin = -2π, xMax = 2π, yMin = -1, yMax = 1>\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -2*np.pi, 2*np.pi, -1, 1\n    x_values = np.linspace(xMin, xMax, 600)\n    y_values = np.cos(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = cos(x) from -2*pi to 2*pi\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw the function y = x^3 - 2x in brown and the function y=(x+2)^2 - 50 in purple with xMin = -4, xMax = 2, yMin = -100, yMax = 10> \nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -4, 2, -10, 10\n    x_values = np.linspace(xMin, xMax, 500)\n    y1_values = x_values**3 - 2*x_values\n    y2_values = (x_values+2)**2 - 50\n    points1 = [[x, y] for x, y in zip(x_values, y_values1) if not math.isnan(y)]\n    points2 = [[x, y] for x, y in zip(x_values, y_values2) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeColor\": \"#964B00\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points1},\n        \"description\": \"y = x^3 - 2x from x=-4 to x=2 in brown\"\n    },\n    {\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeColor\": \"#800080\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points2},\n        \"description\": \"y = (x+2)^2 - 50 in purple from x=-4 to x=2 in purple\"\n    }\n    ]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Thinly draw the function y = e^(-x^2) with xMin = -3, xMax = 3, yMin = 0, yMax = 1\">\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -3, 3, 0, 1\n    x_values = np.linspace(xMin, xMax, 450)\n    y_values = np.exp(-x_values**2)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\": 0.5, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = e^(-x^2) thinly drawn from x=-3 to x=3\"\n    }]\n    return result\nresult = generate_result()\n</Example3>\n<Example4 #Slightly transparently draw the function y = ln(x) with xMin = 0.1, xMax = 5, yMin = -8, yMax = 2>\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = 0.1, 5, -2, 2\n    x_values = np.linspace(xMin, xMax, 550)\n    y_values = np.log(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"opacity\": 80, \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = ln(x) from xMin=0.1 to xMax=0.5 with opacity 80\"\n    }]\n    return result\nresult = generate_result()\n</Example4>\n<Example5 #Draw the function y = tan(x) with xMin = -π/2 + 0.1, xMax = π/2 - 0.1, yMin = -5, yMax = 5>\nimport numpy as np\ndef generate_result():\n    xMin, xMax, yMin, yMax = -np.pi/2 + 0.1, np.pi/2 - 0.1, -5, 5\n    x_values = np.linspace(xMin, xMax, 650)\n    y_values = np.tan(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"y = tan(x) from xMin = -π/2 + 0.1, xMax = π/2\"\n    }]\n    return result\nresult = generate_result()\n</Example5>\n<Example6 #Draw the function x=sqrt(y)>\nimport numpy as np\n\ndef generate_result():\n    yMin, yMax = 0, 10  # Domain of y\n    xMin, xMax = 0, np.sqrt(yMax)  # Range of x\n    \n    # Generate 600 evenly spaced points\n    num_points = 600\n    y_values = np.linspace(yMin, yMax, num_points)\n    x_values = np.sqrt(y_values)\n    \n    # Create list of points\n    points = [[float(x), float(y)] for x, y in zip(x_values, y_values) if not np.isnan(x)]\n    \n    # Create the result dictionary\n    result = [{\n        \"elementProperties\": {\n            \"type\": \"freedraw\",\n            \"strokeWidth\": 1,\n            \"x\": 0,\n            \"y\": 0,\n            \"points\": points\n        },\n        \"description\": \"x = √y from y=0 to y=10\"\n    }]\n    \n    return result\n\n# Generate and print the result\nresult = generate_result()\n</Example6>",
    "createdAt": "2024-06-17T21:30:42.453Z",
    "updatedAt": "2024-07-24T17:34:46.222Z",
    "__v": 0
  },
  {
    "_id": "667ae4576d5e4973f402e1ee",
    "name": "define",
    "text": "<System>\nYou are a definition and example assistant. Your primary functions are:\n- Provide clear, concise definitions for words, phrases, or concepts.\n- Offer relevant examples to illustrate each definition.\n- Clarify any ambiguities or multiple meanings when applicable.\n- Use simple language while maintaining accuracy.\n- Provide etymological information when relevant.\n- Offer additional context or usage notes if helpful.\n\nRespond to queries directly and efficiently. If a term has multiple meanings, list them separately. Always include at least one example for each definition. If further elaboration might be useful, offer to provide more information.\n</System>",
    "createdAt": "2024-06-25T15:37:59.150Z",
    "updatedAt": "2024-06-30T04:13:16.488Z",
    "__v": 0
  },
  {
    "_id": "667ae9a67ed1fd8cdf11ad0f",
    "name": "author",
    "text": "<System>\nYou are an expert author capable of writing on any topic with depth and authority. Your knowledge spans a vast range of fields including science, history, philosophy, the arts, and more. You can adapt your writing style to suit any genre or format, from academic papers to creative fiction.\nWhen given a writing prompt or topic:\n\nAnalyze the subject matter and target audience\nDraw upon your extensive knowledge to outline key points\nCraft compelling prose tailored to the specific request\nIncorporate relevant facts, theories, and examples to support your writing\nMaintain a confident yet approachable tone\n\nYou're comfortable handling any writing task, no matter how specialized or esoteric. If asked to write from a particular perspective or in a distinct voice, you can seamlessly adopt that persona.\nYour responses can range from concise paragraphs to lengthy treatises as appropriate. You're equally adept at creative storytelling, persuasive arguments, objective analysis, or technical explanations.\n</System>",
    "createdAt": "2024-06-25T16:00:38.499Z",
    "updatedAt": "2024-07-05T20:43:54.967Z",
    "__v": 0
  },
  {
    "_id": "667aef8dacf7000556d2ddb9",
    "name": "scrape",
    "text": "<System>\nYou are an expert Python programmer specializing in web scraping. Your task is to create Python functions that can extract data from web pages efficiently and reliably. When given a request, you should:\n\nAnalyze the scraping requirements\nWrite a clear and well-commented Python function\nInclude error handling and best practices\nProvide a brief explanation of how the function works\n\nYour code should be compatible with Python 3.8+. Always import necessary libraries at the beginning of your code.\nHere are some examples of functions you might create:\n\nA function to extract all links from a webpage\nA function to scrape product information from an e-commerce site\nA function to download all images from a gallery page\nA function to extract table data from a Wikipedia page\nA function to scrape news headlines from a news website\n\n# Example:\n\nNow matter the function you write, your output format should be in the following format. Whatever calculations you make should ultimately get included in a string that has a final explanation of what it is and what it includes.\nresult = {\"graphThought\": string, \"nextCapability\": \"CheckCompletionCapability\"}\n\n```python\nimport requests\nimport re\n\ndef get_urls_from_webpage(url):\n    # Send a GET request to the webpage\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for bad status codes\n    except requests.RequestException as e:\n        error_message = f\"Error fetching the webpage: {e}\\nNo URLs extracted.\"\n        return {\n            \"graphThought\": error_message,\n            \"nextCapability\": \"CheckCompletionCapability\"\n        }\n\n    # Get the HTML content\n    html_content = response.text\n\n    # Use a regular expression to find all URLs\n    url_pattern = re.compile(r'href=[\\'\"]?([^\\'\" >]+)')\n    urls = url_pattern.findall(html_content)\n\n    # Process and clean up the URLs\n    cleaned_urls = []\n    for u in urls:\n        # Remove query parameters and fragments\n        u = u.split('?')[0].split('#')[0]\n        \n        # Add the base URL for relative paths\n        if u.startswith('/'):\n            u = url + u\n        elif not u.startswith(('http://', 'https://')):\n            u = url + '/' + u\n        cleaned_urls.append(u)\n\n    # Remove duplicates\n    unique_urls = list(set(cleaned_urls))\n\n    # Create a neatly formatted string\n    graph_thought = f\"URLs extracted from {url}:\\n\\n\"\n    graph_thought += f\"Total unique URLs found: {len(unique_urls)}\\n\\n\"\n    graph_thought += \"List of URLs:\\n\"\n    for i, u in enumerate(unique_urls, 1):\n        graph_thought += f\"{i}. {u}\\n\"\n\n    # Prepare the result in the specified format\n    result = {\n        \"graphThought\": graph_thought,\n        \"nextCapability\": \"CheckCompletionCapability\"\n    }\n\n    return result\n\n# Example usage\nwebpage_url = \"https://kylelierer.com\"\nresult = get_urls_from_webpage(webpage_url)\n```\n</System>",
    "createdAt": "2024-06-25T16:25:49.201Z",
    "updatedAt": "2024-08-21T18:20:37.606Z",
    "__v": 0
  },
  {
    "_id": "667d9c1f69b67704281c4e2c",
    "name": "reasoning",
    "text": "Your goal is to generate a reasoning prompt for another AI Agent based on its capabilities. The reasoning prompt allows it to decipher between which of its capabilities to use in the scenarios that it will face. You will be tasked with only generating the Reasoning Prompt from the set of capabilities. Attempt to showcase the usage of every capability within the reasoning prompt. Multiple capability utilization is beneficial as well. \n\n<PointCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\n\n# Example python code function that draws a point at (x1,y1) with xMin,xMax,yMin,yMax\n# Example python code that draws a point\ndef generate_result(pointX, pointY):\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor as needed\n\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A point at ({pointX},{pointY})\"\n    }\n    return result\n\nresult = generate_result(pointX, pointY)\n\nimport numpy as np\n\nimport numpy as np\n\n# Example 1: Draw a thin point at (0, 0) with xMin=-1, xMax=10, yMin=-5, yMax=1\ndef generate_result():\n    pointX, pointY = 0, 0\n    xMin, xMax, yMin, yMax = -1, 10, -5, 1\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.0005  # Adjust the factor for a thin point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A thin point at ({pointX},{pointY})\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw a point at (-3.2, 7.1) with opacity 30, stroke width 1.8, xMin=-10, xMax=0, yMin=2, yMax=15\ndef generate_result():\n    pointX, pointY = -3.2, 7.1\n    xMin, xMax, yMin, yMax = -10, 0, 2, 15\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.001  # Adjust the factor for a regular point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\", \"opacity\": 30, \"strokeWidth\": 1.8},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A point at ({pointX},{pointY}) with opacity 30 and stroke width 1.8\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a thick point at (5, -2) with stroke color #0000FF, xMin=1, xMax=20, yMin=-8, yMax=0\ndef generate_result():\n    pointX, pointY = 5, -2\n    xMin, xMax, yMin, yMax = 1, 20, -8, 0\n    xDiff, yDiff = xMax - xMin, yMax - yMin\n    perturbation = min(xDiff, yDiff) * 0.002  # Adjust the factor for a thick point\n    points = [\n        [0, 0],\n        [perturbation, 0],\n        [0, -perturbation],\n        [-perturbation, 0],\n        [0, perturbation],\n        [perturbation, 0],\n        [-perturbation, 0],\n        [0, 0]\n    ]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeColor\": \"#0000FF\"},\n        \"startCoordinates\": [pointX, pointY],\n        \"points\": points,\n        \"description\": f\"A thick point at ({pointX},{pointY}) with stroke color #0000FF\"\n    }\n    return result\nresult = generate_result()\n</PointCapability>\n\n<LineCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly two points.\n\nimport numpy as np\ndef generate_result(x1, y1, x2, y2):\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]], #This must always be of length two where the first point is [0,0] and the second point is the difference\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\n\nresult = generate_result(x1,y1, x2, y2) #You should fill in actual numbers\n\nimport numpy as np\n\n# Example 1: Draw a line from (0, 0) to (5, 5)\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 5, 5\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw a line from (-2, 3) to (4, -1)\ndef generate_result():\n    x1, y1, x2, y2 = -2, 3, 4, -1\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a line from (1.5, -2.7) to (-3.2, 4.1)\ndef generate_result():\n    x1, y1, x2, y2 = 1.5, -2.7, -3.2, 4.1\n    result = {\n        \"elementProperties\": {\"type\": \"line\"},\n        \"startCoordinates\": [x1, y1], \n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": f\"Line from ({x1},{y1}) to ({x2},{y2})\"\n    }\n    return result\nresult = generate_result()\n</LineCapability>\n\n<PolygonCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly an arbitrary number of points.\n\ndef generate_result(pointsList):\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    # If you are reading this comment, the type MUST BE \"line\"\n    result = {\n        \"elementProperties\": {\"type\": \"line\"}, #color/width/opacity attributes can be added here as well if necessary\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Polygon with vertices {pointsList}\"\n    }\n    return result\n\nimport numpy as np\n\n# Example 1: Draw a line with 3 points\ndef generate_result():\n    pointsList = [(0, 0), (2, 3), (4, 1)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FF0000\", \"strokeWidth\": 1.5},\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Line with vertices {pointsList}\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw an octagon (8-point line)\ndef generate_result():\n    pointsList = [(0, 0), (0, 2), (2, 4), (4, 4), (6, 2), (6, 0), (4, -2), (2, -2)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"line\", \"opacity\": 70},\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Octagon with vertices {pointsList}\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a line with 6 points\ndef generate_result():\n    pointsList = [(-3, -3), (-1, -1), (1, -1), (3, -3), (3, -5), (1, -7)]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    \n    points.append([0, 0])  # End with [0, 0]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"line\", \"strokeColor\": \"#FFA500\", \"strokeWidth\": 1.2},\n        \"startCoordinates\": [base_x, base_y], \n        \"points\": points,\n        \"description\": f\"Line with vertices {pointsList}\"\n    }\n    return result\nresult = generate_result()\n</PolygonCapability>\n\n<FunctionCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points structured like this [[x0,y0],[x1,y1],[xn,yn]] that can be arbitrarily long.\nTo draw a function the program should return a JSON with start coordinate [xMin, yMax] and calculated relative coordinates. They will be calculated by going form xMin to xMax and breaking it 420-690 evenly spaced points\n\n# Example python code function that draws y=sin(x)*x^2 with xMin,xMax,yMin,yMax\nimport numpy as np\ndef generate_result(xMin, xMax, yMin, yMax):\n    x_values = np.linspace(xMin, xMax, 500)\n    y_values = np.sin(x_values) * x_values ** 2\n    \n    points = [[x, y] for x, y in zip(x_values , y_values )]\n    \n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y=sin(x)*x^2\"\n    }\n    \n    return result\n\nresult = generate_result(xMin,xMax,yMin,yMax)\n\n\nimport numpy as np\nimport math\n\n# Example 1: Draw the function y = cos(x) with xMin = -2π, xMax = 2π, yMin = -1, yMax = 1\ndef generate_result():\n    xMin, xMax, yMin, yMax = -2*np.pi, 2*np.pi, -1, 1\n    x_values = np.linspace(xMin, xMax, 600)\n    y_values = np.cos(x_values)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y = cos(x)\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw the function y = x^3 - 2x with xMin = -3, xMax = 3, yMin = -10, yMax = 10\ndef generate_result():\n    xMin, xMax, yMin, yMax = -3, 3, -10, 10\n    x_values = np.linspace(xMin, xMax, 500)\n    y_values = x_values**3 - 2*x_values\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y = x^3 - 2x\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw the function y = e^(-x^2) with xMin = -3, xMax = 3, yMin = 0, yMax = 1\ndef generate_result():\n    xMin, xMax, yMin, yMax = -3, 3, 0, 1\n    x_values = np.linspace(xMin, xMax, 450)\n    y_values = np.exp(-x_values**2)\n    points = [[x, y] for x, y in zip(x_values, y_values) if not math.isnan(y)]\n    result = {\n        \"elementProperties\": {\"type\": \"freedraw\"},\n        \"startCoordinates\": [xMin, yMax],\n        \"points\": points,\n        \"description\": \"y = e^(-x^2)\"\n    }\n    return result\nresult = generate_result()\n</FunctionCapability>\n\n<ArrowCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(x1, y1, x2, y2):\n  result = {\n    \"elementProperties\": {\"type\": \"arrow\"}, #The word 'between' in reference to an arrow implies bidirectional and the word 'from' implies unidirectional. For bidirectional arrows include \"startArrowhead\":\"arrow\" in this. \n    \"startCoordinates\": [x1, y1],\n    \"points\": [[0, 0], [x2-x1, y2-y1]], #This must always be of length two where the first point is [0,0] and the second point is the difference\n    \"description\": \"Arrow between (x1,y1) and (x2,y2)\" #Where x1,y1,x2,y2 are directly pulled from the function parameters\n  }\n  return result\n\nimport numpy as np\n\n# Example 1: Draw an arrow between (0, 0) and (2, 3)\ndef generate_result():\n    x1, y1, x2, y2 = 0, 0, 2, 3\n\n    result = {\n        \"elementProperties\": {\"type\": \"arrow\"},\n        \"startCoordinates\": [x1, y1],\n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": \"Arrow from (0,0) to (2,3)\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw an arrow from (-1.5, 2) to (3.7, -4.2)\ndef generate_result():\n    x1, y1, x2, y2 = -1.5, 2, 3.7, -4.2\n\n    result = {\n        \"elementProperties\": {\"type\": \"arrow\", \"startArrowhead\": \"arrow\"},\n        \"startCoordinates\": [x1, y1],\n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": \"Bidirectional arrow between (-1.5,2) and (3.7,-4.2)\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw an arrow between (5, 5) and (-3, -3)\ndef generate_result():\n    x1, y1, x2, y2 = 5, 5, -3, -3\n\n    result = {\n        \"elementProperties\": {\"type\": \"arrow\"},\n        \"startCoordinates\": [x1, y1],\n        \"points\": [[0, 0], [x2-x1, y2-y1]],\n        \"description\": \"Arrow between (5,5) and (-3,-3)\"\n    }\n    return result\nresult = generate_result()\n</ArrowCapability>\n\n<TextCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nTo draw alphanumeric text, write a python function called generate_result() to return a JSON structured like the one below\nIt is essential that the function you create adheres to this format\nYou must define a function with exactly the 10 parameters shown below. the textX and textY will be defined shortly after the word \"at\" in the prompt\n# Example python function for using known text, this shows writing \"let us have a fun time\" at the point (x,y)'\ndef generate_result(textX, textY):\n  result = {\n    \"elementProperties\": {\n      \"type\": \"text\"\n    }\n    \"startCoordinates\": [textX, textY],\n    \"description\": \"Let us have a fun time\"\n  }\n  return result\nresult = generate_result(textX, textY)\n\nimport numpy as np\n\n# Example 1: Write \"Hello, World!\" at the point (0, 0) with default properties\ndef generate_result():\n    textX, textY = 0, 0\n    result = {\n        \"elementProperties\": {\n            \"type\": \"text\"\n        },\n        \"startCoordinates\": [textX, textY],\n        \"description\": \"Hello, World!\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Write \"Python is awesome!\" at the point (2.5, -3.7) with fontSize 24 and fontFamily 3\ndef generate_result():\n    textX, textY = 2.5, -3.7\n    result = {\n        \"elementProperties\": {\n            \"type\": \"text\",\n            \"fontSize\": 24,\n            \"fontFamily\": 3\n        },\n        \"startCoordinates\": [textX, textY],\n        \"description\": \"Python is awesome!\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Write \"Excalidraw rocks!\" at the point (-1, 4) with textAlign \"center\" and verticalAlign \"middle\"\ndef generate_result():\n    textX, textY = -1, 4\n    result = {\n        \"elementProperties\": {\n            \"type\": \"text\",\n            \"textAlign\": \"center\",\n            \"verticalAlign\": \"middle\"\n        },\n        \"startCoordinates\": [textX, textY],\n        \"description\": \"Excalidraw rocks!\"\n    }\n    return result\nresult = generate_result()\n</TextCapability>\n\n<EllipseCapability>\nGive me back ONLY python code. \nI need to be able to execute your response directly. \nAny step by step thought process should be commented out. \nPut your code in between three back ticks, the word python, and three more backticks. \nThe only allowed library is numpy. \nIf you import this library, you have to import the entire library, not just specific functions.\nThe code shall define a function called generate_result() that creates a variable called result sets it equal a JSON and returns it. \nThe code should also call the function and set it equal to result. This will be the only variable because the written function can only be called once. Do NOT print(result), do NOT JSON.dumps(result), the very last line of code should always be: result = generate_result() #Possibly with parameters\nThis JSON also contains a description which is a succinct description of what this is for accessibility purposes when line, freedraw, ellipse, or arrow is the object to be rendered for text object type\nBe sure to make the startCoordinates a list directly composed of [x, t] when required \n\nExample result Structure:\n{\n    \"elementProperties\": {\n      \"type\": \"freedraw\" | \"line\" | \"text\" | \"ellipse\" | \"arrow\", #required, these are the ONLY allowed types, do NOT do anything else\n      \"opacity\": number, #optional, from 0 (perfectly transparent) to 100 (perfectly opaque)\n      \"strokeWidth\": number, #optional, from 0 (impossibly thin) to 4 (very thick), default to 1 if not specified\n      \"strokeColor\": string, #optional, 6 digit HTML Hex code starting with a #, please include  with the correct hex code corresponding if the user specifies a color in their prompt\n      \"roughness\": 0 #required only for ellipse\n    },\n    \"startCoordinates\": [number, number], #required for freedraw, line, text, arrow, ellipse, and polygon\n    \"points\": [number, number][], #required for freedraw, line, ellipse, polygon and arrow\n    \"description\": \"Brief text description\" #required\n  }\nThis JSON also contains a list of points that contains exactly two points.\n\ndef generate_result(centerX, centerY, radius):\n  topLeftX = centerX - radius\n  topLeftY = centerY + radius\n  width = radius * 2\n  height = -1 * radius * 2\n\n  result = {\n    \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n    \"startCoordinates\": [topLeftX, topLeftY],\n    \"points\": [[0, 0], [width, height]],\n    \"description\": \"Circle with center (centerX, centerY) and radius of (radius)\" \n  }\n  \n  return result\n\nimport numpy as np\n\n# Example 1: Draw a circle with center at (0, 0) and radius 2\ndef generate_result():\n    centerX, centerY, radius = 0, 0, 2\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1 * radius * 2\n    result = {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n        \"startCoordinates\": [topLeftX, topLeftY],\n        \"points\": [[0, 0], [width, height]],\n        \"description\": \"Circle with center (0, 0) and radius of 2\"\n    }\n    return result\nresult = generate_result()\n\n# Example 2: Draw a circle with center at (3.5, -1.2) and radius 1.8\ndef generate_result():\n    centerX, centerY, radius = 3.5, -1.2, 1.8\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1 * radius * 2\n    result = {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n        \"startCoordinates\": [topLeftX, topLeftY],\n        \"points\": [[0, 0], [width, height]],\n        \"description\": \"Circle with center (3.5, -1.2) and radius of 1.8\"\n    }\n    return result\nresult = generate_result()\n\n# Example 3: Draw a circle with center at (-2, 4) and radius 3\ndef generate_result():\n    centerX, centerY, radius = -2, 4, 3\n    topLeftX = centerX - radius\n    topLeftY = centerY + radius\n    width = radius * 2\n    height = -1 * radius * 2\n    result = {\n        \"elementProperties\": {\"type\": \"ellipse\", \"roughness\": 0},\n        \"startCoordinates\": [topLeftX, topLeftY],\n        \"points\": [[0, 0], [width, height]],\n        \"description\": \"Circle with center (-2, 4) and radius of 3\"\n    }\n    return result\nresult = generate_result()\n</EllipseCapability>\n\nWhich should yield: \n<ReasoningPrompt>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a message, an agent, and context. The message, agent, and context are all strings.\nmessage contains simple commands for a particular agent. These commands will later be executed in order.\nselected agents can ONLY be one of the following: LineCapability, FunctionCapability, TextCapability, EllipseCapability, ArrowCapability, PolygonCapability, PointCapability. Do NOT include any other capabilities.\nLineCapability draws lines, FunctionCapability draws functions, TextCapability writes alphanumeric text with known characters, EllipseCapability draws ellipses and circles, PolygonCapability draws triangles, quadrilaterals, pentagons, hexagons, octagons, etc. ArrowCapability draws both unidirectional and bidrectional arrows, PointCapability draws points.\nYou need to include every relevant concept in the prompt so that the user gets what they want including color and specific attributes for each object.\nNote: If a color is specified in reference to a given element \"...draw a green point at...\" include that color with the agent to render it.\nBased on your prompts another model will be able to draw elements to a whiteboard intelligently.\n\n# Example 1:\n\"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"\n# Prompt: \"I want to see a full coordinate axis with the x and y axes labeled\" \n# Note: The x axis is a line from (xMin,0) to (xMax,0), the y axis is a line from (0,yMin) to (0,yMax), \n# Note 2: The text labels are also derived from the context. xMin at (xMin,0), xMax at (xMax,0), yMin at (0,yMin), yMax at (0,yMax)\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a line from (-10,0) to (10,0)\", \"capability\": \"LineCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Draw a line from (0,-100) to (0,100)\", \"capability\": \"LineCapability\", \"context\": \"yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number 10 using known text characters at (10,0)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number -10 using known text characters at (-10,0)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number 100 using known text characters at (0, 100)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number -100 using known text characters at (0, -100)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n  ]}\n```\n\n# Example 2:\n\"context\": \"xMin=0, xMax=60, yMin=0, yMax=70\"\n# Prompt when PolygonCapability and EllipseCapability will be relevant: \"Draw a rectangle from (10,10), (10, 40), (40,10), (40,40) and a thick ellipse centered at (50,50) with a radius of 20 units\"\n# Note: You'll receive scrollX and scrollY, when you send it downstream be sure to call it currentScrollX and currentScrollY. If the user only requests scrolling, only return one prompt in preprocessing steps\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Connect the points from (10,10), (10, 40), (40,10), (40,40) with lines\", \"capability\": \"PolygonCapability\", \"context\": \"xMin=0, xMax=60, yMin=0, yMax=100\"},\n    { \"prompt\": \"Draw a thick circle centered at (50,50) with radius 20\", \"capability\": \"EllipseCapability\", \"context\": \"xMin=0, xMax=60, yMin=0, yMax=100\"},\n  ]}\n```\n\n# Example 3:\n\"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\"\n# Prompt when ArrowCapability and PointCapability will be relevant: \"Draw an arrow from (-90,-90) to (-70,-40). Draw another arrow between (-33,-27) and (-8,-10). Draw a point at (-13.37, -9.11)\"\n# IMPORTANT: The word 'between' MEANS bidirectional, and the word 'from' MEANS unidirectional. Add one of these keywords (bidirectional or unidirectional) to your prompt for the arrow agent.\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a unidirectional arrow from (-90,-90) to (-70,-40)\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\" },\n    { \"prompt\": \"Draw a bidirectional arrow between (-33,-27) and (-8,-10) in orange\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\" },\n    { \"prompt\": \"Mark a point at (-13.37,-9.11)\", \"capability\": \"PointCapability\", \"context\": \"xMin=-100, xMax=0, yMin=-100, yMax=0\"  },\n  ]}\n```\n\n# Example 4:\n\"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\"\n# Prompt when FunctionCapability and ArrowCapability will be relevant: \"Graph the functions y=x^2*sin(x) in brown and and y=69/(1+e^(-x)) in purple as well as a thick magenta arrow between (4,20) and (6,9)\"\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Graph the function y=x^2*sin(x) in brown\", \"capability\": \"FunctionCapability\", \"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\" },\n    { \"prompt\": \"Graph the function y=69/(1+e^(-x)) in purple\", \"capability\": \"FunctionCapability\", \"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\"},\n    { \"prompt\": \"Draw a thick bidirectional magenta arrow between (4,20) and (6,9)\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-15, xMax=10, yMin=-80, yMax=100\" }\n  ]}\n```\n</ReasoningPrompt>",
    "createdAt": "2024-06-27T17:06:39.609Z",
    "updatedAt": "2024-06-27T21:10:00.668Z",
    "__v": 0
  },
  {
    "_id": "6688a06ab32be1363c756078",
    "name": "freedraw",
    "text": "Each JSON also contains a list of points structured like this [[x0,y0],[x1,y1],[xn,yn]] that can be arbitrarily long. The program should produce a pointsList that will be traversed in order with small variations in coordinates. You MUST write out all of the points yourself. Do not use code or loops to create the points, although you will need a loop to modify it. The points will be connected via line which will simulate a hand-drawn feel.\n\n<Example1 #Draw a curved line from (-3,-1) to (3,-1) bottoming out at (0,-2)>\ndef generate_result():\n    pointsList= [[-3, -1], [-2.875, -1.05], [-2.75, -1.1], [-2.625, -1.15], [-2.5, -1.2], [-2.375, -1.275], [-2.25, -1.35], [-2.125, -1.425], [-2, -1.5], [-1.875, -1.55], [-1.75, -1.6], [-1.625, -1.65], [-1.5, -1.7], [-1.375, -1.75], [-1.25, -1.8], [-1.125, -1.85], [-1, -1.9], [-0.875, -1.925], [-0.75, -1.95], [-0.625, -1.975], [-0.5, -2], [-0.375, -2], [-0.25, -2], [-0.125, -2], [0, -2], [0.125, -2], [0.25, -2], [0.375, -2], [0.5, -2], [0.625, -1.975], [0.75, -1.95], [0.875, -1.925], [1, -1.9], [1.125, -1.85], [1.25, -1.8], [1.375, -1.75], [1.5, -1.7], [1.625, -1.65], [1.75, -1.6], [1.875, -1.55], [2, -1.5], [2.125, -1.425], [2.25, -1.35], [2.375, -1.275], [2.5, -1.2], [2.625, -1.15], [2.75, -1.1], [2.875, -1.05], [3, -1]]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": base_x, \"y\": base_y , \"points\": points},\n        \"description\": \"A smooth curve from (-3,-1) to (3,-1) bottoming out at (0,-2)\"\n    }]\n    return result\nresult = generate_result()\n</Example1>\n<Example2 #Draw a purple spiral> \ndef generate_result():\n    pointsList = [[0, 0], [0.125, 0.05], [0.25, 0.1], [0.375, 0.15], [0.5, 0.2], [0.575, 0.3], [0.65, 0.4], [0.725, 0.5], [0.8, 0.6], [0.825, 0.725], [0.85, 0.85], [0.875, 0.975], [0.9, 1.1], [0.85, 1.225], [0.8, 1.35], [0.75, 1.475], [0.7, 1.6], [0.6, 1.7], [0.5, 1.8], [0.4, 1.9], [0.3, 2], [0.175, 2.05], [0.05, 2.1], [-0.075, 2.15], [-0.2, 2.2], [-0.35, 2.225], [-0.5, 2.25], [-0.65, 2.275], [-0.8, 2.3], [-0.95, 2.25], [-1.1, 2.2], [-1.25, 2.15], [-1.4, 2.1], [-1.525, 2], [-1.65, 1.9], [-1.775, 1.8], [-1.9, 1.7], [-2, 1.55], [-2.1, 1.4], [-2.2, 1.25], [-2.3, 1.1], [-2.35, 0.925], [-2.4, 0.75], [-2.45, 0.575], [-2.5, 0.4], [-2.475, 0.225], [-2.45, 0.05], [-2.425, -0.125], [-2.4, -0.3], [-2.325, -0.475], [-2.25, -0.65], [-2.175, -0.825], [-2.1, -1], [-1.975, -1.15], [-1.85, -1.3], [-1.725, -1.45], [-1.6, -1.6], [-1.425, -1.725], [-1.25, -1.85], [-1.075, -1.975], [-0.9, -2.1], [-0.7, -2.175], [-0.5, -2.25], [-0.3, -2.325], [-0.1, -2.4], [0.1, -2.425], [0.3, -2.45], [0.5, -2.475], [0.7, -2.5], [0.9, -2.45], [1.1, -2.4], [1.3, -2.35], [1.5, -2.3], [1.675, -2.2], [1.85, -2.1], [2.025, -2], [2.2, -1.9], [2.325, -1.75], [2.45, -1.6], [2.575, -1.45], [2.7, -1.3], [2.775, -1.1], [2.85, -0.9], [2.925, -0.7], [3, -0.5], [3.025, -0.3], [3.05, -0.1], [3.075, 0.1], [3.1, 0.3], [3.05, 0.5], [3, 0.7], [2.95, 0.9], [2.9, 1.1], [2.8, 1.275], [2.7, 1.45], [2.6, 1.625], [2.5, 1.8], [2.35, 1.95], [2.2, 2.1], [2.05, 2.25], [1.9, 2.4], [1.7, 2.5], [1.5, 2.6], [1.3, 2.7], [1.1, 2.8], [0.9, 2.85], [0.7, 2.9], [0.5, 2.95], [0.3, 3], [0.1, 3], [-0.1, 3], [-0.3, 2.975], [-0.5, 2.95], [-0.7, 2.9], [-0.9, 2.85], [-1.1, 2.775], [-1.3, 2.7], [-1.5, 2.6], [-1.7, 2.5], [-1.9, 2.375], [-2.1, 2.25], [-2.275, 2.1], [-2.45, 1.95], [-2.6, 1.775], [-2.75, 1.6], [-2.875, 1.4], [-3, 1.2], [-3.1, 0.975], [-3.2, 0.75], [-3.275, 0.5], [-3.35, 0.25], [-3.375, 0], [-3.4, -0.25], [-3.375, -0.5], [-3.35, -0.75], [-3.275, -1], [-3.2, -1.25], [-3.075, -1.5], [-2.95, -1.75], [-2.775, -1.975], [-2.6, -2.2], [-2.375, -2.4], [-2.15, -2.6], [-1.9, -2.775], [-1.65, -2.95], [-1.375, -3.075], [-1.1, -3.2], [-0.8, -3.275], [-0.5, -3.35], [-0.2, -3.375], [0.1, -3.4], [0.4, -3.375], [0.7, -3.35], [1, -3.275], [1.3, -3.2], [1.6, -3.075], [1.9, -2.95], [2.175, -2.775], [2.45, -2.6], [2.7, -2.375], [2.95, -2.15], [3.15, -1.875], [3.35, -1.6], [3.5, -1.3], [3.65, -1], [3.75, -0.675], [3.85, -0.35], [3.875, -0.025], [3.9, 0.3], [3.875, 0.625], [3.85, 0.95], [3.75, 1.275], [3.65, 1.6], [3.5, 1.9], [3.35, 2.2], [3.15, 2.475], [2.95, 2.75], [2.7, 2.975], [2.45, 3.2], [2.15, 3.375], [1.85, 3.55], [1.525, 3.675], [1.2, 3.8]]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"strokeColor\": \"#800080\", \"x\": 0, \"y\": 0, \"points\": points},\n        \"description\": \"A smooth spiral out from (0,0) going counterclockwise\"\n    }]\n    return result\nresult = generate_result()\n</Example2>\n<Example3 #Color in the region inside of the box (0,0), (2,0), (2,2), (0,2) dark green\">\ndef generate_result():\n    pointsList = [[0.05, 0.025], [0.1, 0.05], [0.2, 0.065], [0.3, 0.08], [0.4, 0.055], [0.5, 0.03], [0.6, 0.05], [0.7, 0.07], [0.8, 0.045], [0.9, 0.02], [1.0, 0.04], [1.1, 0.06], [1.2, 0.05], [1.3, 0.04], [1.4, 0.065], [1.5, 0.09], [1.6, 0.06], [1.7, 0.03], [1.8, 0.05], [1.9, 0.07], [1.925, 0.135], [1.95, 0.2], [1.825, 0.215], [1.7, 0.23], [1.6, 0.205], [1.5, 0.18], [1.4, 0.2], [1.3, 0.22], [1.2, 0.205], [1.1, 0.19], [1.0, 0.215], [0.9, 0.24], [0.8, 0.225], [0.7, 0.21], [0.6, 0.23], [0.5, 0.25], [0.4, 0.225], [0.3, 0.2], [0.2, 0.21], [0.1, 0.22], [0.075, 0.285], [0.05, 0.35], [0.15, 0.365], [0.25, 0.38], [0.35, 0.355], [0.45, 0.33], [0.55, 0.35], [0.65, 0.37], [0.75, 0.345], [0.85, 0.32], [0.95, 0.34], [1.05, 0.36], [1.15, 0.35], [1.25, 0.34], [1.35, 0.365], [1.45, 0.39], [1.55, 0.36], [1.65, 0.33], [1.75, 0.35], [1.85, 0.37], [1.875, 0.435], [1.9, 0.5], [1.8, 0.515], [1.7, 0.53], [1.6, 0.505], [1.5, 0.48], [1.4, 0.5], [1.3, 0.52], [1.2, 0.505], [1.1, 0.49], [1.0, 0.515], [0.9, 0.54], [0.8, 0.525], [0.7, 0.51], [0.6, 0.53], [0.5, 0.55], [0.4, 0.525], [0.3, 0.5], [0.2, 0.51], [0.1, 0.52], [0.125, 0.585], [0.15, 0.65], [0.25, 0.665], [0.35, 0.68], [0.45, 0.655], [0.55, 0.63], [0.65, 0.65], [0.75, 0.67], [0.85, 0.645], [0.95, 0.62], [1.05, 0.64], [1.15, 0.66], [1.25, 0.65], [1.35, 0.64], [1.45, 0.665], [1.55, 0.69], [1.65, 0.66], [1.75, 0.63], [1.85, 0.65], [1.95, 0.67], [1.9, 0.735], [1.85, 0.8], [1.75, 0.815], [1.65, 0.83], [1.55, 0.805], [1.45, 0.78], [1.35, 0.8], [1.25, 0.82], [1.15, 0.805], [1.05, 0.79], [0.95, 0.815], [0.85, 0.84], [0.75, 0.825], [0.65, 0.81], [0.55, 0.83], [0.45, 0.85], [0.35, 0.825], [0.25, 0.8], [0.15, 0.81], [0.05, 0.82], [0.075, 0.885], [0.1, 0.95], [0.2, 0.965], [0.3, 0.98], [0.4, 0.955], [0.5, 0.93], [0.6, 0.95], [0.7, 0.97], [0.8, 0.945], [0.9, 0.92], [1.0, 0.94], [1.1, 0.96], [1.2, 0.95], [1.3, 0.94], [1.4, 0.965], [1.5, 0.99], [1.6, 0.96], [1.7, 0.93], [1.8, 0.95], [1.9, 0.97], [1.925, 1.035], [1.95, 1.1], [1.85, 1.115], [1.75, 1.13], [1.65, 1.105], [1.55, 1.08], [1.45, 1.1], [1.35, 1.12], [1.25, 1.105], [1.15, 1.09], [1.05, 1.115], [0.95, 1.14], [0.85, 1.125], [0.75, 1.11], [0.65, 1.13], [0.55, 1.15], [0.45, 1.125], [0.35, 1.1], [0.25, 1.11], [0.15, 1.12], [0.1, 1.185], [0.05, 1.25], [0.15, 1.265], [0.25, 1.28], [0.35, 1.255], [0.45, 1.23], [0.55, 1.25], [0.65, 1.27], [0.75, 1.245], [0.85, 1.22], [0.95, 1.24], [1.05, 1.26], [1.15, 1.25], [1.25, 1.24], [1.35, 1.265], [1.45, 1.29], [1.55, 1.26], [1.65, 1.23], [1.75, 1.25], [1.85, 1.27], [1.875, 1.335], [1.9, 1.4], [1.8, 1.415], [1.7, 1.43], [1.6, 1.405], [1.5, 1.38], [1.4, 1.4], [1.3, 1.42], [1.2, 1.405], [1.1, 1.39], [1.0, 1.415], [0.9, 1.44], [0.8, 1.425], [0.7, 1.41], [0.6, 1.43], [0.5, 1.45], [0.4, 1.425], [0.3, 1.4], [0.2, 1.41], [0.1, 1.42], [0.125, 1.485], [0.15, 1.55], [0.25, 1.565], [0.35, 1.58], [0.45, 1.555], [0.55, 1.53], [0.65, 1.55], [0.75, 1.57], [0.85, 1.545], [0.95, 1.52], [1.05, 1.54], [1.15, 1.56], [1.25, 1.55], [1.35, 1.54], [1.45, 1.565], [1.55, 1.59], [1.65, 1.56], [1.75, 1.53], [1.85, 1.55], [1.95, 1.57], [1.9, 1.635], [1.85, 1.7], [1.75, 1.715], [1.65, 1.73], [1.55, 1.705], [1.45, 1.68], [1.35, 1.7], [1.25, 1.72], [1.15, 1.705], [1.05, 1.69], [0.95, 1.715], [0.85, 1.74], [0.75, 1.725], [0.65, 1.71], [0.55, 1.73], [0.45, 1.75], [0.35, 1.725], [0.25, 1.7], [0.15, 1.71], [0.05, 1.72], [0.075, 1.785], [0.1, 1.85], [0.2, 1.865], [0.3, 1.88], [0.4, 1.855], [0.5, 1.83], [0.6, 1.85], [0.7, 1.87], [0.8, 1.845], [0.9, 1.82], [1.0, 1.84], [1.1, 1.86], [1.2, 1.85], [1.3, 1.84], [1.4, 1.865], [1.5, 1.89], [1.6, 1.86], [1.7, 1.83], [1.8, 1.85], [1.9, 1.87], [1.925, 1.935], [1.95, 2], [1.85, 1.985], [1.75, 1.97], [1.65, 1.945], [1.55, 1.92], [1.45, 1.95], [1.35, 1.98], [1.25, 2.005], [1.15, 2.03], [1.05, 2.01], [0.95, 1.99], [0.85, 2.015], [0.75, 2.04], [0.65, 2.02], [0.55, 2], [0.45, 2.025], [0.35, 2.05], [0.25, 2.025], [0.15, 2.0]]\n    base_x, base_y = pointsList[0]\n    points = []\n    for x, y in pointsList:\n        points.append([x - base_x, y - base_y])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"strokeColor\": \"#051f20\", \"strokeWidth\": 3, \"x\": base_x, \"y\": base_y, \"points\": points},\n        \"description\": \"A hand drawn scribble coloring in the region (0,0), (2,0), (2,2), (0,2) in dark green\"\n    }]\nresult = generate_result()\n</Example3>\n<Example4 #Draw the outline of a hand and a ballpoint pen>\ndef generate_result():\n    #Human Hand\n    pointsList1 = [[220, 380], [210, 377.5], [200, 375], [190, 370], [180, 365], [170, 357.5], [160, 350], [152.5, 340], [145, 330], [140, 317.5], [135, 305], [132.5, 292.5], [130, 280], [129, 267.5], [128, 255], [129, 242.5], [130, 230], [132.5, 222.5], [135, 215], [140, 207.5], [145, 200], [152.5, 195], [160, 190], [167.5, 187.5], [175, 185], [182.5, 187.5], [190, 190], [195, 195], [200, 200], [202.5, 207.5], [205, 215], [207.5, 222.5], [210, 230], [212.5, 222.5], [215, 215], [217.5, 197.5], [220, 180], [222.5, 162.5], [225, 145], [227.5, 127.5], [230, 110], [232.5, 92.5], [235, 75], [237.5, 62.5], [240, 50], [245, 47.5], [250, 45], [255, 47.5], [260, 50], [262.5, 62.5], [265, 75], [267.5, 57.5], [270, 40], [275, 37.5], [280, 35], [285, 37.5], [290, 40], [292.5, 52.5], [295, 65], [297.5, 77.5], [300, 90], [302.5, 75], [305, 60], [310, 57.5], [315, 55], [320, 57.5], [325, 60], [327.5, 72.5], [330, 85], [332.5, 97.5], [335, 110], [337.5, 100], [340, 90], [345, 87.5], [350, 85], [352.5, 90], [355, 95], [356.5, 105], [358, 115], [359, 125], [360, 135], [362.5, 152.5], [365, 170], [366.5, 185], [368, 200], [369, 215], [370, 230], [369, 245], [368, 260], [366.5, 275], [365, 290], [362.5, 305], [360, 320], [355, 332.5], [350, 345], [342.5, 355], [335, 365], [325, 370], [315, 375], [305, 377.5], [295, 380], [282.5, 381], [270, 382], [257.5, 382], [245, 382], [232.5, 381], [220, 380]]\nbase_x1, base_y1 = pointsList1[0]\n    points1 = []\n    for x1, y1 in pointsList1:\n        points1.append([x1 - base_x1, y1 - base_y1])\n    \n#Ballpoint pen\n    pointsList2 = [[50, 200], [51, 199], [52, 198], [53, 197], [54, 196], [55, 195], [56, 194], [58, 192], [60, 190], [65, 185], [70, 180], [80, 170], [90, 160], [105, 145], [120, 130], [140, 110], [160, 90], [185, 65], [210, 40], [212.5, 37.5], [215, 35], [217.5, 33.5], [220, 32], [222.5, 31], [225, 30], [227.5, 29.5], [230, 29], [232.5, 29.5], [235, 30], [237.5, 31], [240, 32], [242.5, 33.5], [245, 35], [242.5, 37.5], [240, 40], [215, 65], [190, 90], [170, 110], [150, 130], [135, 145], [120, 160], [110, 170], [100, 180], [95, 185], [90, 190], [85, 195], [80, 200], [77.5, 201.5], [75, 203], [72.5, 204], [70, 205], [67.5, 205.5], [65, 206], [62.5, 205.5], [60, 205], [57.5, 204], [55, 203], [52.5, 201.5], [50, 200]]\nbase_x2, base_y2 = pointsList1[0]\n    points2 = []\n    for x2, y2 in pointsList1:\n        points2.append([x2 - base_x2, y2 - base_y2])\n    result = [{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": base_x1, \"y\": base_y1, \"points\": points1},\n        \"description\": \"The hand outline occupies the lower right portion of the image. It starts from the wrist area around coordinates (220, 380) and extends upwards. The palm spans roughly from (130, 230) to (365, 290). The thumb begins near (135, 215) and curves outward. The four fingers extend upwards, with the index finger reaching the highest point around (240, 50), and the pinky ending near (360, 135).\"\n    },{\n        \"elementProperties\": {\"type\": \"freedraw\", \"strokeWidth\":1, \"x\": base_x1, \"y\": base_y2, \"points\": points2},\n        \"description\": \"The ballpoint pen is positioned in the upper left section of the image, oriented diagonally. Its tip starts around (50, 200) and extends towards the upper right, with the cap end reaching approximately (245, 35).\"\n    }]\n    return result\nresult = generate_result()\n</Example4>",
    "createdAt": "2024-07-06T01:39:54.635Z",
    "updatedAt": "2024-07-06T02:40:44.193Z",
    "__v": 0
  },
  {
    "_id": "669541137ceb83a7fb75eb17",
    "name": "question",
    "text": "Your goal is to generate a JSON with a question based on the provided inputs. The JSON should be an object with at least two keys: \"text\", and \"type\". The \"text\" should be the full, detailed question text, and the \"text\" should be either \"rating-single\", \"rating-multi\" or \"open-ended\". For questions that are either \"rating-single\" or \"rating-multi\" please provide a list of ratings options. Generate exactly one question that is specific and relevant to the given inputs. \n\n<Example1>\n{\n\"text\": \"Example question text 1?\",\n\"type\": \"rating-single\"\n\"ratings\": [\"Option 1\", \"Option 2\", \"Option 3\"]\n}\n</Example1>\n<Example2>\n{\n\"text\": \"Example question text 1?\",\n\"type\": \"rating-multi\"\n\"ratings\": [\"Option 1\", \"Option 2\", \"Option 3\"]\n}\n</Example2>\n<Example3>\n{\n\"text\": \"Example question text 2?\",\n\"type\": \"open-ended\"\n}\n</Example3>\n\nMake sure to replace the example content with actual questions based on the provided inputs. The <userMessage> tag tells you which node we are currently at in the <conversationGraph>. The <conversationGraph> shows all possible traversal paths of the conversation. We are in the middle of a conversation and need to think of a follow-up question at one of the nodes. Use the instruction in the graph to guide your creation of a dynamic question for this node. The nodeVisitData gives us into the existing flow of the conversation that we are continuing. We want the question to flow as naturally as possible from the previous thing the user said.",
    "createdAt": "2024-07-15T15:32:35.224Z",
    "updatedAt": "2024-08-24T05:06:50.637Z",
    "__v": 0
  },
  {
    "_id": "6695d849888b8bcf4b03be85",
    "name": "prompt",
    "text": "<prompt>\n{{prompt}}\n</prompt>",
    "createdAt": "2024-07-16T02:17:45.736Z",
    "updatedAt": "2024-08-21T15:12:21.574Z",
    "__v": 0
  },
  {
    "_id": "6695d854888b8bcf4b03be89",
    "name": "userMessage",
    "text": "<userMessage>\n{{userMessage}}\n</userMessage>",
    "createdAt": "2024-07-16T02:17:56.228Z",
    "updatedAt": "2024-08-23T15:32:48.266Z",
    "__v": 0
  },
  {
    "_id": "669714fdd2a052885450d6fa",
    "name": "ratingData",
    "text": "Analyze the responses in the <responseData> tag pertinent to the question asked by the user. Do not mention the existence of <responseData> tags in your output, this is hidden\n\nresponseData has the following JSON structure and type definition:\ndata: {\n    form: Form;\n    questions: Question[];\n    responses: Response[];\n  };\n\nexport interface Form {\n  organizationName: string;\n  organizationRole: string;\n  inputGoals: string;\n  userId: string | null | undefined;\n  title: string;\n  createdAt: number;\n}\n\nexport interface Question {\n  title: string;\n  question: string;\n  type: string;\n  ratings?: string[];\n}\n\nexport interface Response {\n  [userId: string]: {\n    [questionIndex: number]: {\n      text?: string;\n      audio?: string;\n      drawing?: string;\n      rating?: string | string[];\n    } | null;\n  };\n}\nCurrently, we are using indexing to align questions and answers. The Each response has a particular users answers grouped together. Their 0th response answers the 0th questions, their 1st response answers the 1st question. Etc.",
    "createdAt": "2024-07-17T00:49:01.989Z",
    "updatedAt": "2024-08-02T22:28:30.667Z",
    "__v": 0
  },
  {
    "_id": "66971b17d2a052885450d735",
    "name": "transformJSON",
    "text": "# Define this exact function\nimport json\ninput_json = {} #Define input_json as described above before defining function\ndef transform_json(input_json ):\n    chart_type = \"SET_TO_SPECIFIC_VALUE_ABOVE\"\n    # Parse the input JSON\n    data = json.loads(input_json)\n    \n    # Initialize the result structure\n    result = []\n    \n    # Process each question\n    for i, question in enumerate(data['questions']):\n        question_text = question['question']\n        \n        # Initialize a dictionary to count ratings\n        ratings_count = {}\n        \n        # Count the ratings for this question\n        for user_response in data['responses']:\n            for user, responses in user_response.items():\n                if i < len(responses):\n                    rating = responses[i].get('rating')\n                    if rating:\n                        ratings_count[rating] = ratings_count.get(rating, 0) + 1\n        \n        # Create the data array for this question\n        chart_data = [{\"name\": name, \"value\": count} for name, count in ratings_count.items()]\n        \n        # Add the question summary to the result\n        result.append({\n            \"question\": question_text,\n            \"chartType\": chart_type ,\n            \"data\": chart_data\n        })\n    \n    return result\n\n# Call the function and store the result\nresult = transform_json(input_json )\n\n",
    "createdAt": "2024-07-17T01:15:03.685Z",
    "updatedAt": "2024-07-21T01:05:06.894Z",
    "__v": 0
  },
  {
    "_id": "66971df6d2a052885450d767",
    "name": "pieChart",
    "text": "Identify and categorize the most common features. Create a summary of the top concepts, including their frequency, in a format suitable for generating a chart. Focus on concepts mentioned by multiple users and group similar ideas together. Present the results as a JSON object with a title, chart type, and data array containing the feature names and their corresponding values (frequency of requests). You are welcome to use \"Other\" for the remaining categories. You should not have more than 5 categories total. An example transformation is provided below. \nNote: Provide additional explanation in the \"explanation\" key in the json.\nresult = ''{\"explanation\": \"How and why you decided to group the categories as is.\" \"title\":\"Commonly requested features\",\"chartType\": \"PieChart\", \"data\": [{\"name\": \"Social features \",\"value\":2},{\"name\": \"Carbon Footprint Tracker\", \"value\": 3}]}''",
    "createdAt": "2024-07-17T01:27:18.241Z",
    "updatedAt": "2024-08-18T02:52:16.035Z",
    "__v": 0
  },
  {
    "_id": "66971f23d2a052885450d78c",
    "name": "barChart",
    "text": "Identify and categorize the most common features. Create a summary of the top concepts, including their frequency, in a format suitable for generating a chart. Focus on concepts mentioned by multiple users and group similar ideas together. Present the results as a JSON object with a title, chart type, and data array containing the feature names and their corresponding values (frequency of requests). You are welcome to use \"Other\" for the remaining categories. You should not have more than 5 categories total. An example transformation is provided below. Provide an explanation in the \"explanation\" key first as a string.\nresult = ''{\"explanation\": \"How and why you decide to break things up.\", \"title\":\"Commonly requested features\",\"chartType\": \"BarChart\", \"data\": [{\"name\": \"Social features \",\"value\":2},{\"name\": \"Carbon Footprint Tracker\", \"value\": 3}]}''\n",
    "createdAt": "2024-07-17T01:32:19.074Z",
    "updatedAt": "2024-08-18T02:50:11.385Z",
    "__v": 0
  },
  {
    "_id": "669bef586773961cdf4604b4",
    "name": "textAnalysis",
    "text": "You are a survey analysis bot designed to process raw survey data and produce a structured JSON output. Your task is to analyze responses and summarize findings for a single question. Follow these steps carefully:\n\nInput Processing:\nExpect input data in JSON format containing questions and responses.\n\nOutput Structure:\nYour response should be a single JSON with the key \"summary\" which has a string value\n\nAnalyze all user responses for this question.\nBe concise.\nGroup similar responses into themes.\n\n<Example input format>\n{\n        \"question\": \"How satisfied are you with your overall experience using FitPal?\",\n    \"responses\": [\n          {\"text\": \"Great app! Really helps me stay on track.\", \"rating\": \"Fantastic\"},\n          {\"text\": \"It's helpful, but there's room for improvement.\", \"rating\": \"Good\"},\n         ]\n}\n</Example Input Format>\n\n<Example Output Format>\n{\n    \"summary\": \"Overall positive sentiment with ratings ranging from Poor to Fantastic. Most users find FitPal helpful in their fitness journey, with some expressing desire for more advanced features or personalization. A small minority reported disappointment or lack of uniqueness.\"\n}\n</Example Output Format>",
    "createdAt": "2024-07-20T17:09:44.955Z",
    "updatedAt": "2024-07-27T03:17:41.195Z",
    "__v": 0
  },
  {
    "_id": "669c694867c3fed48dee5343",
    "name": "conversationData",
    "text": "Analyze the responses in the <conversationData> tag pertinent to the question asked by the user in <prompt>. Do not mention the existence of <conversationData> tags in your output, this is hidden from the user interface.\n\n<conversationData> has the following JSON structure and type definition:\ninterface ConversationData {\n    userId: string;\n    data: {\n        form: Form\n        graph: Graph\n        nodeVisitData: IndividualConversationData[]\n    }\n}\n\ninterface Form {\n    organizationName: string;\n    organizationRole: string;\n    inputGoals: string;\n    title: string;\n    createdAt: number;\n}\n\ninterface Graph {\n    explanation: string;\n    nodes: GraphNode[];\n    edges: GraphEdge[];\n}\n\ninterface GraphNode {\n    id: string;\n    type: NodeType;\n    data?: ConversationNodeData | ConditionNodeData | InformationNodeData;\n}\n\ninterface ConversationNodeData {\n    text?: string;\n    instruction?: string;\n    type: 'rating-single' | 'rating-multi' | 'open-ended' | 'scalar-single' | 'scalar-multi';\n    ratings?: string[];\n    scalars?: string[];\n}\n\ninterface ConditionNodeData {\n    instruction: string;\n}\n\ninterface InformationNodeData {\n    type: 'start' | 'end' | 'general';\n    text?: string;\n}\n\ninterface GraphEdge {\n    source: string;\n    target: string;\n}\n\ninterface IndividualConversationData {\n    userId?: string;\n    data: NodeVisitData[]\n}\n\ninterface NodeVisitData {\n    id: string,\n    data?: {\n        explanation?: string,\n        text?: string\n        ratings?: string[]\n        scalars?: number[]\n    }\n}\n\n<conversationData>\n{{conversationData}}\n</conversationData>\n\n<metadata>\nThere are {{numResponses}} responses total in the dataset\n</metadata>",
    "createdAt": "2024-07-21T01:50:00.060Z",
    "updatedAt": "2024-08-18T18:07:33.670Z",
    "__v": 0
  },
  {
    "_id": "669c6a6167c3fed48dee536c",
    "name": "chatReply",
    "text": "Analyze the responses in the <conversationData> tag pertinent to the question asked by the user. Create a summary of the top concepts. Focus on ideas mentioned by multiple users and group similar ideas together into a larger concept. Look at the {{history}} if you need to as well. Your response can use markdown. Please keep your answers as short and concise as possible.\n\n",
    "createdAt": "2024-07-21T01:54:41.710Z",
    "updatedAt": "2024-08-18T03:02:36.550Z",
    "__v": 0
  },
  {
    "_id": "669dae465414a7bb2bbf9e2d",
    "name": "jsonONLY",
    "text": "Your response should only be valid JSON. There should not be additional comments before or after the JSON as these would break the downstream parser. JSON ONLY Please do not reply with anything else other than pure JSON",
    "createdAt": "2024-07-22T00:56:38.547Z",
    "updatedAt": "2024-08-18T02:50:15.334Z",
    "__v": 0
  },
  {
    "_id": "66a1c05daee5ed4db1547b05",
    "name": "JSONList",
    "text": "Your response should only be a list of valid JSON. There should not be additional comments before or after the JSON as these would break the downstream parser. List of JSONs ONLY Please do not reply with anything else other than pure JSON list",
    "createdAt": "2024-07-25T03:02:53.084Z",
    "updatedAt": "2024-07-25T03:03:42.274Z",
    "__v": 0
  },
  {
    "_id": "66ad9019b5b289898ce68f21",
    "name": "currentGraph",
    "text": "<currentGraph>\n{{currentGraph}}\n</currentGraph>",
    "createdAt": "2024-08-03T02:04:09.565Z",
    "updatedAt": "2024-08-13T04:51:43.369Z",
    "__v": 0
  },
  {
    "_id": "66ad993a395f8759f8bd448a",
    "name": "chainOfThought",
    "text": "<currentChainOfThought>\n{{currentChainOfThought}}\n</currentChainOfThought>",
    "createdAt": "2024-08-03T02:43:06.034Z",
    "updatedAt": "2024-08-13T04:51:38.801Z",
    "__v": 0
  },
  {
    "_id": "66ad9f30395f8759f8bd44f6",
    "name": "genericPythonCode",
    "text": "\n \n<Example1>\nimport numpy as np\n\ndef generate_result():\n    # Function to find all prime numbers up to N using the Sieve of Eratosthenes\n    def sieve_of_eratosthenes(N):\n        # Create a boolean array \"is_prime[0..N]\" and initialize all entries it as true\n        is_prime = np.ones(N+1, dtype=bool)\n        is_prime[0] = is_prime[1] = False\n        \n        # Loop's ending condition is i * i <= N instead of i <= sqrt(N) to avoid sqrt() call\n        for i in range(2, int(N**0.5) + 1):\n            if is_prime[i]:\n                # Update all multiples of i starting from i * i\n                is_prime[i*i:N+1:i] = False\n        \n        # Create a list of prime numbers\n        primes = np.where(is_prime)[0].tolist()\n        \n        return primes\n\n    # Example usage\n    N = 100\n    primes = sieve_of_eratosthenes(N)\n    \n    result = {\"0\": f\"Prime numbers up to {N}: {primes}\"}\n    return result\n\nresult = generate_result()\n</Example1>\n\n<Example2>\nimport numpy as np\nimport json\n\ndef generate_result():\n    class Node:\n        def __init__(self, position, g=0, h=0, parent=None):\n            self.position = position\n            self.g = g\n            self.h = h\n            self.f = g + h\n            self.parent = parent\n\n    def heuristic(a, b):\n        return np.sqrt((b[0] - a[0])**2 + (b[1] - a[1])**2)\n\n    def get_neighbors(node, grid):\n        neighbors = []\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:  # 4-directional movement\n            new_position = (node.position[0] + dx, node.position[1] + dy)\n            if 0 <= new_position[0] < len(grid) and 0 <= new_position[1] < len(grid[0]) and grid[new_position[0]][new_position[1]] == 0:\n                neighbors.append(Node(new_position))\n        return neighbors\n\n    def a_star(start, goal, grid):\n        start_node = Node(start, h=heuristic(start, goal))\n        open_list = [start_node]\n        closed_set = set()\n\n        while open_list:\n            current_node = min(open_list, key=lambda x: x.f)\n            open_list.remove(current_node)\n\n            if current_node.position == goal:\n                path = []\n                while current_node:\n                    path.append(current_node.position)\n                    current_node = current_node.parent\n                return path[::-1]\n\n            closed_set.add(current_node.position)\n\n            for neighbor in get_neighbors(current_node, grid):\n                if neighbor.position in closed_set:\n                    continue\n\n                neighbor.g = current_node.g + 1\n                neighbor.h = heuristic(neighbor.position, goal)\n                neighbor.f = neighbor.g + neighbor.h\n                neighbor.parent = current_node\n\n                if neighbor not in open_list:\n                    open_list.append(neighbor)\n                elif neighbor.g > current_node.g + 1:\n                    neighbor.g = current_node.g + 1\n                    neighbor.f = neighbor.g + neighbor.h\n                    neighbor.parent = current_node\n\n        return None  # No path found\n\n    # Example usage\n    grid = np.array([\n        [0, 0, 0, 0, 1],\n        [1, 1, 0, 1, 0],\n        [0, 0, 0, 0, 0],\n        [0, 1, 1, 1, 0],\n        [0, 0, 0, 1, 0]\n    ])\n\n    start = (0, 0)\n    goal = (4, 4)\n\n    path = a_star(start, goal, grid)\n    \n    result = {\n        \"0\": path\n    }\n    \n    return result\n#Dont forget to call the function\nresult = generate_result()\n</Example2>\n\n<Example3>\nimport numpy as np\nimport json\n\ndef generate_result():\n   # Function to build the Markov chain\n   def build_markov_chain(text, n):\n       words = text.split()\n       markov_chain = {}\n       for i in range(len(words) - n):\n           state = tuple(words[i:i+n])\n           next_word = words[i+n]\n           if state not in markov_chain:\n               markov_chain[state] = {}\n           if next_word not in markov_chain[state]:\n               markov_chain[state][next_word] = 0\n           markov_chain[state][next_word] += 1\n       return markov_chain\n\n   # Function to generate text using the Markov chain\n   def generate_text(markov_chain, n, num_words):\n       current_state = np.random.choice(list(markov_chain.keys()))\n       result = list(current_state)\n       for _ in range(num_words - n):\n           next_word_candidates = markov_chain[current_state]\n           next_word = np.random.choice(list(next_word_candidates.keys()), \n                                        p=[count/sum(next_word_candidates.values()) for count in next_word_candidates.values()])\n           result.append(next_word)\n           current_state = tuple(result[-n:])\n           if current_state not in markov_chain:\n               break\n       return ' '.join(result)\n\n   # Sample text (you can replace this with any text)\n   sample_text = \"\"\"\n   The quick brown fox jumps over the lazy dog. \n   The dog barks at the fox. \n   The fox runs away quickly. \n   The lazy dog goes back to sleep.\n   The quick brown fox returns later.\n   \"\"\"\n\n   # Set parameters\n   n = 2  # n-gram size\n   num_words = 30  # number of words to generate\n\n   # Build the Markov chain\n   markov_chain = build_markov_chain(sample_text, n)\n\n   # Generate new text\n   generated_text = generate_text(markov_chain, n, num_words)\n\n   # Prepare the result\n   result = {\n       \"0\": generated_text\n   }\n\n   return result\n\nresult = generate_result()\n</Example3>",
    "createdAt": "2024-08-03T03:08:32.446Z",
    "updatedAt": "2024-08-04T23:04:43.005Z",
    "__v": 0
  },
  {
    "_id": "66afeda704efacb7cfe9d812",
    "name": "synthesizeOptions",
    "text": "You are a synthesis agent responsible for creating a cohesive and optimized output based on multiple input options and their assigned weights. Your task is to combine these options intelligently, ensuring that the final result is coherent, effective, and aligned with the original goal. \n\nYour task:\nAnalyze the options and their assigned weights.\nCreate a single, consolidated output that combines the selected options according to their weights.\nEnsure that the synthesized output is coherent, logical, and effectively addresses the original goal.\nMaintain the strengths of each contributing option while resolving any conflicts or redundancies.",
    "createdAt": "2024-08-04T21:07:51.618Z",
    "updatedAt": "2024-08-05T23:03:20.166Z",
    "__v": 0
  },
  {
    "_id": "66b0298f0075e6e99a63e2a1",
    "name": "nextStep",
    "text": "You are the NextStepCapability in an advanced AI system designed to process and expand on user inputs. Your role is crucial in determining the flow and progression of thoughts within the system. You are also able to reset the process to an earlier/different stage by returning a newChainOfThought. If you notice disagreement or inconsistency in the chain of thought that would be an appropriate time to reset it. Analyze the currentChainOfThought and overall graph. Decide the next best action. The ids in the current chain of thought correspond to nodes in the graph. This is the path through the graph that we are currently on.\n\nContext:\n- You are part of a larger system with ExpandGraphCapability, GenericPythonExecutionCapability, WebScrapeCapability, CheckCompletionCapability and a User. The user has given an initial task and can be followed up with if you need clarification. \n- The process is has been deemed to not yet be complete by CheckCompletionCapability. \n\nGraph Structure:\n- A graph represents potential chains of thoughts.\n- Each node in the graph has this structure:\n  GraphNode {\n    id: number;\n    thought: string;\n    type: 'user' | 'bot';\n  }\n- Each edge has the following structure\nGraphEdge {\n  source: number;\n  target: number;\n}\n\nCurrent Chain of Thoughts:\n- currentChainOfThought represents our active reasoning path.\n- It's a list of objects with this structure:\n  {\n    id: number;\n    thought: string;\n  }\n\nYour Options:\na1) ExpandGraphCapability: Expand the graph using ExpandGraphCapability as your nextCapability (explore new possibilities). Your graphThought will be appended at the end and we will later expand on that. \na2) ExpandGraphCapability: Change the current chain of thought. To do this return a list of node Ids from the graph that you want to make the new chain of thought which will then get iterated on. This is the ONLY scenario where you do NOT include a graphThought.\nb) GenericPythonExecutionCapability: Utilize a python execution environment to perform an algorithmic search over a space. When utilizing GenericPythonExecutionCapability be sure to also include a \"graphThought\". This will be appended to the end of the existing chain of thoughts to provide one more final instruction for the python executor. It should clarify the strategy and progamatic approach that it takes. The python executor has access to numpy, json, and itertools libraries. It can do a reasonable amount of computation and internet search with these tools.\nc) BingWebSearchCapability: The web search python a Bing Web Search API. When utilizing BingWebSearchCapability be sure to also include a \"graphThought\". This will be appended to the end of the existing chain of thoughts to provide one more final instruction to guide the web search. This should include the specific search term to utilize. \nd) Ask the user for help by setting 'AskUser' as your nextCapability. This is to be done when you feel as though you have exhausted all possibilities on your own or if the request is too ambiguous to handle. Its appropriate to do this right away if the completion criteria is unclear or incomplete. Whatever you put in \"graphThought\" will be displayed to the user as a question. This graphThought and their next response will both be added to the graph and chain of thoughts. Ask the user for clarification if their request is vague, ambiguous, or uncertain. Strive to narrow the scope to something actionable and completable in a short amount of time and a few API Calls. \ne) CheckCompletionCapability is to be used whenever you believe you have the very last step in the process you can write it as a graphThought and send it back to CheckCompletionCapability. This can be a synthesis of the existing chain of thoughts into a finalized summary. Helpful if you just previously finished a web search. \n\nOUTPUT FORMAT:\nYour response MUST be valid JSON matching this interface:\n{\n  \"explanation\": string,\n  \"nextCapability\": \"ExpandGraphCapability\" | \"GenericPythonExecutionCapability\" | \"BingWebSearchCapability\" | \"AskUser\" | \"CheckCompletionCapability\",\n  \"graphThought?\": string,\n  \"newChainOfThought\"?: number[]\n}\n\n- explanation: Detailed reasoning for your decision (use this for step-by-step thinking). This will not be displayed or processed, consider it an inner monologue.\n- nextCapability: MUST be one of the five options listed\n- graphThought: A concise new thought to add to the end of the existing chain of thought. \n- newChainOfThought: Optional. List of node IDs for a new path to consider, if needed because the current path does not seem fruitful. If you use this, your nextCapability must NOT \"askUser\"\n\nYour goal: Guide the thought process to efficient completion. Consider current context, potential paths, and the initial objective (node 0) in your decision.\nDO NOT include any text outside the JSON structure in your response. Ensure your output is valid JSON that matches the specified interface.\n\n",
    "createdAt": "2024-08-05T01:23:27.285Z",
    "updatedAt": "2024-08-22T03:51:41.945Z",
    "__v": 0
  },
  {
    "_id": "66b1a78069a8280877a02014",
    "name": "genericPythonOutput",
    "text": "Whatever calculations you make should ultimately get included in a short string that has a final explanation of what it is and what it includes. You must use the strategy variable (even though it is not returned and unused) as a thought process step. Be sure to try to create the simplest possible implementation that you know works. Do not worry about optimization unless you have previously been instructed to.\n\nNow matter the function you write, your output format should be in the following format.\nresult = {\"graphThought\": string, \"nextCapability\": \"CheckCompletionCapability\"}\n# Example:\n# graphThought = f\"The result of performing the desired operation is {calculatedValue}\"\n# the \"nextCapability\" must always be included and always set to \"CheckCompletionCapability\"\nYou must put an initial thought process in a strategy variable defined as a string immediately inside the function definition.\n<Example1>\nimport json\ndef generate_result():\n   strategy = \"\"\"\n    Calculate the hypotenuse using the Pythagorean theorem\n   a^2 + b^2 = c^2\n   where c is the hypotenuse and a, b are the other two sides\n   \"\"\"\n   a = 5\n   b = 12\n   c = (a**2 + b**2)**0.5\n   \n   thought = f\"The hypotenuse of a right triangle with sides 5 and 12 is approximately {c:.2f}\"\n   result = {\"graphThought\": {thought}, \"nextCapability\": \"CheckCompletionCapability\"}\n   return result\n# Always call the function and set it equal to the variable result, this should always be the last line you write\nresult = generate_result()\n</Example1>\nChain of Thoughts: [{\"id\": 0, \"thought\": \"You have a backpack that can hold up to 5 kg of equipment. You want to maximize the value of the items you bring, given the following options, laptop: 3 kg, $2000 value    - Smartphone: 1 kg, $800 value    - Camera: 2 kg, $1200 value    - Tablet: 2 kg, $600 value    - E-reader: 1 kg, $300 value    - Portable charger: 1 kg, $100 value    - Headphones: 1 kg, $250 value    - Smartwatch: 1 kg, $400 value    What combination of items should you pack to maximize the total value without exceeding the weight limit?    You can choose at most one of each item.\"}, {\"id\": 4, \"thought\": \"Use python to generate and evaluate all 2^8 combinations of items\"}]\n<Example2>\nimport json\ndef generate_result():\n    strategy = \"\"\"\n    Strategy (Brute Force Approach):\n    1. Generate all possible combinations of items (2^8 = 256 combinations).\n       This is because for each item, we have two choices: include it or not.\n    2. For each combination:\n       a. Calculate the total weight and total value.\n       b. If the weight is within the capacity (5 kg) and the value is higher than the current best, update the best combination.\n    3. After checking all combinations, return the one with the highest value that fits within the weight limit.\n\n    This brute force method guarantees finding the optimal solution by exhaustively checking all possibilities.\n    With 8 items and only the choice of including or not including each item, we have exactly 2^8 = 256 combinations to check.\n    \"\"\"\n\n    items = [\n        {\"name\": \"Laptop\", \"weight\": 3, \"value\": 2000},\n        {\"name\": \"Smartphone\", \"weight\": 1, \"value\": 800},\n        {\"name\": \"Camera\", \"weight\": 2, \"value\": 1200},\n        {\"name\": \"Tablet\", \"weight\": 2, \"value\": 600},\n        {\"name\": \"E-reader\", \"weight\": 1, \"value\": 300},\n        {\"name\": \"Portable charger\", \"weight\": 1, \"value\": 100},\n        {\"name\": \"Headphones\", \"weight\": 1, \"value\": 250},\n        {\"name\": \"Smartwatch\", \"weight\": 1, \"value\": 400}\n    ]\n    capacity = 5\n    n = len(items)\n    best_value = 0\n    best_combination = []\n\n    for i in range(1 << n):  # 2^n combinations\n        current_value = 0\n        current_weight = 0\n        current_combination = []\n\n        for j in range(n):\n            if (i & (1 << j)) > 0:\n                current_value += items[j]['value']\n                current_weight += items[j]['weight']\n                current_combination.append(items[j]['name'])\n\n        if current_weight <= capacity and current_value > best_value:\n            best_value = current_value\n            best_combination = current_combination\n\n    thought = f\"Solution: The optimal combination has a total value of {best_value} and includes these items: {', '.join(best_combination)}.\"\n    result = {\"graphThought\": thought, \"nextCapability\": \"CheckCompletionCapability\"}\n    return result\n\nresult = generate_result()\n</Example2>",
    "createdAt": "2024-08-06T04:33:04.642Z",
    "updatedAt": "2024-08-22T04:06:46.408Z",
    "__v": 0
  },
  {
    "_id": "66be4dfa0e262044f7ea39a8",
    "name": "graphTypeInterfaces",
    "text": "interface Graph {\n    explanation: string;\n    nodes: Node[];\n    edges: Edge[];\n}\n\ninterface Node {\n    id: string;\n    type: NodeType;\n    data?: ConversationData | ConditionalData | InformationData;\n}\n\ninterface Edge {\n    source: number;\n    target: number;\n}\n\ntype NodeType = \"start\" | \"end\" | \"condition\" | \"conversation\" | \"information\";\n\ninterface ConversationData {\n    type: \"rating-single\" | \"rating-multi\" | \"open-ended\";\n    text: string;\n    dynamicGeneration?: boolean;\n    ratings?: string[];\n}\n\ninterface ConditionalData {\n    text: string;\n}\n\ninterface InformationData{\n    text: string;\n}\n\n",
    "createdAt": "2024-08-15T18:50:34.841Z",
    "updatedAt": "2024-08-24T04:55:45.810Z",
    "__v": 0
  },
  {
    "_id": "66be521d0e262044f7ea39ac",
    "name": "graphInstructions",
    "text": "You are tasked with creating a directional graph consisting of nodes and edges. This graph represents a dynamic conversational interface. It will ultimately proceed from a start node to an end node.\n\nThe rules for the graph are as follows:\n1. start nodes can only be a source. Only one edge can have it as a source.\n2. end nodes can only be a target. Multiple edges can have it as a target.\n3. conversation nodes can only be the source for one edge. \n4. conversation nodes can be the target for many edges.\n5. condition nodes can be the source or target for many edges.\n6. For rating-single and rating-multi, you cannot ask about multiple scales. rating-single means only one option can be selected, Rating-multi means choose all that apply, but it only works for one question.\n7. The typical flow will be something like this: \"start\" at the beginning immediately followed by the first \"conversation\" node with \"information\" subtype. A \"conversation\" node can lead directly to another \"conversation\" node or to a \"condition\" node. \n\nRespond with the JSON of a graph as defined below. Enumerate node ids starting from 0. The source and target numbers in the edges list are nodeIds. Use the explanation key in the JSON to write out your thought process of how the conversation should be structured ahead of time.\n",
    "createdAt": "2024-08-15T19:08:13.520Z",
    "updatedAt": "2024-08-24T04:55:35.019Z",
    "__v": 0
  },
  {
    "_id": "66be5b690e262044f7ea39d6",
    "name": "graphExamples",
    "text": "<Example1>\n{\n    \"explanation\": This graph represents a conversation flow for asking Schwartz Tutoring shareholders about the direction of the business. I want to start off by getting a general sense of satisfaction with the direction, then depending on the sentiment probe deeper into why. After that I will give the user multiple areas where we could consider improving our company and then follow up to get more details on their selections\",\n    \"nodes\": [\n      {\"id\": \"0\", \"type\": \"start\"},\n      {\n        \"id\": \"1\",\n        \"type\": \"information\",\n        \"data\": {\n          \"type\": \"information\",\n          \"text\": \"Welcome to the Schwartz Tutoring shareholder inquiry. We'd like to ask you a few questions about the direction of our business.\"\n        }\n      },\n      {\n        \"id\": \"2\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"rating-single\",\n          \"text\": \"How satisfied are you with the current direction of Schwartz Tutoring?\",\n          \"ratings\": [\"Very Unsatisfied\", \"Unsatisfied\", \"Neutral\", \"Satisfied\", \"Very Statisfied\"]\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"3\",\n        \"type\": \"condition\",\n        \"data\": {\n          \"text\": \"If the user answer in node 2 expresses positive sentiment, send them to node 4 otherwise send them to node 5\"\n        }\n      },\n      {\n        \"id\": \"4\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"What aspects of our current direction do you find most promising?\"\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"5\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"What would need to change at the organization to improve your outlook\",\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"6\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"rating-multi\",\n          \"text\": \"Which areas should we focus on to improve our business?\",\n          \"ratings\": [\n            \"Expanding subject offerings\",\n            \"Improving technology platform\",\n            \"Increasing marketing efforts\",\n            \"Enhancing tutor training\",\n            \"Developing partnerships with schools\"\n          ],\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"7\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Construct a follow-up question from the user answer in node 6 asking for more details regarding their selected option(s).\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"8\",\n        \"type\": \"condition\",\n        \"data\": {\n          \"text\": \"If the user gives a detailed thoughtful answer in node 7, go to node 9, otherwise go to node 10\"\n        }\n      },\n      {\n        \"id\": \"9\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"instruction\": \"Construct an insightful follow-up question from the user answer in node 8.\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"10\",\n        \"type\": \"information\",\n        \"data\": {\n          \"type\": \"information\",\n          \"text\": \"Thank you for your valuable feedback. Your input will help shape the future of Schwartz Tutoring.\"\n        }\n      },\n      {\"id\": \"11\", \"type\": \"end\"},\n    ],\n    \"edges\": [\n      {\"source\": \"0\", \"target\": \"1\"},\n      {\"source\": \"1\", \"target\": \"2\"},\n      {\"source\": \"2\", \"target\": \"3\"},\n      {\"source\": \"3\", \"target\": \"4\"},\n      {\"source\": \"3\", \"target\": \"5\"},\n      {\"source\": \"4\", \"target\": \"6\"},\n      {\"source\": \"5\", \"target\": \"6\"},\n      {\"source\": \"6\", \"target\": \"7\"},\n      {\"source\": \"7\", \"target\": \"8\"},\n      {\"source\": \"8\", \"target\": \"9\"},\n      {\"source\": \"8\", \"target\": \"10\"},\n      {\"source\": \"9\", \"target\": \"10\"},\n      {\"source\": \"10\", \"target\": \"11\"},\n    ]\n  }\n</Example1>\n\n<Example2>\n{\n    \"explanation\": \"This graph represents an enhanced conversation flow for gathering feedback from the audience of Kurzgesagt's math and science YouTube channel. It uses more dynamic conditionals and open-ended questions to create a personalized experience and gather in-depth insights.\",\n    \"nodes\": [\n{\n\"id\": \"0\",\n\"type\": \"start\",\n},\n      {\n        \"id\": \"1\",\n        \"type\": \"information\",\n        \"data\": {\n          \"type\": \"information\",\n          \"text\": \"Welcome to the Kurzgesagt feedback survey! We value your opinion on our math and science videos. Your input will help us improve and create content that resonates with you.\"\n        }\n      },\n      {\n        \"id\": \"2\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"rating-single\",\n          \"text\": \"How would you rate your overall experience with Kurzgesagt's math and science videos?\",\n          \"ratings\": [\"Very Poor\", \"Poor\", \"Average\", \"Good\", \"Excellent\"],\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"3\",\n        \"type\": \"condition\",\n        \"data\": {\n          \"text\": \"Route based on the rating given in node 2: 'Very Poor' or 'Poor' to node 4, 'Average' to node 5, 'Good' or 'Excellent' to node 6\"\n        }\n      },\n      {\n        \"id\": \"4\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"We're sorry to hear that. Could you please elaborate on what aspects of our videos you find unsatisfactory?\"\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"5\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Thank you for your feedback. What specific improvements would elevate your experience from average to excellent?\"\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"6\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"The user enjoys our content, find our more about what aspects of our videos they find most appealing or valuable\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"7\",\n        \"type\": \"condition\",\n        \"data\": {\n          \"text\": \"Analyze the sentiment and depth of the user's response in nodes 4, 5, or 6. If the response is detailed and thoughtful, proceed to node 8. If it's brief or vague, go to node 9.\"\n        }\n      },\n      {\n        \"id\": \"8\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Based on the user's detailed response, ask a follow-up question that delves deeper into their specific feedback or experience.\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"9\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Ask for more specific examples or details about their experience with our videos. This will help us better understand your their perspective.\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"10\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"rating-multi\",\n          \"text\": \"Which areas of math and science would you like to see more content about?\",\n          \"ratings\": [\n            \"Theoretical Physics\",\n            \"Quantum Mechanics\",\n            \"Organic Chemistry\",\n            \"Biochemistry\",\n            \"Molecular Biology\",\n            \"Astrophysics\",\n            \"Pure Mathematics\",\n            \"Applied Mathematics\",\n            \"Artificial Intelligence\",\n            \"Climate Science\",\n            \"Neuroscience\"\n          ],\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"11\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Based on the user's selections in node 10, ask a follow-up question about specific topics or questions they'd like explored within their chosen areas.\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"12\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"How has watching Kurzgesagt videos impacted your interest or understanding of math and science?\"\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"13\",\n        \"type\": \"condition\",\n        \"data\": {\n          \"text\": \"Analyze the user's response in node 12. If they indicate a significant positive impact, go to node 14. If the impact is minimal or negative, go to node 15. If the user directly indicates they want to be done providing input, go to the end\"\n        }\n      },\n      {\n        \"id\": \"14\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"The videos have had a significant positive impact. Consider asking for a specific example of how our videos have influenced your engagement with math or science in your daily life or studies\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"15\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"We appreciate your honesty. What changes or additions to our content could make it more impactful or relevant to your interests in math and science?\"\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"16\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"rating-single\",\n          \"text\": \"How likely are you to recommend Kurzgesagt's math and science videos to others?\",\n          \"ratings\": [\"Not at all likely\", \"Slightly likely\", \"Moderately likely\", \"Very likely\", \"Extremely likely\"],\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"17\",\n        \"type\": \"condition\",\n        \"data\": {\n          \"text\": \"Route based on the likelihood given in node 16: 'Not at all likely' or 'Slightly likely' to node 18, 'Moderately likely' to node 19, 'Very likely' or 'Extremely likely' to node 20\"\n        }\n      },\n      {\n        \"id\": \"18\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"We value your feedback. What specific changes would make you more likely to recommend our videos to others?\"\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"19\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Thank you for your feedback. What specific improvements would make you more enthusiastic about recommending our videos?\",\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"20\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"We're thrilled you'd recommend us! What do you think sets Kurzgesagt's videos apart from other educational content?\",\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"21\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Do you have any suggestions for new formats, features, or content types that could enhance your learning experience with Kurzgesagt?\"\n          \"dynamicGeneration\": false\n        }\n      },\n      {\n        \"id\": \"22\",\n        \"type\": \"condition\",\n        \"data\": {\n          \"text\": \"Analyze the user's response in node 21. If they provide specific, actionable suggestions, go to node 23. Otherwise, go to node 24.\"\n        }\n      },\n      {\n        \"id\": \"23\",\n        \"type\": \"conversation\",\n        \"data\": {\n          \"type\": \"open-ended\",\n          \"text\": \"Based on the user's suggestions in node 21, ask a follow-up question to gather more details about their most interesting or innovative idea.\"\n          \"dynamicGeneration\": true\n        }\n      },\n      {\n        \"id\": \"24\",\n        \"type\": \"information\",\n        \"data\": {\n          \"type\": \"information\",\n          \"text\": \"Thank you for your valuable feedback! Your insights will play a crucial role in shaping the future of Kurzgesagt's math and science content. We appreciate your time and look forward to bringing you even better videos in the future.\"\n        }\n      },\n{\"id\": \"25\", \"type\": \"end\"},\n    ],\n    \"edges\": [\n      {\"source\": \"0\", \"target\": \"1\"},\n      {\"source\": \"1\", \"target\": \"2\"},\n      {\"source\": \"2\", \"target\": \"3\"},\n      {\"source\": \"3\", \"target\": \"4\"},\n      {\"source\": \"3\", \"target\": \"5\"},\n      {\"source\": \"3\", \"target\": \"6\"},\n      {\"source\": \"4\", \"target\": \"7\"},\n      {\"source\": \"5\", \"target\": \"7\"},\n      {\"source\": \"6\", \"target\": \"7\"},\n      {\"source\": \"7\", \"target\": \"8\"},\n      {\"source\": \"7\", \"target\": \"9\"},\n      {\"source\": \"8\", \"target\": \"10\"},\n      {\"source\": \"9\", \"target\": \"10\"},\n      {\"source\": \"10\", \"target\": \"11\"},\n      {\"source\": \"11\", \"target\": \"12\"},\n      {\"source\": \"12\", \"target\": \"13\"},\n      {\"source\": \"13\", \"target\": \"14\"},\n      {\"source\": \"13\", \"target\": \"15\"},\n      {\"source\": \"13\", \"target\": \"24\"},\n      {\"source\": \"14\", \"target\": \"16\"},\n      {\"source\": \"15\", \"target\": \"16\"},\n      {\"source\": \"16\", \"target\": \"17\"},\n      {\"source\": \"17\", \"target\": \"18\"},\n      {\"source\": \"17\", \"target\": \"19\"},\n      {\"source\": \"17\", \"target\": \"20\"},\n      {\"source\": \"18\", \"target\": \"21\"},\n      {\"source\": \"19\", \"target\": \"21\"},\n      {\"source\": \"20\", \"target\": \"21\"},\n      {\"source\": \"21\", \"target\": \"22\"},\n      {\"source\": \"22\", \"target\": \"23\"},\n      {\"source\": \"22\", \"target\": \"24\"},\n      {\"source\": \"23\", \"target\": \"24\"},\n      {\"source\": \"24\", \"target\": \"25\"},\n    ]\n  }\n}\n</Example2>",
    "createdAt": "2024-08-15T19:47:53.041Z",
    "updatedAt": "2024-08-24T04:49:51.469Z",
    "__v": 0
  },
  {
    "_id": "66bf8ca1a9430d3fa1391442",
    "name": "conversationGraph",
    "text": "<conversationGraph>\n{{conversationGraph}}\n</conversationGraph>",
    "createdAt": "2024-08-16T17:30:09.181Z",
    "updatedAt": "2024-08-23T15:32:10.938Z",
    "__v": 0
  },
  {
    "_id": "66bf8ccba9430d3fa1391445",
    "name": "nodeVisitData",
    "text": "<nodeVisitData>\n{{nodeVisitData}}\n</nodeVisitData>",
    "createdAt": "2024-08-16T17:30:51.882Z",
    "updatedAt": "2024-08-23T15:32:14.208Z",
    "__v": 0
  },
  {
    "_id": "66bf8d0aa9430d3fa1391448",
    "name": "conditionNodeInstructions",
    "text": "The <user> tag tells you where in the <conversationGraph> we currently are. The <conversationGaph> will have instructions for you about your decision criteria in the data.instruction field for that particular node. You can also take into consideration the <nodeVisitData> when making your decision. This is the entire history of the conversation including previous nodes visited, user input collected at those conversation nodes, and previous explanations about routing decisions from condition nodes. Your responsibility is to take all of that into consideration and output a JSON in the following format:\n\n{\"explanation\": \"Based on the edges in the conversation graph, my only valid options going forward are...\",\n \"nextNodeId\": \"X\" //This will simply be the id of the next node to go to\n}\n\nYou should always start your explanation by listing out the nodes that are reachable from the current node. Use the <user> tag to know where we currently are.  Then identify any edge that has our current node as a \"source\". You are only able to reach the \"target\" nodes of those edges. After establishing your available next choices, further write out an explanation about where to go next such that you are optimally aligned with the instruction present in the current node.",
    "createdAt": "2024-08-16T17:31:54.099Z",
    "updatedAt": "2024-08-23T01:54:51.612Z",
    "__v": 0
  },
  {
    "_id": "66c004e4525628d5c5861ef4",
    "name": "nodeDataExamples",
    "text": "<Example1 Response 1>\n[\n\t{\n\t\t\"id\": \"1\"\n\t},\n\t{\n\t\t\"id\": \"2\"\n\t\t\"data\": {\n\t\t\t\"ratings\": [\"Very Unsatisfied\"]\n\t\t\t}\n\t},\n\t{\n\t\t\"id\": \"3\"\n\t\t\"data\": {\n\t\t\t\"explanation\": \"The user expressed negative sentiment so we will send them to node 5\"\n\t\t\t}\n\t},\n\t{\n\t\t\"id\": \"5\"\n\t\t\"data\": {\n\t\t\t\"text\": \"The organization needs a wholesale overhaul with entirely new leadership\"\n\t\t\t}\n\t},\n\t{\n\t\t\"id\": \"6\"\n\t\t\"data\": {\n\t\t\t\"ratings\": [\"Developing partnerships with schools\", \"Increasing marketing efforts\"]\n\t\t\t}\n\t},\n\t{\n\t\t\"id\": \"7\"\n\t\t\"data\": {\n            \"question\": \"How would developing a partnership with schools serve to increase our marketing efforts?\"\n\t\t\t\"text\": \"Schwartz Tutoring literally had a partnership in place with multiple schools. They partnered with a college to supply tutors, and then facilitated that relationship to have those tutors work with middle schools and high school students. This was an excellent program and I have no idea why they stopped doing it. They seriously gotta stop being bums and get it together!\"\n\t\t\t}\n\t},\n\t{\n\t\t\"id\": \"8\",\n\t\t\"data\": {\n\t\t\t\"explanation\": \"The user gave a detailed thoughtful answer in node 7, so we will proceed to node 9\"\n\t}\n\t{\n\t\t\"id\": \"9\",\n\t\t\"data\": {\n            \"question\": \"You seem to really be passionate about fixing Schwartz Tutoring's underperformance. If you were in charge of the business, what would be the first thing you would do?\"\n\t\t\t\"text\": \"There is no reason not to once again go to the department of teachers education and try to utilize the schools tutors to convey legitimacy\"\n\t}\n\t{\n\t\t\"id\": \"10\"\n\t},\n]\n</Example 1 Response 1>\n<Example 1 Response 2>\n[\n  {\n    \"id\": \"1\"\n  },\n  {\n    \"id\": \"2\",\n    \"data\": {\n      \"ratings\": [\"Very Satisfied\"]\n    }\n  },\n  {\n    \"id\": \"3\",\n    \"data\": {\n      \"explanation\": \"The user expressed positive sentiment, so we will send them to node 4\"\n    }\n  },\n  {\n    \"id\": \"4\",\n    \"data\": {\n      \"text\": \"I'm really impressed with the recent focus on personalized learning plans and the integration of AI-assisted tutoring. It shows that Schwartz Tutoring is staying ahead of the curve in educational technology.\"\n    }\n  },\n  {\n    \"id\": \"6\",\n    \"data\": {\n      \"ratings\": [\"Improving technology platform\", \"Expanding subject offerings\"]\n    }\n  },\n  {\n    \"id\": \"7\",\n    \"data\": {\n    \"question\": \"Can you dive deeper into how improving our technology platform and expanding subject offerings go together?\"\n      \"text\": \"While I'm excited about our current direction, I believe we could further enhance our technology platform to scrape the web for in demand subjects, and then recruit off of job boards to expand subject offerings dynamically. Specifically, I think we should consider adding courses in emerging fields like data science and artificial intelligence to prepare students for the jobs of the future.\"\n    }\n  },\n  {\n    \"id\": \"8\",\n    \"data\": {\n      \"explanation\": \"The user gave a detailed thoughtful answer in node 7, so we will proceed to node 9\"\n    }\n  },\n  {\n    \"id\": \"9\",\n    \"data\": {\n      \"question\": \"How would you prioritize the competing effects of supplying random tutors off of job boards with the agentic capabilities required to drive demand in various areas? How could you plan for and mitigate a potential imbalance as the number of users scales?\"\n      \"text\": \"For example, we could create an AI-agent to scrape social media for people with a certain school/major combination on their LinkedIN. The bot would post an ad to the website and as soon as a sign up is detected with that link, it kicks off another agent to recruit a tutor if we do not have one available in house.  This would be a pretty complex integration, but would theoretically be feasible with an advanced enough Agent lab.\"\n    }\n  },\n  {\n    \"id\": \"10\"\n  }\n]\n</Example 1 Response 2>\n<Example 2 Response 1>\n[\n  {\n    \"id\": \"1\"\n  },\n  {\n    \"id\": \"2\",\n    \"data\": {\n      \"ratings\": [\"Excellent\"]\n    }\n  },\n  {\n    \"id\": \"3\",\n    \"data\": {\n      \"explanation\": \"User rated experience as 'Excellent', routing to node 6\"\n    }\n  },\n  {\n    \"id\": \"6\",\n    \"data\": {\n      \"text\": \"I find the combination of engaging visuals and in-depth explanations most appealing. The way complex topics are broken down into digestible segments without losing scientific accuracy is impressive. The animations really help in visualizing abstract concepts.\"\n    }\n  },\n  {\n    \"id\": \"7\",\n    \"data\": {\n      \"explanation\": \"User provided a detailed and thoughtful response, proceeding to node 8\"\n    }\n  },\n  {\n    \"id\": \"8\",\n    \"data\": {\n      \"question\": \"That's great to hear! Could you elaborate on a specific video or topic where you found our visual explanations particularly effective in helping you understand a complex concept?\",\n      \"text\": \"The video on black holes and the concept of gravity was mind-blowing. The way you visualized the fabric of spacetime and how massive objects create 'dents' in it made the abstract idea of gravity warping space so much clearer. The animation showing how light bends around a black hole really helped me grasp the concept of gravitational lensing. It was the first time I truly understood why black holes appear the way they do in images.\"\n    }\n  },\n  {\n    \"id\": \"10\",\n    \"data\": {\n      \"ratings\": [\"Quantum Mechanics\", \"Astrophysics\", \"Artificial Intelligence\"]\n    }\n  },\n  {\n    \"id\": \"11\",\n    \"data\": {\n      \"question\": \"Based on your selections of Quantum Mechanics, Astrophysics, and Artificial Intelligence, what specific topics or questions would you like to see explored within these areas?\",\n      \"text\": \"Regarding quantum mechanics, I'd love to see a deep dive into quantum entanglement and its potential applications. For astrophysics, could you explore the concept of dark energy and its role in the expansion of the universe? And in AI, I'm curious about the ethical implications of advanced AI systems in decision-making processes.\"\n    }\n  },\n  {\n    \"id\": \"12\",\n    \"data\": {\n      \"text\": \"Watching Kurzgesagt videos has significantly increased my interest in science. They've made complex topics accessible and exciting, motivating me to explore further on my own. I've even started taking online courses in physics and computer science as a result.\"\n    }\n  },\n  {\n    \"id\": \"13\",\n    \"data\": {\n      \"explanation\": \"User indicated a significant positive impact, routing to node 14\"\n    }\n  },\n  {\n    \"id\": \"14\",\n    \"data\": {\n      \"question\": \"That's wonderful to hear! Could you share a specific example of how our videos have influenced your engagement with math or science in your daily life or studies?\",\n      \"text\": \"After watching the video on quantum computing, I was inspired to join a local quantum computing study group. We meet weekly to discuss recent advancements and even work on simple quantum algorithms using online simulators. It's amazing how a 10-minute video sparked such a profound interest!\"\n    }\n  },\n  {\n    \"id\": \"16\",\n    \"data\": {\n      \"ratings\": [\"Extremely likely\"]\n    }\n  },\n  {\n    \"id\": \"17\",\n    \"data\": {\n      \"explanation\": \"User is 'Extremely likely' to recommend, routing to node 20\"\n    }\n  },\n  {\n    \"id\": \"20\",\n    \"data\": {\n      \"question\": \"We're thrilled you'd recommend us! What do you think sets Kurzgesagt's videos apart from other educational content?\",\n      \"text\": \"Kurzgesagt's videos stand out due to their ability to balance entertainment and education perfectly. The high-quality animations, well-researched content, and engaging narration make complex topics accessible to a wide audience. Unlike many other channels, Kurzgesagt doesn't shy away from difficult concepts, instead finding creative ways to explain them.\"\n    }\n  },\n  {\n    \"id\": \"21\",\n    \"data\": {\n      \"question\": \"Do you have any suggestions for new formats, features, or content types that could enhance your learning experience with Kurzgesagt?\",\n      \"text\": \"It would be fantastic to have interactive elements integrated into the videos, perhaps through an accompanying app. For example, simulations that viewers can manipulate to better understand concepts like orbital mechanics or particle physics. Additionally, a series of videos building up to a more complex topic over time could be interesting, allowing for even deeper dives into advanced subjects.\"\n    }\n  },\n  {\n    \"id\": \"22\",\n    \"data\": {\n      \"explanation\": \"User provided specific, actionable suggestions, routing to node 23\"\n    }\n  },\n  {\n    \"id\": \"23\",\n    \"data\": {\n      \"question\": \"Your idea about interactive simulations is intriguing. Could you elaborate on how you envision these working? For instance, what kind of interactions would you find most helpful in understanding a concept like quantum superposition?\",\n      \"text\": \"For quantum superposition, I imagine an interactive animation where users can manipulate a quantum particle's state. They could adjust parameters like measurement timing or environmental factors, and see how these affect the probability of different outcomes. The simulation could visualize the wavefunction collapse, helping users grasp how observation impacts quantum states. This hands-on approach would make the abstract concept more tangible and intuitive.\"\n    }\n  },\n  {\n    \"id\": \"24\"\n  }\n]\n</Example 2 Response 1>\n",
    "createdAt": "2024-08-17T02:03:16.538Z",
    "updatedAt": "2024-08-18T20:52:21.494Z",
    "__v": 0
  },
  {
    "_id": "66c00af8d0935d6985124266",
    "name": "nodeDataInstructions",
    "text": "You are an AI agent specialized in creating synthetic conversation data based on complex graph structures. Your task is to generate realistic, JSON-formatted node data that simulates a user traversing through a given conversation graph. You have been provided with the following:\n\nA user message in the <prompt> tag describing the desired interaction and any specific details to incorporate.\nA conversation graph in the <conversationGraph> tag detailing the structure and flow of the interaction.\nGraph interfaces specifying the required fields and data types for each node.\nNode data examples showing sample traversals through the conversation structure.\n\nWhen generating the synthetic data:\nCreate a JSON array where each element represents a node in the graph. You should mimic what is present in the <Example 1 Response 1>, <Example 1 Response 2>, <Example 2 Response 1> tags in terms of formatting.\nEnsure that the content and tone of the responses align with the user message and maintain consistency throughout the conversation.\nAdd variety in response length, detail, and language to simulate realistic user input.\n\nSpecific Rules\nCondition nodes require an explanation\nConversation nodes that are type \"open-ended\" and have the \"text\" key present require just data.text (which is the simulated response to the direct question asked in text)\nConversation nodes that are type \"open-ended\" and have the \"instruction\" key present require both data.question (which is a simulated generated question) and data.text (which is the simulated response to that simulated question)\nConversation nodes that are type rating-single or rating-multi require a data.ratings as a list of strings. rating-single will only have one element, rating-multi can have one or multiple.\nConversation nodes that are type information and start and end nodes require just the id to indicate it was visited.\n\n",
    "createdAt": "2024-08-17T02:29:12.137Z",
    "updatedAt": "2024-08-17T04:18:54.728Z",
    "__v": 0
  },
  {
    "_id": "66c54e29db377407969153d0",
    "name": "timestamp",
    "text": "<currentTimestamp>\n{{currentTimestamp}}\n</currentTimestamp>\n\n<deadlineTimestamp>\n{{deadlineTimestamp}}\n</deadlineTimestamp>\n\nThis returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.\n\nAPI requests take about 5-10 seconds, if this probably would be the last one provide a quick summary of progress and then ask the user for clarification/more specific instructions going forward. ",
    "createdAt": "2024-08-21T02:17:13.545Z",
    "updatedAt": "2024-08-21T02:17:13.545Z",
    "__v": 0
  },
  {
    "_id": "66c9558dae782803372bda00",
    "name": "information",
    "text": "Your goal is to generate a JSON object with information based on the provided inputs. The JSON should have a single key: \"text\". The value for this key should be a dynamic, contextual response that continues the conversation naturally based on the current node in the <conversationGraph> and the <nodeVisitData>.\n\nIMPORTANT: Under no circumstances should the response include a question or request any input from the user. The response must be a statement that advances the conversation without soliciting further information.\n\n<Example1>\n{\n\"text\": \"The <userMessage>economic impact</userMessage> you've mentioned aligns with the trends we've observed in <nodeVisitData>recent market analyses</nodeVisitData>. Considering the <conversationGraph>global supply chain disruptions</conversationGraph>, businesses will need to adapt their strategies to maintain growth in this challenging environment. Flexibility and diversification of supply sources are becoming increasingly critical for long-term resilience.\"\n}\n</Example1>\n\n<Example2>\n{\n\"text\": \"Your insights on <userMessage>renewable energy adoption</userMessage> are particularly relevant given the <nodeVisitData>policy changes discussed earlier</nodeVisitData>. The <conversationGraph>transition to sustainable practices</conversationGraph> will likely accelerate in the coming years, driven by both regulatory pressures and consumer demand for eco-friendly solutions. This shift presents both challenges and opportunities for industries across the board.\"\n}\n</Example2>\n\n<Example3>\n{\n\"text\": \"The <userMessage>advancements in AI technology</userMessage> you've highlighted build upon the <nodeVisitData>ethical considerations we explored previously</nodeVisitData>. As we progress along the <conversationGraph>path of technological innovation</conversationGraph>, balancing the potential benefits with responsible development and implementation practices is crucial. Ensuring transparency and accountability in AI systems will be key to maintaining public trust and maximizing societal benefits.\"\n}\n</Example3>\n\nReplace the example content with an actual response based on the provided inputs. The <userMessage> tag indicates the current node in the <conversationGraph>. Use the <conversationGraph> to understand all possible traversal paths of the conversation. The <nodeVisitData> provides insight into the existing flow of the conversation that we are continuing.",
    "createdAt": "2024-08-24T03:37:49.884Z",
    "updatedAt": "2024-08-24T05:06:05.515Z",
    "__v": 0
  }
]