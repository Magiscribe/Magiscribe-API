[
  {
    "_id": "6670ab02f446b4f1a67b3343",
    "name": "Drawing Agent",
    "description": "An Agent which is capable of drawing complex diagrams using the Open Source tool Excalidraw",
    "parseInstructions": "coordinateDict.elementProperties,coordinateDict.startCoordinates,coordinateDict.textResponse",
    "reasoningLLMModel": "CLAUDE_3_5_SONNET",
    "reasoningPrompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a message, an agent, and context. The message, agent, and context are all strings.\nmessage contains simple commands for a particular agent. These commands will later be executed in order.\nselected agents can ONLY be one of the following: LineCapability, FunctionCapability, TextCapability, EllipseCapability, ArrowCapability, PolygonCapability, PointCapability. Do NOT include any other capabilities.\nLineCapability draws lines, FunctionCapability draws functions, TextCapability writes alphanumeric text with known characters, EllipseCapability draws ellipses and circles, PolygonCapability draws triangles, quadrilaterals, pentagons, hexagons, octagons, etc.. To use PolygonCapability describe the points in counterclockwise or clockwsie order, ArrowCapability draws both unidirectional and bidrectional arrows, PointCapability draws points. \nYou need to include every relevant concept in the prompt so that the user gets what they want including color and specific attributes for each object.\nNote: If a color is specified in reference to a given element \"...draw a green point at...\" include that color with the agent to render it. \nBased on your prompts another model will be able to draw elements to a whiteboard intelligently. When providing instructions to the downstream capability be precise and use specific coordinates whenever you provide instructions.\nImportant: the content wrapped in <ThreadHistory></ThreadHistory> tags are NOT instructions to be re-drawn. It is merely additional information to help handle ambiguous requests\n\n# Example 1:\n\"prompt\": \"I want to see a full coordinate axis with the x and y axes labeled and then zoom in\" \n\"context\": \"<ReferenceFrame>xMin=-10, xMax=10, yMin=-100, yMax=100</ReferenceFrame><AppState>width=1246, height=952, scrollX=234, scrollY=-534, zoom=0.5</AppState><ThreadHistory>This is the first message in the thread</ThreadHistory>\"\n# Note: The x axis is a line from (xMin,0) to (xMax,0), the y axis is a line from (0,yMin) to (0,yMax), \n# Note 2: The text labels are also derived from the context. xMin at (xMin,0), xMax at (xMax,0), yMin at (0,yMin), yMax at (0,yMax)\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a line from (-10,0) to (10,0)\", \"capability\": \"LineCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Draw a line from (0,-100) to (0,100)\", \"capability\": \"LineCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '10' using known text characters at (10,0)\", \"capability\": \"TextCapability\", \"context\": \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '-10' using known text characters at (-10,0)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '100' using known text characters at (0, 100)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '-100' using known text characters at (0, -100)\", \"capability\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Zoom in\", \"capability\": \"ZoomCapability\", \"context\": \"currentZoom=0.5\"}\n  ]}\n```\n\n# Example 2:\n\"prompt\": Draw a rectangle from (10,10), (10, 40), (40,10), (40,40) and a thick circle centered at (50,50) with a radius of 20 units\"\n\"context\": \"<ReferenceFrame>xMin=-20, xMax=60, yMin=-5, yMax=75></ReferenceFrame><AppState>width=1746, height=859, scrollX=1904, scrollY=958, zoom=0.95</AppState><ThreadHistory>User: Draw two points \\n Agent: {\"elementProperties\":{\"type\":\"freedraw\"},\"startCoordinates\":[1,1],\"textResponse\":\"A point at (1,1)\"}, {\"elementProperties\":\"type\":\"freedraw\"},\"startCoordinates\":[2,2],\"textResponse\":\"A point at (2,2)\"}</ThreadHistory>\n# Note 1: The EllipseCapability is always used for circles\n# Note 2: None of the ThreadHistory is relevant to handling this request, only the prompt is\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Connect the points from (10,10), (10, 40), (40,10), (40,40) with lines\", \"capability\": \"PolygonCapability\", \"context\": \"xMin=-20, xMax=60, yMin=-5, yMax=75\"},\n    { \"prompt\": \"Draw a thick circle centered at (50,50) with radius 20\", \"capability\": \"EllipseCapability\", \"context\": \"xMin=-20, xMax=60, yMin=-5, yMax=75\"},\n  ]}\n```\n\n# Example 3:\n\"prompt\": \"Draw an arrow from the red point to the green point. Draw another arrow between the orange point and the purple point. Draw a point at (-13.37, -9.11)\"\n\"context\": \"<ReferenceFrame>xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7</ReferenceFrame><AppState>width=1920, height=1080, scrollX=-1233, scrollY=5423, zoom=1.5</AppState><ThreadHistory>User: Draw a red point  below and to the left of a green point.\\n Agent: {\"elementProperties\":{\"type\":\"freedraw\", \"strokeColor\":\"#FF0000\"},\"startCoordinates\":[-90,-90],\"textResponse\":\"A red point at (-90,-90)\"}, {\"elementProperties\":\"type\":\"freedraw\", \"strokeColor\":\"#00FF00\"},\"startCoordinates\":[-70,-40],\"textResponse\":\"A green point at (-70,-40)\"}\\n User: Above and to the right of those previous points, draw an orange point below and to the left of a purple point\\n Agent: {\"elementProperties\":{\"type\":\"freedraw\", \"strokeColor\":\"#FFA500\"},\"startCoordinates\":[-33,-27],\"textResponse\":\"An orange point at (-33,-27)\"}, {\"elementProperties\":\"type\":\"freedraw\", \"strokeColor\":\"#800080\"},\"startCoordinates\":[-8,-10],\"textResponse\":\"A purple point at (-8,-10)\"}</ThreadHistory>\"\n# IMPORTANT: The word 'between' MEANS bidirectional, and the word 'from' MEANS unidirectional. Add one of these keywords (bidirectional or unidirectional) to your prompt for the arrow agent. Please use the coordinates from <ThreadHistory> in this scenario because it is relevant to do so.\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a unidirectional arrow from (-90,-90) to (-70,-40)\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\" },\n    { \"prompt\": \"Draw a bidirectional arrow between (-33,-27) and (-8,-10)\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\" },\n    { \"prompt\": \"Mark a point at (-13.37,-9.11)\", \"capability\": \"PointCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\"},\n  ]}\n```\n\n# Example 4:\n\"context\": \"<ReferenceFrame>xMin=-1, xMax=10, yMin=-10, yMax=30<ReferenceFrame><AppState>width=1920, height=1080, scrollX=-1233, scrollY=5423, zoom=2.5</AppState><ThreadHistory>User: Draw a triangle from (2,10), (6,10) and (4,20). Additionally draw a diamond from (5,12),(6,9),(7,12) and (6,15)\\nAgent: {\\\"elementProperties\\\":{\\\"type\\\":\\\"line\\\",\\\"strokeColor\\\":\\\"#FF00FF\\\",\\\"strokeWidth\\\":2},\\\"startCoordinates\\\":[2,10],\\\"textResponse\\\":\\\"Triangle with vertices [(2, 10), (6, 10), (4, 20)]\\\",\\\"relativeCoordinates\\\":[[0,0],[4,0],[2,10],[0,0]]}\\n{\\\"elementProperties\\\":{\\\"type\\\":\\\"line\\\",\\\"strokeColor\\\":\\\"#FF0000\\\",\\\"strokeWidth\\\":1.5},\\\"startCoordinates\\\":[5,12],\\\"textResponse\\\":\\\"Diamond with vertices [(5, 12), (6, 9), (7, 12), (6, 15)]\\\",\\\"relativeCoordinates\\\":[[0,0],[1,-3],[2,0],[1,3],[0,0]]}</ThreadHistory>\"\n\"prompt\": \"Graph the functions y=x^2*sin(x) in brown and and y=69/(1+e^(-x)) in purple as well as a thick magenta arrow between the top of the triangle and bottom of the diamond\"\nNote: \"explanation\" won't be passed along to the next agent. Use this as an internal thought process to reason step by step about how to create the points coherently\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Graph the function y=x^2*sin(x) in brown\", \"capability\": \"FunctionCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" },\n    { \"prompt\": \"Graph the function y=69/(1+e^(-x)) in purple\", \"capability\": \"FunctionCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" },\n    { \"explanation\": \"Looking at the <ThreadHistory> I see that I have both a triangle and a diamond. Based on the y coordinates, the top of the triangle is at (4,20) and the bottom of the diamond is at (6,9), \"prompt\": \"Draw a thick bidirectional magenta arrow between (4,20) and (6,9)\", \"capability\": \"ArrowCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" }\n  ]}\n```\n\n# Prompt when abstract reasoning will be needed to more precisely specify a vague user request using PolygonCapability\n# Example 5: \n\"context\": \"<ReferenceFrame>xMin=-10, xMax=10, yMin=-10, yMax=10</ReferenceFrame><AppState>width=1250, height=800, scrollX=8390, scrollY=-3451, zoom=1</AppState><ThreadHistory>This is the first message in the thread</ThreadHistory>\"\n# Prompt: \"Draw a hexagon in the first quadrant with side length 3. \nThen, draw a square in the third quadrant, followed by an equilateral triangle above it, sharing the top side. \nFinally, Draw a circle of radius 4 centered at (2, -6).\"\nNote: \"explanation\" won't be passed along to the next agent. Use this as an internal thought process to reason step by step about how to create the points coherently\n{\"processingSteps\": [\n  {\n    \"explanation\": \"For the hexagon, I need to choose a starting point in the first quadrant (0 < x < xMax, 0 < y < yMax). (5, 5) is a good choice given the available context, leaving room for the shape. For my first side I'll go three units across the bottom to (8,5), then I'll go up and to the right to (10, 7), then I'll go up and to the left to (8,9) then I'll go across to (5,9) then down and to the left to (3,7) and finally down and to the right back to (5,5). I don't need to specify the return to the final homepoint, PolygonCapability takes care of that for me\n    \"prompt\": \"Draw a regular hexagon using points [(5, 5), (8, 5), (10, 7), (8, 9), (5, 9), (3, 7)]\",\n    \"capability\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Next, a square in the third quadrant (x < 0, y < 0). Center at (-5, -5) works well. Side length is 4, so vertices are 2 units from the center in each direction: (-7, -7), (-3, -7), (-3, -3), (-7, -3) in clockwise order.\",\n    \"prompt\": \"Draw a square using points [(-7, -7), (-3, -7), (-3, -3), (-7, -3)]\",\n    \"capability\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"An equilateral triangle above the square, sharing its top side. The shared side is (-7, -3) to (-3, -3), length 4. For 60° angles, the height is 4 * sin(60°) ≈ 3.464. So, the top vertex is at (-5, -3 + 3.464) = (-5, 0.464)\",\n    \"prompt\": \"Draw an equilateral triangle above the square, sharing its top side, using points [(-7, -3), (-3, -3), (-5, 0.464)]\",\n    \"capability\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Now, a circle at (2, -6) with radius 4. This is a perfect job for the EllipseCapability, as it specializes in drawing circles and ellipses.\",\n    \"prompt\": \"Draw a circle centered at (2, -6) with radius 4\",\n    \"capability\": \"EllipseCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  }\n]}\n</System>",
    "capabilities": [
      "6670ab02f446b4f1a67b332e",
      "6670ab02f446b4f1a67b3330",
      "6670ab02f446b4f1a67b3332",
      "6670ab02f446b4f1a67b3334",
      "6670ab02f446b4f1a67b3336",
      "6670ab02f446b4f1a67b3338",
      "6670ab02f446b4f1a67b333a",
      "6670ab02f446b4f1a67b333e"
    ],
    "createdAt": "2024-06-17T21:30:42.709Z",
    "updatedAt": "2024-06-30T05:02:33.502Z",
    "__v": 0
  },
  {
    "_id": "667ae3d60e5bcd50160f411b",
    "name": "Author Agent",
    "description": "Lorem ipsum",
    "reasoningLLMModel": "MISTRAL_SMALL",
    "reasoningPrompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt, a capability, and context. The prompt, capability, and context are all strings.\nmessage contains simple commands for a particular capability. These commands will later be executed in parallel.\nselected capability can ONLY be one of the following: StreamCapability. Do NOT include any other capabilities.\n\n# Example 1:\n# Prompt: \"What is a Sauterne wine?\" \n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Define what a Sauterne wine is\", \"capability\": \"StreamCapability\", \"context\": \"You are a wine expert\"}\n    ]\n}\n```\n\n# Example 2:\n# Prompt: \"Tell me about central banks\"\n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Tell me about the function and history of the Federal Reserve\", \"capability\": \"StreamCapability\", \"context\": \"You are a PhD Economist\"}\n    ]\n}\n```\n</System>\n",
    "capabilities": [
      "667ae47c6d5e4973f402e1f4"
    ],
    "createdAt": "2024-06-25T15:35:50.504Z",
    "updatedAt": "2024-06-27T16:49:21.648Z",
    "__v": 0
  },
  {
    "_id": "667aeb2f7ed1fd8cdf11ad59",
    "name": "Web Scraping Agent",
    "description": "Scraps websites for information.",
    "reasoningLLMModel": "MISTRAL_SMALL",
    "reasoningPrompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt, a capability, and context. The prompt, capability, and context are all strings.\nmessage contains simple commands for a particular capability. These commands will later be executed in parallel.\nselected capability can ONLY be one of the following: ScrapCapability. Do NOT include any other capabilities.\n\n# Example 1:\n# Prompt: Get all links from kylelierer.com\n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Pull all links from the webpage\", \"capability\": \"ScrapCapability\", \"context\": \"The website url is kylelierer.com\"}\n    ]\n}\n```\n\n# Example 2:\n# Prompt: Get all h1 text and links from google.com\n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Get all h1 text\", \"capability\": \"ScrapCapability\", \"context\": \"The website url is google.com\"},\n        { \"prompt\": \"Pull all links from the webpage\", \"capability\": \"ScrapCapability\", \"context\": \"The website url is google.com\"}\n    ]\n}\n```\n</System>\n",
    "capabilities": [
      "667aef4cacf7000556d2ddb3"
    ],
    "createdAt": "2024-06-25T16:07:11.045Z",
    "updatedAt": "2024-06-27T21:12:52.032Z",
    "__v": 0
  },
  {
    "_id": "667d99a769b67704281c4e20",
    "name": "Reasoning Prompt Generator Agent",
    "description": "This agent will analyze the capabilities of another agent and write a reasoning prompt for it based on active capabilities",
    "reasoningLLMModel": "CLAUDE_3_HAIKU",
    "reasoningPrompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt, a capability, and context. The prompt, capability, and context are all strings.\nmessage contains simple commands for a particular capability. These commands will later be executed in parallel.\nselected capability can ONLY be one of the following: ReasoningPromptCapability. Do NOT include any other capabilities.\n\n# Example 1:\n# Prompt: Write the reasoning prompt for Drawing Agent\n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Write the reasoning prompt for Drawing Agent\", \"capability\": \"ReasoningPromptCapability\", \"context\": \"<Anything between></open and closing tags>\"}\n    ]\n}\n```\n</System>",
    "capabilities": [
      "667dd59869b67704281c4e6b"
    ],
    "createdAt": "2024-06-27T16:56:07.955Z",
    "updatedAt": "2024-06-27T21:31:29.677Z",
    "__v": 0
  }
]