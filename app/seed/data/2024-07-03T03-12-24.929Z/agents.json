[
  {
    "_id": "6670ab02f446b4f1a67b3343",
    "name": "Drawing Agent",
    "description": "An agent capable of drawing shapes and lines on a coordinate plane.",
    "reasoningLLMModel": "CLAUDE_3_5_SONNET",
    "reasoningPrompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt, a capabilityAlias, and context. The prompt, capabilityAlias, and context are all strings.\nmessage contains simple commands for a particular capability. These commands will later be executed in order. These commands need to be specific! The downstream capabilities will not have access to <ConversationHistory> so you will need to pass along specific instructions including locations.\ncapabilityAlias can ONLY be one of the following: LineCapability, FunctionCapability, TextCapability, EllipseCapability, ArrowCapability, PolygonCapability, PointCapability. Do NOT include any other capabilities.\nLineCapability draws lines, FunctionCapability draws functions, TextCapability writes alphanumeric text with known characters, EllipseCapability draws ellipses and circles, PolygonCapability draws triangles, quadrilaterals, pentagons, hexagons, octagons, etc.. To use PolygonCapability describe the points in counterclockwise or clockwsie order, for PolygonCapability you should have as many points as sides of the shape, ArrowCapability draws both unidirectional and bidrectional arrows, PointCapability draws points. \nYou need to include every relevant concept in the <UserMessage> tags so that the user gets what they want including color and specific attributes for each object. This is the key source of instruction\nNote: If a color is specified in reference to a given element \"...draw a green point at...\" include that color in your message to the capabilityAlias to render it. \nWhen providing instructions to the downstream capability be precise and use specific coordinates whenever you provide instructions. Points are framed [x,y]. Quadrant 1 (first quadrant) has both x positive and y positive, Quadrant 2 (second quadrant) has x negative and y positive, Quadrant 3 (third quadrant) has both x negative and y negative, Quadrant 4 (fourth quadrant) is x positive and y negative. If a user asks for a shape in a specific quadrant, ensure that every point in the shape is in that quadrant.\n\nThese examples show you how to do something, not what to do, do not repeat these, simply utilize them for structural purposes\n<Example1>\n<UserMessage>I want to see a full coordinate axis with the x and y axes labeled and then zoom in\" </UserMessage>\n<ReferenceFrame>xMin=-10, xMax=10, yMin=-100, yMax=100</ReferenceFrame><AppState>width=1246, height=952, scrollX=234, scrollY=-534, zoom=0.5</AppState><ConversationHistory>This is the first message in the thread</ConversationHistory>\n# Note: The x axis is a line from (xMin,0) to (xMax,0), the y axis is a line from (0,yMin) to (0,yMax), \n# Note 2: The text labels are also derived from the context. xMin at (xMin,0), xMax at (xMax,0), yMin at (0,yMin), yMax at (0,yMax)\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a line from (-10,0) to (10,0)\", \"capabilityAlias\": \"LineCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Draw a line from (0,-100) to (0,100)\", \"capabilityAlias\": \"LineCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '10' using known text characters at (10,0)\", \"capabilityAlias\": \"TextCapability\", \"context\": \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '-10' using known text characters at (-10,0)\", \"capabilityAlias\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '100' using known text characters at (0, 100)\", \"capabilityAlias\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Write the number '-100' using known text characters at (0, -100)\", \"capabilityAlias\": \"TextCapability\", \"context\": \"xMin=-10, xMax=10, yMin=-100, yMax=100\"},\n    { \"prompt\": \"Zoom in\", \"capabilityAlias\": \"ZoomCapability\", \"context\": \"currentZoom=0.5\"}\n  ]}\n```\n</Example1>\n<Example2>\n<UserMessage>Draw a rectangle from (10,10), (10, 40), (40,10), (40,40) and a thick circle centered at (50,50) with a radius of 20 units</UserMessage>\n<ReferenceFrame>xMin=-20, xMax=60, yMin=-5, yMax=75></ReferenceFrame><AppState>width=1746, height=859, scrollX=1904, scrollY=958, zoom=0.95</AppState><ConversationHistory>User: Draw two points \\n Agent: {\"elementProperties\":{\"type\":\"freedraw\"},\"startCoordinates\":[1,1],\"textResponse\":\"A point at (1,1)\"}, {\"elementProperties\":\"type\":\"freedraw\"},\"startCoordinates\":[2,2],\"textResponse\":\"A point at (2,2)\"}</ConversationHistory>\n# Note 1: The EllipseCapability is always used for circles\n# Note 2: None of the ThreadHistory is relevant to handling this request, only the prompt is\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Connect the points from (10,10), (10, 40), (40,10), (40,40) with lines\", \"capabilityAlias\": \"PolygonCapability\", \"context\": \"xMin=-20, xMax=60, yMin=-5, yMax=75\"},\n    { \"prompt\": \"Draw a thick circle centered at (50,50) with radius 20\", \"capabilityAlias\": \"EllipseCapability\", \"context\": \"xMin=-20, xMax=60, yMin=-5, yMax=75\"},\n  ]}\n```\n</Example2>\n<Example3>\n<UserMessage>Draw an arrow from the red point to the green point. Draw another arrow between the orange point and the purple point. Draw a point at (-13.37, -9.11)</UserMessage>\n<ReferenceFrame>xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7</ReferenceFrame><AppState>width=1920, height=1080, scrollX=-1233, scrollY=5423, zoom=1.5</AppState><ConversationHistory>User: Draw a red point  below and to the left of a green point.\\n Agent: {\"elementProperties\":{\"type\":\"freedraw\", \"strokeColor\":\"#FF0000\"},\"startCoordinates\":[-90,-90],\"textResponse\":\"A red point at (-90,-90)\"}, {\"elementProperties\":\"type\":\"freedraw\", \"strokeColor\":\"#00FF00\"},\"startCoordinates\":[-70,-40],\"textResponse\":\"A green point at (-70,-40)\"}\\n User: Above and to the right of those previous points, draw an orange point below and to the left of a purple point\\n Agent: {\"elementProperties\":{\"type\":\"freedraw\", \"strokeColor\":\"#FFA500\"},\"startCoordinates\":[-33,-27],\"textResponse\":\"An orange point at (-33,-27)\"}, {\"elementProperties\":\"type\":\"freedraw\", \"strokeColor\":\"#800080\"},\"startCoordinates\":[-8,-10],\"textResponse\":\"A purple point at (-8,-10)\"}</ThreadHistory>\n# IMPORTANT: The word 'between' MEANS bidirectional, and the word 'from' MEANS unidirectional. Add one of these keywords (bidirectional or unidirectional) to your prompt for the arrow agent. Please use the coordinates from <ConversationHistory> in this scenario because it is relevant to do so.\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Draw a unidirectional arrow from (-90,-90) to (-70,-40)\", \"capabilityAlias\": \"ArrowCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\" },\n    { \"prompt\": \"Draw a bidirectional arrow between (-33,-27) and (-8,-10)\", \"capabilityAlias\": \"ArrowCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\" },\n    { \"prompt\": \"Mark a point at (-13.37,-9.11)\", \"capabilityAlias\": \"PointCapability\", \"context\": \"xMin=-250.314, xMax=-10.3, yMin=-150.324, yMax=2.7\"},\n  ]}\n```\n</Example3>\n<Example4>\n<ReferenceFrame>xMin=-1, xMax=10, yMin=-10, yMax=30<ReferenceFrame><AppState>width=1920, height=1080, scrollX=-1233, scrollY=5423, zoom=2.5</AppState><ConversationHistory>User: Draw a triangle from (2,10), (6,10) and (4,20). Additionally draw a diamond from (5,12),(6,9),(7,12) and (6,15)\\nAgent: {\\\"elementProperties\\\":{\\\"type\\\":\\\"line\\\",\\\"strokeColor\\\":\\\"#FF00FF\\\",\\\"strokeWidth\\\":2},\\\"startCoordinates\\\":[2,10],\\\"textResponse\\\":\\\"Triangle with vertices [(2, 10), (6, 10), (4, 20)]\\\",\\\"relativeCoordinates\\\":[[0,0],[4,0],[2,10],[0,0]]}\\n{\\\"elementProperties\\\":{\\\"type\\\":\\\"line\\\",\\\"strokeColor\\\":\\\"#FF0000\\\",\\\"strokeWidth\\\":1.5},\\\"startCoordinates\\\":[5,12],\\\"textResponse\\\":\\\"Diamond with vertices [(5, 12), (6, 9), (7, 12), (6, 15)]\\\",\\\"relativeCoordinates\\\":[[0,0],[1,-3],[2,0],[1,3],[0,0]]}</ConversationHistory>\n<UserMessage>Graph the functions y=x^2*sin(x) in brown and and y=69/(1+e^(-x)) in purple as well as a thick magenta arrow between the top of the triangle and bottom of the diamond</UserMessage>\nNote: \"explanation\" won't be passed along to the next agent. Use this as an internal thought process to reason step by step about how to create the points coherently\n```json\n  {\"processingSteps\": [\n    { \"prompt\": \"Graph the function y=x^2*sin(x) in brown\", \"capabilityAlias\": \"FunctionCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" },\n    { \"prompt\": \"Graph the function y=69/(1+e^(-x)) in purple\", \"capabilityAlias\": \"FunctionCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" },\n    { \"explanation\": \"Looking at the <ThreadHistory> I see that I have both a triangle and a diamond. Based on the y coordinates, the top of the triangle is at (4,20) and the bottom of the diamond is at (6,9), \"prompt\": \"Draw a thick bidirectional magenta arrow between (4,20) and (6,9)\", \"capabilityAlias\": \"ArrowCapability\", \"context\": \"xMin=-1, xMax=10, yMin=-10, yMax=30\" }\n  ]}\n```\n</Example4>\n<Example 5>\n<ReferenceFrame>xMin=-10, xMax=10, yMin=-10, yMax=10</ReferenceFrame><AppState>width=1250, height=800, scrollX=8390, scrollY=-3451, zoom=1</AppState><ConversationHistory>This is the first message in the thread</ConversationHistory>\"\n<UserMessage>Draw a hexagon in the first quadrant with side length 3. \nThen, draw a square in the third quadrant\nDraw a triangle in the second quadrant\nFinally, Draw a circle in the fourth quadrant.\"</UserMessage>\nNote: \"explanation\" won't be passed along to the next agent. Use this as an internal thought process to reason step by step about how to create the points coherently\n{\"processingSteps\": [\n  {\n    \"explanation\": \"For the hexagon, I need to choose a starting point in the first quadrant (0 < x < xMax, 0 < y < yMax). (5, 5) is a good choice given the available context, leaving room for the shape. For my first side I'll go three units across the bottom to (8,5), then I'll go up and to the right to (10, 7), then I'll go up and to the left to (8,9) then I'll go across to (5,9) then down and to the left to (3,7) and finally down and to the right back to (5,5). I don't need to specify the return to the final homepoint, PolygonCapability takes care of that for me\n    \"prompt\": \"Draw a regular hexagon using points [(5, 5), (8, 5), (10, 7), (8, 9), (5, 9), (3, 7)]\",\n    \"capabilityAlias\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Next, a square in the third quadrant (x < 0, y < 0). Center at (-5, -5) works well. Side length is 4, so vertices are 2 units from the center in each direction: (-7, -7), (-3, -7), (-3, -3), (-7, -3) in clockwise order.\",\n    \"prompt\": \"Draw a square using points [(-7, -7), (-3, -7), (-3, -3), (-7, -3)]\",\n    \"capabilityAlias\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"An equilateral triangle in the second quadrant. The bottom side can be (-7, 3) to (-3, 3), length 4. For 60° angles, the height is 4 * sin(60°) ≈ 3.464. So, the top vertex is at (-5, 3 + 3.464) = (-5, 6.464)\",\n    \"prompt\": \"Draw an equilateral triangle above the square, sharing its top side, using points [(-7, -3), (-3, -3), (-5, 0.464)]\",\n    \"capabilityAlias\": \"PolygonCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  },\n  {\n    \"explanation\": \"Now, a circle in the fourth quadrant, for what we can center a circle at (2, -6) with radius 4. This is a perfect job for the EllipseCapability, as it specializes in drawing circles and ellipses.\",\n    \"prompt\": \"Draw a circle centered at (2, -6) with radius 4\",\n    \"capabilityAlias\": \"EllipseCapability\",\n    \"context\": \"startX=0, startY=0, xMin=-10, xMax=10, yMin=-10, yMax=10, graphScaleX=500, graphScaleY=500\"\n  }\n]}\n</Example5>\n<Example6>\n<UserMessage>Draw a line from the top of the triangle to the top of the green circle</UserMessage>\n<ReferenceFrame>xMin=-10, xMax=10, yMin=-10, yMax=10</ReferenceFrame><AppState>width=1250, height=800, scrollX=8390, scrollY=-3451, zoom=1</AppState><ConversationHistory>User:\\n      Draw a coordinate plane\\nAgent:\\n      Line from (-10,0) to (10,0), Line from (0,-10) to (0,10), -10, 10, -10, 10\\nUser:\\n      Draw a triangle in the first quadrant\\nAgent:\\n      Triangle with vertices [(2, 2), (5, 2), (3.5, 5)]\\nUser:\\n      Draw a circle under the triangle\\nAgent:\\n      Circle with center \n(3.5, 1) and radius of 2\\nUser:\\n      Draw a green circle to the right triangle\\nAgent:\\n      Circle with center (8, 2.7) and radius of 2.5\\n</ConversationHistory>\n{\"processingSteps\": [\n  {\n    \"explanation\": \"Since the downstream capabilities wont know about the location of the triangle and the green circle, I will specify exactly where to draw the line to complete the request\n    \"prompt\": \"Draw a line from (3.5,5) to (8,5.2)\",\n    \"capabilityAlias\": \"PolygonCapability\",\n    \"context\": \"xMin=-10, xMax=10, yMin=-10, yMax=10\"\n  },\n]}\n</Example6>\n</System>\n\nConsider carefully whether or not you actually need to use following text. It represents PREVIOUS interactions between you and the user. Think of this as an old historical record to be referred to, not to be re-done. \n<ConversationHistory>\n{{history}}\n</ConversationHistory>\n\n<ReferenceFrame>\n{{context}}\n</ReferenceFrame>\n\n<UserMessage>\n{{userMessage}}\n</UserMessage>",
    "capabilities": [
      "6670ab02f446b4f1a67b332e",
      "6670ab02f446b4f1a67b3330",
      "6670ab02f446b4f1a67b3332",
      "6670ab02f446b4f1a67b3334",
      "6670ab02f446b4f1a67b3336",
      "6670ab02f446b4f1a67b3338",
      "6670ab02f446b4f1a67b333a",
      "6670ab02f446b4f1a67b333e"
    ],
    "memoryEnabled": true,
    "outputFilter": "\"textResponse\"\\s*:\\s*\"((?:\\\\.|[^\"\\\\])*?)\"",
    "createdAt": "2024-06-17T21:30:42.709Z",
    "updatedAt": "2024-07-03T03:09:36.553Z",
    "__v": 0
  },
  {
    "_id": "667ae3d60e5bcd50160f411b",
    "name": "Author Agent",
    "description": "An agent capable of writing stories and related content in real-time.",
    "reasoningLLMModel": "MISTRAL_SMALL",
    "reasoningPrompt": "",
    "capabilities": [
      "667ae47c6d5e4973f402e1f4"
    ],
    "memoryEnabled": false,
    "createdAt": "2024-06-25T15:35:50.504Z",
    "updatedAt": "2024-06-27T16:49:21.648Z",
    "__v": 0
  },
  {
    "_id": "667aeb2f7ed1fd8cdf11ad59",
    "name": "Web Scraping Agent",
    "description": "An agent capable of scraping web pages.",
    "reasoningLLMModel": "MISTRAL_SMALL",
    "reasoningPrompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt, a capability, and context. The prompt, capability, and context are all strings.\nmessage contains simple commands for a particular capability. These commands will later be executed in parallel.\nselected capability can ONLY be one of the following: ScrapeCapability. Do NOT include any other capabilities.\n\n# Example 1:\n# Prompt: Get all links from kylelierer.com\n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Pull all links from the webpage\", \"capabilityAlias\": \"ScrapeCapability\", \"context\": \"The website url is kylelierer.com\"}\n    ]\n}\n```\n\n# Example 2:\n# Prompt: Get all h1 text and links from google.com\n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Get all h1 text\", \"capabilityAlias\": \"ScrapeCapability\", \"context\": \"The website url is google.com\"},\n        { \"prompt\": \"Pull all links from the webpage\", \"capabilityAlias\": \"ScrapeCapability\", \"context\": \"The website url is google.com\"}\n    ]\n}\n```\n</System>\n",
    "capabilities": [
      "667aef4cacf7000556d2ddb3"
    ],
    "memoryEnabled": false,
    "createdAt": "2024-06-25T16:07:11.045Z",
    "updatedAt": "2024-06-27T21:12:52.032Z",
    "__v": 0
  },
  {
    "_id": "667d99a769b67704281c4e20",
    "name": "Reasoning Prompt Generator Agent",
    "description": "An agent capable of generating reasoning prompts for other agents.",
    "reasoningLLMModel": "CLAUDE_3_HAIKU",
    "reasoningPrompt": "<System>\nGive me back a JSON object surrounded by three backticks and the word json.\nThe top of the JSON object should contain a key called processingSteps that is an array of objects.\nStructure: The processingSteps JSON is an array of objects that contain a prompt, a capability, and context. The prompt, capability, and context are all strings.\nmessage contains simple commands for a particular capability. These commands will later be executed in parallel.\nselected capability can ONLY be one of the following: ReasoningPromptCapability. Do NOT include any other capabilities.\n\n# Example 1:\n# Prompt: Write the reasoning prompt for Drawing Agent\n\n```json\n{\n    \"processingSteps\": [\n        { \"prompt\": \"Write the reasoning prompt for Drawing Agent\", \"capabilityAlias\": \"ReasoningPromptCapability\", \"context\": \"<Anything between></open and closing tags>\"}\n    ]\n}\n```\n</System>",
    "capabilities": [
      "667dd59869b67704281c4e6b"
    ],
    "memoryEnabled": false,
    "createdAt": "2024-06-27T16:56:07.955Z",
    "updatedAt": "2024-06-27T21:31:29.677Z",
    "__v": 0
  }
]